0.already.extends.1.and.will.not.compile.after.converting.2.to.a.class={0}, реализующий {2}, уже расширяет {1} и не будет компилироваться после преобразования {2} в класс
0.implementing.1.will.not.compile.after.converting.1.to.a.class={0}, реализующий {1}, не будет компилироваться после преобразования {1} в класс
0.is.declared.in.1.but.when.public.should.be.declared.in.a.file.named.2={0} объявлен в {1}, но при public должен быть объявлен в файле с именем {2}
0.will.have.incompatible.access.privileges.with.overriding.1={0} будет иметь несовместимые права доступа с переопределяющим {1}
0.will.have.incompatible.access.privileges.with.super.1={0} будет иметь несовместимые права доступа с super {1}
0.will.no.longer.be.visible.from.overriding.1={0} больше не будет видим из переопределяющего {1}
0.will.not.compile.after.converting.1.to.a.class={0} не будет компилироваться после преобразования {1} в класс
adapter.to.listener.intention.family.name=Заменить расширение адаптера на реализацию слушателя
adapter.to.listener.intention.name=Заменить расширение ''{0}'' на реализацию ''Listener''
annotate.overridden.methods.intention.family.name=Аннотировать переопределяющие методы и их параметры
annotate.overridden.methods.intention.method.name=Аннотировать переопределяющие методы как ''{0}''
annotate.overridden.methods.intention.parameters.name=Аннотировать одинаковые параметры переопределяющих методов как ''{0}''
change.modifier.intention.name=Изменить модификатор доступа
change.to.c.style.comment.intention.family.name=Заменить на блочный комментарий
change.to.c.style.comment.intention.name=Заменить на блочный комментарий
change.to.end.of.line.comment.intention.family.name=Заменить на комментарий в конце строки
change.to.end.of.line.comment.intention.name=Заменить на комментарий в конце строки
change.variable.type.to.rhs.type.intention.family.name=Изменить тип переменной на тип инициализатора
change.variable.type.to.rhs.type.intention.name=Объявить ''{0}'' с типом ''{1}''
char.to.string.intention.family.name=Заменить символ на строку
char.to.string.intention.name=Заменить символьный литерал на строку
constant.expression.intention.name=Вычислить константное значение ''{0}''
constant.subexpression.intention.family.name=Вычислить константное значение для подвыражения
convert.catch.to.throws.intention.family.name=Заменить секцию catch на объявление throws
convert.catch.to.throws.intention.name=Заменить секцию 'catch' на объявление 'throws'
convert.catch.to.throws.intention.name.capitalized=Заменить секцию 'catch' на объявление 'throws'
convert.catch.to.throws.only.current.method=Добавить объявление throws только в текущий метод
convert.catch.to.throws.super.and.current.methods=Добавить объявление throws в текущий метод и super методы
convert.datapoints.fix.family.name=Преобразовать держатель аннотации @DataPoint(s)
convert.interface.to.class.intention.family.name=Преобразовать интерфейс в класс
convert.interface.to.class.intention.name=Преобразовать в 'class'
convert.to.nested.if.intention.family.name=Развернуть булево выражение в несколько if
convert.to.nested.if.intention.name=Преобразовать в несколько 'if'
copy.concatenated.string.to.clipboard.intention.family.name=Копировать текст конкатенации строк в буфер обмена
copy.concatenated.string.to.clipboard.intention.name=Копировать текст конкатенации строк в буфер обмена
copy.string.literal.to.clipboard.intention.name=Копировать текст строкового литерала в буфер обмена
copy.string.template.text.to.clipboard.intention.name=Копировать текст строкового шаблона в буфер обмена
create.assert.intention.family.name=Создать JUnit assertion
create.assert.intention.name=Создать JUnit assertion
create.missing.switch.branches.family.name=Создать отсутствующие ветки switch
demorgans.intention.family.name=Законы де Моргана
detail.exceptions.intention.family.name=Детализовать исключения
detail.exceptions.intention.name=Детализовать исключения
eliminate.parentheses.intention.name=Убрать скобки
eliminate.parentheses.intention.title=Убрать скобки
expand.boolean.assignment.intention.name=Развернуть булево присваивание в 'if else'
expand.boolean.declaration.intention.name=Развернуть булево объявление в 'if else'
expand.boolean.intention.family.name=Развернуть булево выражение
expand.boolean.return.intention.name=Развернуть булев возврат в 'if else'
extract.increment.intention.family.name=Извлечь инкремент
extract.increment.intention.name=Извлечь ''{0}''
extract.to.method.reference.intention.name=Извлечь в ссылку на метод
extract.while.loop.condition.to.if.statement.intention.family.name=Извлечь условие цикла while во внутренний if
extract.while.loop.condition.to.if.statement.intention.name=Извлечь условие во внутренний 'if'
flip.assert.literal.intention.family.name=Инвертировать литерал assert
flip.commutative.method.call.intention.family.name=Инвертировать коммутативный вызов метода
flip.commutative.method.call.intention.name=Инвертировать ''.{0}()''
flip.commutative.method.call.intention.name1=Инвертировать ''.{0}()'' (может изменить семантику)
flip.comparison.intention.family.name=Инвертировать сравнение
flip.comparison.intention.name=Инвертировать ''{0}'' в ''{1}''
flip.conditional.intention.family.name=Инвертировать условное выражение
flip.conditional.intention.name=Инвертировать '?\:'
flip.expression.intention.family.name=Инвертировать бинарное выражение
flip.setter.call.intention.family.name=Инвертировать вызов сеттера
flip.smth.intention.name=Инвертировать ''{0}''
flip.smth.intention.name1=Инвертировать ''{0}'' (изменяет семантику)
inline.increment.intention.family.name=Встроить инкремент/декремент
inline.increment.intention.name=Встроить ''{0}''
intention.name.make.default=Сделать ''{0}()'' default
intention.name.replace.field.or.method=Заменить на @{0} {1, choice, 0\#поле|1\#метод}
invalid.pattern.hint.text=Некорректный шаблон
join.concatenated.string.literals.intention.family.name=Объединить конкатенированные строковые литералы
join.concatenated.string.literals.intention.name=Объединить конкатенированные строковые литералы
make.call.chain.into.call.sequence.intention.family.name=Развернуть цепочку вызовов в последовательность
make.call.chain.into.call.sequence.intention.name=Развернуть цепочку вызовов методов в последовательность
make.method.default.family.name=Сделать метод default
merge.call.sequence.to.chain.intention.family.name=Объединить последовательные вызовы методов в цепочку
merge.call.sequence.to.chain.intention.name=Объединить последовательные вызовы методов в цепочку
merge.else.if.intention.family.name=Объединить else if
merge.else.if.intention.name=Объединить 'else if'
merge.if.and.intention.family.name=Объединить вложенные 'if' выражения
merge.if.and.intention.name=Объединить вложенные 'if' выражения
merge.if.or.intention.family.name=Объединить последовательные 'if' выражения
merge.if.or.intention.name=Объединить последовательные 'if' выражения
merge.nested.try.statements.intention.family.name=Объединить вложенные try блоки
merge.nested.try.statements.intention.name=Объединить вложенные 'try' блоки
merge.parallel.ifs.intention.family.name=Объединить параллельные if
merge.parallel.ifs.intention.name=Объединить 'if'
move.comment.to.separate.line.intention.family.name=Переместить комментарий на отдельную строку
move.comment.to.separate.line.intention.name=Переместить комментарий на отдельную строку
negate.comparison.intention.family.name=Отрицать сравнение
negate.comparison.intention.name=Отрицать ''{0}''
negate.comparison.intention.name1=Отрицать ''{0}'' в ''{1}''
negate.conditional.intention.family.name=Отрицать условное выражение
negate.conditional.intention.name=Отрицать '?\:'
objects.require.non.null.intention.family.name=Использовать выражение 'java.util.Objects.requireNonNull()'
objects.require.non.null.intention.name=Использовать выражение 'java.util.Objects.requireNonNull()'
obscure.thrown.exceptions.intention.family.name=Заменить исключения в throws на одно более общее исключение
postfix.prefix.intention.family.name=Инвертировать префиксное/постфиксное выражение
press.escape.to.remove.highlighting.message=Нажмите Escape для удаления подсветки
replace.arm.with.try.finally.intention.family.name=Заменить try-with-resources на try-finally
replace.arm.with.try.finally.intention.name=Заменить 'try-with-resources' на 'try finally'
replace.assert.literal.with.assert.equals.intention.family.name=Заменить assertTrue, assertFalse или assertNull на assertEquals
replace.assert.literal.with.assert.equals.intention.name=Заменить ''{0}()'' на ''assertEquals({1}, ...)''
replace.assert.literal.with.assert.equals.intention.name1=Заменить ''{0}()'' на ''assertEquals(..., {1}, ...)''
replace.assert.literal.with.assert.equals.intention.name2=Заменить ''{0}()'' на ''assertEquals()''
replace.assignment.with.postfix.expression.intention.family.name=Заменить присваивание на постфиксное выражение
replace.concatenation.with.format.string.intention.family.name=Заменить конкатенацию строк на String.format()
replace.concatenation.with.format.string.intention.name=Заменить '+' на 'String.format()'
replace.concatenation.with.format.string.intention.name.formatted=Заменить '+' на 'formatted()'
replace.concatenation.with.string.buffer.intention.family.name=Заменить + на StringBuilder.append()
replace.concatenation.with.string.buffer.intention.name=Заменить '+' на 'StringBuffer.append()'
replace.concatenation.with.string.builder.intention.name=Заменить '+' на 'StringBuilder.append()'
replace.conditional.with.boolean.expression.intention.family.name=Заменить условное выражение на логическое выражение
replace.conditional.with.boolean.expression.intention.name=Заменить '?\:' на логическое выражение
replace.do.while.loop.with.while.loop.intention.family.name=Заменить цикл do while на цикл while
replace.do.while.loop.with.while.loop.intention.name=Заменить цикл 'do while' на цикл 'while'
replace.for.each.loop.with.indexed.for.loop.intention.family.name=Заменить цикл for-each на индексированный цикл for
replace.for.each.loop.with.indexed.for.loop.intention.name=Заменить цикл for-each на индексированный цикл 'for'
replace.for.each.loop.with.iterator.for.loop.intention.family.name=Заменить цикл for-each на итераторный цикл for
replace.for.each.loop.with.iterator.for.loop.intention.name=Заменить цикл for-each на итераторный цикл 'for'
replace.for.each.loop.with.optimized.indexed.for.loop.intention.family.name=Заменить цикл for-each на оптимизованный индексированный цикл for
replace.for.each.loop.with.optimized.indexed.for.loop.intention.name=Заменить цикл for-each на оптимизованный индексированный цикл 'for'
replace.format.string.with.concatenation.intention.family.name=Заменить String.format() на конкатенацию
replace.format.string.with.concatenation.intention.name=Заменить 'String.format()' на конкатенацию
replace.multiply.with.shift.intention.family.name=Заменить умножение на побитовый сдвиг
replace.octal.escape.with.unicode.escape.intention.family.name=Заменить восьмеричную последовательность на Unicode
replace.octal.escape.with.unicode.escape.intention.name=Заменить восьмеричную последовательность на Unicode
replace.on.demand.import.intention.family.name=Заменить импорт по требованию на импорт отдельных классов
replace.on.demand.import.intention.name=Заменить на импорт отдельных классов
replace.operator.assignment.with.assignment.intention.family.name=Заменить присваивание с оператором на простое присваивание
replace.operator.assignment.with.postfix.expression.intention.family.name=Заменить присваивание с оператором на постфиксное выражение
replace.postfix.expression.with.assignment.intention.family.name=Заменить постфиксное выражение на присваивание
replace.postfix.expression.with.operator.assignment.intention.family.name=Заменить постфиксное выражение на присваивание с оператором
replace.shift.with.multiply.intention.family.name=Заменить побитовый сдвиг на умножение
replace.switch.with.if.intention.family.name=Заменить switch на if
replace.switch.with.if.intention.name=Заменить 'switch' на 'if'
replace.with.arrays.as.list.intention.family.name=Заменить на 'Arrays.asList()'
replace.with.mutable.collection.intention.family.name=Заменить на изменяемую коллекцию
replace.with.mutable.collection.intention.intention.name=Заменить на ''{0}''
reverse.for.loop.direction.intention.family.name=Изменить направление цикла for
reverse.for.loop.direction.intention.name=Изменить направление цикла for
show.example.date.time.output.intention.family.name=Показать пример вывода даты и времени
split.declaration.and.initialization.intention.family.name=Разделить объявление и инициализацию
split.declaration.and.initialization.intention.name=Разделить на объявление и инициализацию
split.else.if.intention.family.name=Разделить else if
split.else.if.intention.name=Разделить 'else if'
unicode.unescape.intention.family.name=Заменить Unicode-последовательность на обычный символ
unicode.unescape.intention.name=Заменить Unicode-последовательность на символ
wrap.vararg.arguments.with.explicit.array.intention.family.name=Обернуть vararg-аргументы в явное создание массива
wrap.vararg.arguments.with.explicit.array.intention.name=Обернуть vararg-аргументы в явное создание массива