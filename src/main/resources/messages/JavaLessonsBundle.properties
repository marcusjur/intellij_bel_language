java.basic.completion.activate=Чтобы активировать базовое автодополнение, нажмите {0}, и вы снова увидите меню подсказок.
java.basic.completion.choose.first=Вы можете выбрать первый элемент из меню подсказок, нажав {0}.
java.basic.completion.choose.item=Выберите {0} в меню подсказок и нажмите {1}.
java.basic.completion.complete=Нажмите {0}, чтобы завершить это выражение.
java.basic.completion.deeper.level=Иногда вам нужно увидеть предложения для статических констант или методов. Нажмите {0} дважды, чтобы получить их в подсказках.
java.basic.completion.module.promotion=Больше о рефакторинге вы узнаете в модуле {0}.
java.debug.workflow.confirm.hot.swap=Подтвердите перезагрузку <strong>Hot Swap</strong>.
java.debug.workflow.drop.frame=Мы исправили наш метод, но все еще выполняем устаревший {0}, который снова вызовет исключение. Давайте удалим фрейм и вернемся к состоянию до вызова {1}. Нажмите {2} рядом с верхним вызовом в стеке фреймов или нажмите {3}.
java.debug.workflow.hotswap.disabled.warning=Функция <strong>Hot Swap</strong> отключена в настройках ИСР. Включите её в {0} | {1} | {2} <strong>→</strong> {3} или просто <callback id\="{4}">нажмите для активации</callback>.
java.debug.workflow.invalid.drop=Похоже, вы выполнили действие, не предусмотренное уроком. Пожалуйста, перезапустите урок.
java.debug.workflow.no.confirmation=<strong>Hot Swap</strong> выполняется автоматически в фоновом режиме. Вы можете увидеть соответствующее сообщение в левом нижнем углу.
java.debug.workflow.rebuild=Мы могли бы перезапустить нашу небольшую программу после исправления, но для больших программ перезапуск может занять много времени. Если исправление затрагивает только чистый метод (как в данном случае), мы можем пересобрать проект и применить <strong>Hot Swap</strong> вместо перезапуска. Нажмите {0}, чтобы собрать проект.
java.editor.coding.assistance.press.to.fix=Нажмите {0}, чтобы заменить аргумент пустым массивом.
java.extract.method.edit.method.name=Отредактируйте имя нового метода или оставьте предложенное ИСР. Затем нажмите {0}.
java.inheritance.hierarchy.choose.any.implementation=Выберите любую реализацию и нажмите {0} или щёлкните по ней.
java.inheritance.hierarchy.goto.implementation=Нажмите {0}, чтобы найти реализации {1}.
java.inheritance.hierarchy.help.link=Иерархия исходного кода
java.inheritance.hierarchy.hide.find.tool.window=Нажмите {0}, чтобы скрыть инструментальное окно {1}.
java.inheritance.hierarchy.hide.method.hierarchy=Давайте (также) скроем {0}. Снова нажмите {1}.
java.inheritance.hierarchy.invoke.implementations.again=Объявление базового метода имеет свой значок в области левого поля {0}. Щёлкните по нему или снова нажмите {1}.
java.inheritance.hierarchy.last.note=<strong>Примечание\:</strong> Действия {0} и {1} также можно применять к классам. Действия {2} и {3} используются редко, но вы всегда можете найти их с помощью {4}, используя фильтр {5}.
java.inheritance.hierarchy.lesson.name=Иерархия наследования
java.inheritance.hierarchy.navigate.to.base=Вы можете перейти к супер-методу из производного. Нажмите {0} или щёлкните по значку {1} в области левого поля редактора.
java.inheritance.hierarchy.open.class.hierarchy=Чтобы просмотреть иерархию классов, нажмите {0}.
java.inheritance.hierarchy.open.in.find.tool.window=Для больших иерархий вы можете искать реализации в инструментальном окне {0}. Нажмите {1}.
java.inheritance.hierarchy.open.method.hierarchy=Вы можете исследовать всю иерархию для этого метода. Нажмите {0}.
java.missed.sdk.click.setup=<ide/> не может найти JDK на вашем компьютере. ИСР требуется JDK для запуска Java-программ и обеспечения помощи при написании кода. Для настройки JDK нажмите подсвеченную ссылку {0}.
java.missed.sdk.configure=Настройте JDK, используя один из предложенных вариантов. Вы можете скачать JDK или указать путь к существующей домашней директории JDK на вашем компьютере.
java.missed.sdk.read.more.tip=<strong>Совет</strong>\: подробнее о JDK можно прочитать в <a href\=''{0}''>документации</a>.
java.missed.sdk.show.options=Нажмите, чтобы увидеть доступные варианты
java.missed.sdk.wait.installation=Пожалуйста, подождите, пока ИСР установит JDK
java.onboarding.apply.action=Выберите действие {0} и нажмите {1}.
java.onboarding.apply.intention=Выберите {0} и нажмите {1}.
java.onboarding.balloon.about.debug.panel=Инструментальное окно {0} предоставляет панель инструментов с различными действиями отладки. Вы можете попробовать их позже в уроке {1}.
java.onboarding.balloon.click.here=Нажмите здесь, чтобы установить точку останова
java.onboarding.balloon.open.file=Дважды щёлкните, чтобы открыть {0}
java.onboarding.balloon.open.learn.toolbar=Переключитесь на инструментальное окно {0}, чтобы продолжить урок
java.onboarding.balloon.project.view=Нажмите, чтобы открыть <strong>окно проекта</strong>
java.onboarding.balloon.source.directory=Разверните директорию {0}, чтобы просмотреть исходные файлы проекта
java.onboarding.balloon.start.debugging=Нажмите на значок, чтобы начать отладку
java.onboarding.balloon.stop.debugging=Нажмите на значок, чтобы остановить отладку
java.onboarding.case.changed=Регистр изменен.
java.onboarding.change.ui.settings=Для этого урока ИСРA изменит некоторые настройки интерфейса на значения по умолчанию. Ваши настройки будут восстановлены после завершения или выхода из урока.
java.onboarding.choose.values.item=Теперь вы можете начать вводить {0}, чтобы сократить список автодополнения, или выбрать этот элемент и нажать {1}.
java.onboarding.epilog=Поздравляем\! Вы завершили ознакомительный тур. Теперь вы можете\:\n  - <callback id\="{0}">Закрыть</callback> учебный проект{1}\n  - <callback id\="{2}">Показать</callback> больше уроков
java.onboarding.feedback.system.current.jdk=Текущий JDK\:
java.onboarding.feedback.system.found.jdks=Найденные JDK\:
java.onboarding.feedback.system.jdk.at.start=JDK при запуске\:
java.onboarding.feedback.system.lang.level=Уровень языка\:
java.onboarding.indexing.description=При первом открытии проекта <ide/> сканирует JDK и сам проект для сбора информации, необходимой для помощи при написании кода. Чтобы продолжить, дождитесь завершения индексации.
java.onboarding.invoke.completion=Теперь введем точку {0}, чтобы показать все доступные варианты автодополнения.
java.onboarding.invoke.completion.balloon=Введите точку {0}, чтобы показать все доступные варианты автодополнения
java.onboarding.invoke.completion.tip=<strong>Совет</strong>\: <ide/> показывает варианты автодополнения автоматически при вводе. Также вы можете нажать {0}, чтобы показать элементы автодополнения в любом месте кода.
java.onboarding.invoke.intention.for.code=Намерения также экономят ваше время и упрощают кодование. Давайте используем намерение для переформатования конкатенации строк. Нажмите {0}, чтобы показать возможные варианты.
java.onboarding.invoke.intention.for.code.balloon=Нажмите {0}, чтобы показать доступные намерения
java.onboarding.invoke.intention.for.warning.1=Вы только что исправили ошибку, но этот код можно сделать еще лучше. ИСРA подсвечивает и добавляет желтую лампочку к строкам кода, которые можно улучшить.
java.onboarding.invoke.intention.for.warning.2=Нажмите {0}, чтобы просмотреть предупреждения и применить быстрое исправление.
java.onboarding.invoke.intention.for.warning.balloon=Нажмите {0}, чтобы показать доступные быстрые исправления
java.onboarding.invoke.search.everywhere.1=При работе в <ide/> вам может понадобиться поиск файлов в проекте, символов, классов или даже действий ИСР. В этом уроке давайте найдем действие {0}, чтобы сделать строку {1} строчной.
java.onboarding.invoke.search.everywhere.2=Нажмите {0} дважды, чтобы открыть диалог {1}.
java.onboarding.lesson.name=Знакомство с ИСРA
java.onboarding.module.description=Краткий обзор основных функций {0}.
java.onboarding.module.name=Ознакомительный тур
java.onboarding.project.view.description=<strong>Окно проекта</strong> - одно из основных инструментальных окон. Оно содержит директорию проекта, внешние библиотеки SDK и временные файлы. Нажмите на кнопку с полосками для предпросмотра демо-проекта. Также можно открыть его, нажав {0}.
java.onboarding.run.options.community=Другие действия, такие как запуск с покрытием {0}, можно увидеть, нажав на {1}.
java.onboarding.run.options.ultimate=Другие действия, такие как профилирование {0} и запуск с покрытием {1}, можно увидеть, нажав на {2}.
java.onboarding.run.sample=Давайте запустим текущий файл, нажмите {0} или нажмите {1}.
java.onboarding.run.sample.balloon=Давайте запустим текущий файл, нажмите {0} или нажмите {1}
java.onboarding.search.everywhere.description=Как видите, выделенный текст {0} был автоматически скопирован в строку ввода. Давайте введем {1} вместо {0}.
java.onboarding.select.fix=Примените первый элемент\: {0}. В данном случае цикл <strong>for-each</strong> сделает код более понятным.
java.onboarding.start.debugging=Нажмите на значок {0}, чтобы начать процесс отладки.
java.onboarding.stop.debugging=Давайте остановим отладку. Нажмите на значок {0}.
java.onboarding.temporary.configuration.description=Вы открыли демонстрационный пример. Давайте запустим его\! В подсвеченной области {0} вы можете увидеть популярные действия запуска для выбранной конфигурации. Например, вы можете запустить код {1} или отладить его {2}.
java.onboarding.toggle.breakpoint.1=Вы могли заметить, что вместо ожидаемого значения {0} метод {1} возвращает {2}. Давайте остановимся на операторе return, чтобы отладить проблемный код.
java.onboarding.toggle.breakpoint.2=Нажмите на область левого поля внутри подсвеченной области, чтобы установить точку останова.
java.onboarding.type.division=После обнаружения проблемы в коде давайте исправим её. Разделите полученную сумму на длину значений. Скрипт урока уже вставил {0}.
java.onboarding.wait.indexing=Пожалуйста, подождите, пока ИСР индексирует файлы JDK
java.postfix.completion.complete=Выберите {0} из списка или введите то же значение в редакторе. Нажмите {1}, чтобы завершить выражение.
java.postfix.completion.type=Введите {0} после скобки, чтобы увидеть список предложений постфиксного завершения.
java.refactoring.menu.confirm.constant=В этом диалоге вы можете выбрать тип новой константы, имя, родительский класс и видимость. Вы можете оставить значения по умолчанию и нажать {0} или нажать {1}.
java.refactoring.menu.inline.variable=Теперь давайте заменим единственное использование переменной {0} выражением, которое её определяет. Вы можете нажать {1} и выбрать {2} из списка или нажать {3}, чтобы вызвать это действие напрямую.
java.refactoring.menu.inline.variable.eng=Теперь давайте заменим единственное использование переменной {0} выражением, которое её определяет. Вы можете нажать {1} и отфильтровать меню рефакторинга по <strong>iv</strong> (<strong>i</strong>nline <strong>v</strong>ariable). Выберите этот пункт или нажмите {2}.
java.refactoring.menu.introduce.constant=Наконец, давайте извлечем расширение из имени файла. Снова нажмите {0} и выберите {1} или нажмите {2}
java.refactoring.menu.introduce.constant.eng=Наконец, давайте извлечем расширение из имени файла. Снова нажмите {0} и отфильтруйте по <strong>ic</strong> (<strong>i</strong>ntroduce <strong>c</strong>onstant) или нажмите {1}.
java.rename.confirm.accessors.rename=<ide/> обнаруживает соответствующие геттеры/сеттеры и предлагает переименовать их соответственно. Теперь просто нажмите {0} или нажмите {1}
java.rename.press.rename=Нажмите {0}, чтобы переименовать поле {1}.
java.rename.type.new.name=Введите новое имя для этого поля (например, {0}) и нажмите {1}.
java.run.configuration.lets.run=Существует несколько способов запустить ваш код. Давайте запустим его из области левого поля, нажав {0} и выбрав пункт {1}. Или вы можете нажать {2}.
java.smart.type.completion.apply=Умное автодополнение типов фильтрует список предложений, включая только типы, применимые в текущем контексте. Нажмите {0}, чтобы увидеть список подходящих предложений. Выберите первое, нажав {1}.
java.smart.type.completion.return=Умное автодополнение типов также может предлагать код для оператора return. Нажмите {0}, чтобы увидеть меню подсказок для return. Выберите первое, нажав {1}
java.statement.completion.complete.condition=Добавьте условие внутри скобок {0} и нажмите {1}, чтобы перейти в оператор {2}.
java.statement.completion.complete.finish.body=Введите строку кода\: {0}, затем нажмите {1}, чтобы завершить оператор и применить форматование.
java.statement.completion.complete.for=Нажмите {0}, чтобы завершить оператор {1}.
java.statement.completion.complete.if=Введите {0} и нажмите {1}, чтобы сгенерировать оператор.
java.statement.completion.help.link=Завершение операторов
java.statement.completion.lesson.name=Завершение операторов
toggle.case.part=регистр