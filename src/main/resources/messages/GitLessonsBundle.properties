git.annotate.add.shortcut.tip=<strong>Парада</strong>\: Вы можаце прызначыць спалучэнне клавіш для дзеяння {0}. Націсніце гэтую спасылку {1} і абярыце {2}.
git.annotate.choose.annotate=Выберыце опцыю {0}, каб паказаць гісторыю гэтага файла.
git.annotate.choose.show.diff=Выберыце опцыю {0}, каб паказаць, што змянілася ў гэтым фіксацыі.
git.annotate.click.annotation=Пстрыкніце па выдзеленай анатацыі, каб праглядзець інфармацыю аб гэтай фіксацыі.
git.annotate.click.annotation.tooltip=Пстрыкніце правай кнопкай мышы на анатацыі
git.annotate.click.gutter.balloon=Пстрыкніце вобласць правай кнопкай мышы
git.annotate.close.all.windows=Теперь закройте {0,choice,0\#все открытые окна|1\#все открытые вкладки редактора}, чтобы вернуться к редактору. Нажмите {1} два раза.
git.annotate.close.annotations=Цяпер вы можаце закрыць анатацыі.
git.annotate.close.by.shortcut=Націсніце {0}.
git.annotate.close.changes=Зыходзячы з вылучанага паведамлення фіксацыі, гэта дзіўнае значэнне {0} не з'яўляецца памылкай. Такім чынам, пасля доўгага падарожжа па гісторыі гэтага файла вы можаце зачыніць адкрытае акно інструмента. Націсніце {1}.
git.annotate.feature.explanation=Дзеянне {0} забяспечвае лёгкі доступ да апошняй фіксацыі, якая змяніла пэўны радок файла. Вы бачыце, што {1} апошні змяніў гэты радок. Пстрыкніце правай кнопкай мышы на выдзеленай анатацыі, каб адкрыць кантэкстнае меню.
git.annotate.found.needed.commit=Выдатна\! Мы знайшлі месца, дзе было зменена значэнне {0}. Давайце прааналізуем гэта ў апошні раз, каб высветліць прычыну гэтай змены.
git.annotate.go.deeper=Вы можаце заўважыць, што значэнне {0} было да гэтага фіксацыі. Паглыбімся ў гісторыю\!
git.annotate.help.link=Знайдзіце аўтара кода (Анатацыі з Git Blame)
git.annotate.introduction=Паглядзіце на вылучаную ўласцівасць. Значэнне ўласцівасці мае на ўвазе наяўнасць у кошкі чатырох вушэй. Прычына гэтай змены інтрыгуе. Мы можам даследаваць гісторыю файла з дапамогай функцыі {0}.
git.annotate.invoke.manually=Пстрыкніце правай кнопкай мышы на выдзеленай вобласці і абярыце {0} з меню.
git.annotate.invoke.manually.2=Пстрыкніце правай кнопкай мышы на выдзеленай вобласці і абярыце опцыю {0} з меню.
git.annotate.invoke.shortcut.1=Націсніце {0}, каб паказаць гісторыю гэтага файла.
git.annotate.invoke.shortcut.2=Перамясціце курсор у левы рэдактар ​​і зноў націсніце {0}.
git.annotate.invoke.shortcut.3=Перамясціце курсор у правы рэдактар ​​і націсніце {0}.
git.annotate.lesson.name=Анатацыі з Git Blame
git.annotate.open.context.menu=Пстрыкніце правай кнопкай мышы на вылучанай левай вобласці, каб адкрыць кантэкстнае меню.
git.annotate.show.diff=Пстрыкніце правай кнопкай мышы на выдзеленай анатацыі, каб адкрыць кантэкстнае меню і абярыце {0}.
git.changelists.shelf.choose.new.changelist=Націсніце на вылучаны значок і абярыце пункт меню {0}.
git.changelists.shelf.click.changelist.tooltip=Пстрыкніце правай кнопкай мышы на журнале змяненняў {0}
git.changelists.shelf.click.line.marker.balloon=Націсніце на маркер лініі
git.changelists.shelf.congratulations=Віншуем\! Цяпер вы ведаеце, як кіраваць спісамі змяненняў і адкладаць змены.
git.changelists.shelf.create.changelist=Назавіце новы журнал змяненняў {0}. Націсніце {1} або націсніце {2}, каб стварыць новы журнал змяненняў.
git.changelists.shelf.explanation=Акрамя таго, вы можаце выкарыстоўваць функцыю {0}, каб захаваць гэтыя змены ў файл на вашым кампутары. Змены, захаваныя ў {0}, можна пазней прымяніць да любой галіны. Гэта дапаможа пазбегнуць страты гэтых змяненняў.
git.changelists.shelf.help.link=Выкарыстоўвайце Git для працы з некалькімі функцыямі адначасова
git.changelists.shelf.introduction=Дапусцім, вы не хочаце ўносіць некаторыя змены. Напрыклад, некаторыя каментарыі прызначаны толькі для мясцовага выкарыстання. Вы можаце перамясціць каментарый у новы журнал змяненняў, каб ён не быў выпадкова зафіксаваны. Каб адкрыць кантэкстнае меню, пстрыкніце па вылучаным радку.
git.changelists.shelf.lesson.name=Журналы змяненняў і паліца
git.changelists.shelf.open.commit.window=Зараз давайце праверым створаны журнал змяненняў.
git.changelists.shelf.open.context.menu=Адкладзем змены. Пстрыкніце правай кнопкай мышы на вылучаным журнале змяненняў, каб адкрыць кантэкстнае меню.
git.changelists.shelf.open.shelf.dialog=Выберыце {0}, каб адкрыць дыялогавае акно {1}.
git.changelists.shelf.open.unshelve.dialog=Пасля захавання вашых змяненняў у {0} вы можаце ўжыць іх зноў. Выберыце выдзелены спіс змяненняў і націсніце {1}, каб адкрыць дыялогавае акно <strong>Аднавіць з паліцы</strong>.
git.changelists.shelf.performed.explanation=Вы можаце заўважыць, што журнал змяненняў быў паспяхова захаваны ў {0} і каментарый знік.
git.changelists.shelf.performed.got.it=Вы можаце заўважыць, што журнал змяненняў быў паспяхова захаваны ў {0}
git.changelists.shelf.remove.changelist=Гэты журнал змен больш не патрэбны\: націсніце {0}, каб выдаліць яго.
git.changelists.shelf.shelve.changelist=Цяпер вы можаце адрэдагаваць паведамленне або пакінуць яго без зменаў. Націсніце {0}, каб захаваць змены ў {1}.
git.changelists.shelf.unshelve.changelist=Цяпер вы можаце рэдагаваць назву спісу змяненняў для змяненняў, якія аднаўляюцца, або пакінуць яго як ёсць. Націсніце {0}, каб прымяніць змены.
git.click.balloon=Націсніце {0}
git.click.to.change.settings=Або <callback id\="{0}">націсніце</callback>, каб змяніць налады.
git.click.to.open=Націсніце, каб адкрыць {0}
git.commit.amend.commit=Націсніце кнопку {0}, каб адрэдагаваць апошнюю фіксацыю.
git.commit.amend.commit.balloon=Націсніце, каб скончыць рэдагаванне апошняй фіксацыі
git.commit.analyze.code.explanation=Выкарыстоўвайце {0}, каб атрымліваць паведамленні аб папярэджаннях і памылках у файлах, якія будуць зафіксаваны. Для гэтага падручніка вы можаце пакінуць гэты параметр нязменным.
git.commit.choose.files=Акно інструмента {0} дапамагае вам канфігураваць фіксацыі рознымі спосабамі. Дапусцім, вы хочаце ўключыць {1} у фіксацыю. Усталюйце сцяжок, каб уключыць яго.
git.commit.choose.files.balloon=Выберыце вылучаны файл, каб уключыць яго ў фіксацыю
git.commit.close.commit.options=Калі патрэбныя параметры выбраны, зачыніце ўсплывальнае акно параметраў фіксацыі. Націсніце {0}.
git.commit.committed.file.explanation=Правая панэль акна інструмента {0} паказвае файл, зменены ў апошнім фіксацыі.
git.commit.committed.file.got.it=Гэта паказвае файл, зменены ў апошнім фіксацыі
git.commit.enable.reformat.code=Выберыце {0}, каб аўтаматычна выправіць фармат перад прымяненнем фіксацыі.
git.commit.help.link=Зафіксуйце і адпраўце змены ў рэпазітар Git
git.commit.lesson.name=Здзейсніць
git.commit.open.before.commit.options=Цяпер адрэдагуйце параметры фіксацыі. Націсніце {0}, каб адкрыць усплывальнае акно параметраў Git.
git.commit.open.commit.window=Дапусцім, вы змянілі некаторыя файлы ў праекце і жадаеце замацаваць іх у бягучай галінцы.
git.commit.open.git.window=Выдатна\! Пстрыкніце {0} або кнопку {1} на панэлі, каб адкрыць акно інструмента {2} і знайсці свой абавязак у дрэве.
git.commit.open.options.tooltip=Націсніце, каб адкрыць параметры {0}
git.commit.perform.commit=Цяпер адрэдагуйце паведамленне аб фіксацыі або пакіньце яго ў прапанаваным выглядзе. Затым націсніце кнопку {0}, каб прыняць.
git.commit.select.amend.checkbox=Што рабіць, калі вы забыліся дадаць некаторыя змены ў апошнюю зробленую вамі фіксацыю? Найлепшы спосаб - выкарыстоўваць функцыю {0} для рэдагавання апошняй фіксацыі. Націсніце {1} або пастаўце сцяжок {0} у акне інструмента {2}.
git.commit.select.amend.checkbox.balloon=Праверце сцяг {0}, каб пачаць рэдагаванне апошняй фіксацыі
git.commit.select.file=Выберыце вылучаны файл, каб зафіксаваць яго.
git.commit.select.file.balloon=Выберыце файл для фіксацыі
git.commit.select.top.commit=Выберыце верхнюю фіксацыю ў дрэве, каб убачыць падрабязную інфармацыю пра яе.
git.commit.select.top.commit.again=Зноў абярыце верхнюю фіксацыю ў акне інструмента {0}, каб убачыць інфармацыю аб змененай фіксацыі.
git.commit.select.top.commit.again.balloon=Выберыце верхнюю фіксацыю яшчэ раз, каб праглядзець змены
git.commit.select.top.commit.balloon=Выберыце фіксацыю, каб убачыць падрабязную інфармацыю пра яе.
git.commit.two.committed.files.explanation=Цяпер вы бачыце, што мэтавая фіксацыя змяшчае два змененых файла.
git.feature.branch.checkout.and.rebase=Выберыце галінку {0} і абярыце {1}.
git.feature.branch.checkout.branch=Выберыце галінку {0} і абярыце {1} з меню.
git.feature.branch.choose.force.push=Вы не можаце проста націснуць змены, таму што аддаленая галіна {0} канфліктуе з абноўленай лакальнай галіной. Выкарыстоўвайце {1}. Націсніце на вылучаную стрэлку побач з кнопкай {2}, каб адкрыць спіс і выбраць {1}.
git.feature.branch.confirm.force.push=Націсніце {0} яшчэ раз, каб пацвердзіць дзеянне.
git.feature.branch.confirm.update=Націсніце {0}, каб пацвердзіць абнаўленне.
git.feature.branch.force.push.tip=<strong>Парада</strong>\: не выкарыстоўвайце {0}, калі вы не адзіны карыстальнік ланцужка. Гэта можа прывесці да страты абавязацельстваў вашых калег.
git.feature.branch.help.link=Кіраванне галінамі Git
git.feature.branch.introduction.1=Дапусцім, вы скончылі працу над галінкай {0} і перанеслі змены ў аддаленае сховішча для аб'яднання з галінкай {1}. Націсніце {2}, каб адкрыць акно інструмента "{3}" і праглядзець гісторыю праекта.
git.feature.branch.introduction.2=Але пакуль вы працавалі над сваёй функцыянальнасцю, вашы калегі таксама маглі перанесці свае змены ў галіну {0}.
git.feature.branch.introduction.check=Давайце праверым, што магчымыя змены ў {0} не канфліктуюць з вашымі зменамі.
git.feature.branch.introduction.got.it=Гэта новыя абавязацельствы вашай галіны {0}.
git.feature.branch.lesson.name=Рабочы працэс з функцыянальнымі галінамі
git.feature.branch.new.commits.explanation=Вы можаце заўважыць некаторыя змены ў галінцы {0}.
git.feature.branch.new.commits.got.it=У ветцы {0} ёсць новая фіксацыя
git.feature.branch.open.branches.popup.1=Спачатку пераключыцеся на галінку {0}. Націсніце {1} або пстрыкніце па вылучанай вобласці, каб адкрыць {2}.
git.feature.branch.open.branches.popup.2=Такім чынам, вам трэба размясціць свае заўвагі пасля новага здзяйснення з галіны {0}. Вы можаце зрабіць гэта з дапамогай функцыі {1}. Націсніце {2} або пстрыкніце па выдзеленай вобласці, каб зноў адкрыць {3}.
git.feature.branch.open.push.dialog=Калі галіна {0} абнаўляецца, вам таксама трэба абнавіць яе ў аддаленым сховішчы. Націсніце {1}, каб адкрыць дыялогавае акно {2}.
git.feature.branch.open.update.dialog=Цяпер абнавіце галінку {0}, каб даведацца пра магчымыя змены з аддаленага рэпазітара. Націсніце {1}, каб адкрыць дыялогавае акно {2}.
git.interactive.rebase.apply.reword=Па змаўчанні паведамленні ад усіх аб'яднаных фіксацый уключаюцца ў канчатковае паведамленне. Аднак для гэтага падручніка заменіце яго чымсьці накшталт {0}. Пры жаданні адрэдагуйце паведамленне і націсніце {1}, каб прымяніць змены.
git.interactive.rebase.choose.interactive.rebase=Выберыце {0} са спісу.
git.interactive.rebase.click.commit.tooltip=Пстрыкніце правай кнопкай мышы на вылучанай фіксацыі
git.interactive.rebase.congratulations=Віншуем\! Вы ўпарадкавалі гісторыю праекта\!
git.interactive.rebase.help.link=Рэдагаванне гісторыі праекта з дапамогай інтэрактыўнай перабазы
git.interactive.rebase.introduction=Гледзячы на ​​вылучаную паслядоўнасць фіксацый, цяжка зразумець, што змянілася ў цэлым. Было б прасцей, калі б вы маглі змяніць парадак або аб'яднаць некаторыя здзяйсненні.
git.interactive.rebase.invoke.fixup=Націсніце {0} або пстрыкніце па вылучанай кнопцы і абярыце {1} са спісу, каб дадаць змены з гэтай фіксацыі ў верхнюю фіксацыю.
git.interactive.rebase.invoke.squash=Націсніце {0} або кнопку {1}, каб аб'яднаць фіксацыі.
git.interactive.rebase.lesson.name=Інтэрактыўная перабаза
git.interactive.rebase.move.commit=Цяпер перамясціце гэтую фіксацыю ў выдзеленую вобласць. Перацягніце фіксацыю або націсніце {0} тры разы.
git.interactive.rebase.open.context.menu=Для вырашэння гэтай праблемы выкарыстоўвайце <strong>Інтэрактыўнае перабазіраванне</strong>. Пстрыкніце правай кнопкай мышы на вылучаным фіксацыі, каб адкрыць кантэкстнае меню.
git.interactive.rebase.open.git.window=Дапусцім, вы ўнеслі некаторыя змены ў свой праект. Націсніце {0}, каб адкрыць акно інструмента "{1}" і праглядзець гісторыю праекта.
git.interactive.rebase.select.one.commit=Падобна на тое, што вылучанае здзяйсненне выпраўляе нешта ў самым верхнім здзяйсненні ў спісе. Было б выдатна аб'яднаць гэтыя два абавязацельствы ў адно. Выберыце выдзелены фікс.
git.interactive.rebase.select.three.commits=Выдатна\! Падобна на тое, што тры вылучаныя фіксацыі звязаныя паміж сабой. Вы можаце аб'яднаць іх у адно і адрэдагаваць канчатковае паведамленне. Выберыце вылучаныя фіксацыі, націснуўшы на іх, утрымліваючы націснутай клавішу {0}.
git.interactive.rebase.start.rebasing=Нарэшце, націсніце {0}.
git.module.description=Даведайцеся, як выкарыстоўваць інтэграцыю Git у ІАР
git.module.name=Git
git.not.use.staging.area.warning=Каб прайсці гэты падручнік, вы павінны адключыць <strong>прамежкавую вобласць</strong>. Націсніце {0}, перайдзіце да {1} <strong>→</strong>{2} і зніміце сцяжок {3}.
git.open.tool.window=Націсніце {0} або кнопку «{1}» на панэлі, каб адкрыць акно інструмента «{2}».
git.open.tool.window.balloon=Націсніце, каб адкрыць акно інструмента "{0}".
git.project.history.apply.branch.filter=Все ветки вашего репозитория перечислены в левой панели окна инструмента. {0,choice,0\#Нажмите|1\#Дважды нажмите} на ветку <strong>HEAD</strong>, чтобы показать коммиты только из активной ветки.
git.project.history.apply.message.filter=Выдзеленае поле пошуку дапаможа вам знайсці фіксацыі па іх паведамленні або хэшу. Дапусцім, вы хочаце знайсці фіксацыю па частцы яе паведамлення. Напрыклад, увядзіце {0} у вылучанае поле і націсніце {1}.
git.project.history.apply.user.filter=Вы можаце выкарыстоўваць мноства фільтраў для пошуку фіксацый. Напрыклад, вы можаце праглядаць здзяйсненні пэўнага аўтара. Націсніце на вылучаны фільтр, каб адкрыць спіс карыстальнікаў.
git.project.history.click.changed.file=Існуе таксама дрэва з усімі файламі, змененымі ў гэтай фіксацыі. Двойчы пстрыкніце па вылучаным файле, каб праглядзець змены.
git.project.history.click.changed.file.popup=Двойчы пстрыкніце па вылучаным файле, каб праглядзець змены
git.project.history.click.filter.tooltip=Націсніце, каб адкрыць спіс карыстальнікаў
git.project.history.click.head.tooltip={0,choice,0\#Нажмите|1\#Дважды нажмите} на <strong>HEAD</strong>, чтобы показать коммиты только из активной ветки
git.project.history.close.diff=Пасля прагляду змяненняў зачыніце акно параўнання. Націсніце {0}.
git.project.history.commit.details.explanation=Правая панэль акна інструмента паказвае інфармацыю аб абранай фіксацыі: метаданыя і галіны, якія змяшчаюць гэтую фіксацыю.
git.project.history.commit.details.got.it=Гэта адлюстроўвае падрабязныя метададзеныя фіксацыі і галіны, якія змяшчаюць гэтую фіксацыю.
git.project.history.commits.tree.explanation=Дрэва фіксацыі знаходзіцца ў цэнтры акна інструмента. Вы бачыце, што апошняя фіксацыя вашай актыўнай галіны вылучана. Звярніце ўвагу, што ўсе здзяйсненні ніжэй вылучанага таксама належаць да гэтай галіны і вылучаюцца іншым колерам. Астатнія здзяйсненні знаходзяцца ў іншых галінах.
git.project.history.commits.tree.got.it=Гэта апошняя фіксацыя вашай актыўнай галіны
git.project.history.invitation.to.commit.lesson=Выдатна\! Давайце даведаемся, як ствараць фіксацыі ў наступным уроку.
git.project.history.lesson.name=Гісторыя праекта
git.project.history.open.git.window=Націсніце {0} або кнопку «{1}» на панэлі, каб адкрыць акно інструмента «{2}» і праглядзець усе выкананыя здзяйсненні на часовай шкале.
git.project.history.select.commit=Каб атрымаць інфармацыю аб ім, выберыце выдзелены фікс.
git.project.history.select.me=Выберыце {0} са спісу, каб паказаць толькі вашы абавязацельствы.
git.quick.start.choose.new.branch.item=Выберыце {0} са спісу.
git.quick.start.clone.dialog.got.it.1=Вы можаце накіраваць рэпазітар на ўказаны каталог, выкарыстоўваючы URL сховішча
git.quick.start.clone.dialog.got.it.2=Вы таксама можаце ўвайсці непасрэдна ў папулярныя паслугі хостынгу і кланаваць сховішчы адтуль
git.quick.start.close.clone.dialog=Аднак для гэтага падручніка ўжо падрыхтавана тэставае сховішча. Вы можаце закрыць гэта дыялогавае акно.
git.quick.start.commit.window.select.file=Тут вы можаце выбраць файлы для фіксацыі. Пастаўце галачку, каб дадаць файл у фіксацыю.
git.quick.start.find.action=Вы можаце кланаваць існуючы рэпазітар Git з дапамогай дзеяння {0}. Націсніце {1} двойчы, каб адкрыць акно {2}.
git.quick.start.help.link=Наладжванне рэпазітара Git
git.quick.start.introduction=У гэтым уроку вы даведаецеся, як кланаваць існуючы праект і выконваць базавы кантроль версій з дапамогай функцый інтэграцыі Git у ІАР.
git.quick.start.lesson.name=Хуткі старт
git.quick.start.modify.file=У новай галінцы вы можаце змяняць файлы, і ISR будзе адсочваць змены. Напрыклад, давайце зменім колер вачэй кошкі ў адкрытым файле. Замяніце {0} на іншы колер.
git.quick.start.name.new.branch=Увядзіце любую назву для новай галіны, затым націсніце {0} або націсніце {1}.
git.quick.start.open.commit.window=Цяпер вы можаце зафіксаваць зменены файл.
git.quick.start.open.push.dialog=Пасля фіксацыі вы можаце адправіць яго ў аддаленае сховішча. Націсніце {0}, каб адкрыць дыялогавае акно {1}.
git.quick.start.open.vcs.widget=Спачатку націсніце {0} або націсніце на выдзеленую вобласць, каб адкрыць {1}.
git.quick.start.perform.commit=Увядзіце паведамленне аб фіксацыі ў выдзеленай вобласці. Напрыклад, гэта можа быць {0}. Затым націсніце {1}.
git.quick.start.perform.push=Цяпер націсніце {0}. Ваша фіксацыя будзе адпраўлена ў сховішча, створанае на вашым кампутары ў мэтах навучання.
git.quick.start.type.clone=Увядзіце {0} у поле пошуку і абярыце вылучаны варыянт.
git.quick.start.workflow.explanation=Выдатна\! Зараз давайце паглядзім, як выконваць асноўныя аперацыі Git з дапамогай інтэграцыі ІАР. Напрыклад\: <strong>стварыць новую галіну → зрабіць зьмены і прыняць → націснуць</strong>.
git.use.non.modal.commit.ui.warning=Каб выканаць гэты падручнік, вы павінны ўключыць інтэрфейс немадальнай фіксацыі. Націсніце {0}, перайдзіце да {1} <strong>→</strong> {2} і абярыце {3}.
git.window.closed.warning=Націсніце {0}, каб зноў адкрыць акно інструмента "{1}".