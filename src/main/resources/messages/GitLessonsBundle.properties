git.annotate.add.shortcut.tip=<strong>Совет</strong>\: вы можете назначить сочетание клавиш для действия {0}. Нажмите эту ссылку {1} и выберите {2}.
git.annotate.choose.annotate=Выберите опцию {0}, чтобы показать историю этого файла.
git.annotate.choose.show.diff=Выберите опцию {0}, чтобы показать, что изменилось в этом коммите.
git.annotate.click.annotation=Нажмите на подсвеченную аннотацию, чтобы просмотреть информацию об этом коммите.
git.annotate.click.annotation.tooltip=Щёлкните правой кнопкой мыши по аннотации
git.annotate.click.gutter.balloon=Щёлкните правой кнопкой мыши по области
git.annotate.close.all.windows=Теперь закройте {0,choice,0\#все открытые окна|1\#все открытые вкладки редактора}, чтобы вернуться к редактору. Нажмите {1} два раза.
git.annotate.close.annotations=Теперь вы можете закрыть аннотации.
git.annotate.close.by.shortcut=Нажмите {0}.
git.annotate.close.changes=Судя по подсвеченному сообщению коммита, это странное значение {0} не является ошибкой. Итак, после долгого путешествия по истории этого файла вы можете закрыть открытое окно инструмента. Нажмите {1}.
git.annotate.feature.explanation=Действие {0} обеспечивает легкий доступ к последнему коммиту, который изменил любую конкретную строку файла. Вы можете видеть, что {1} - последний, кто изменил эту строку. Щёлкните правой кнопкой мыши по подсвеченной аннотации, чтобы открыть контекстное меню.
git.annotate.found.needed.commit=Отлично\! Мы нашли место, где значение {0} было изменено. Давайте в последний раз проанализуем его, чтобы выяснить причину этого изменения.
git.annotate.go.deeper=Вы можете заметить, что значение {0} появилось до этого коммита. Давайте копнем глубже в историю\!
git.annotate.help.link=Найти автора кода (Аннотации с Git Blame)
git.annotate.introduction=Посмотрите на подсвеченное свойство. Значение свойства подразумевает, что у кошки четыре уха. Причина этого изменения интригует. Мы можем исследовать историю файла с помощью функции {0}.
git.annotate.invoke.manually=Щёлкните правой кнопкой мыши по подсвеченной области и выберите {0} из меню.
git.annotate.invoke.manually.2=Щёлкните правой кнопкой мыши по подсвеченной области и выберите опцию {0} из меню.
git.annotate.invoke.shortcut.1=Нажмите {0}, чтобы показать историю этого файла.
git.annotate.invoke.shortcut.2=Переместите курсор в левый редактор и снова нажмите {0}.
git.annotate.invoke.shortcut.3=Переместите курсор в правый редактор и нажмите {0}.
git.annotate.lesson.name=Аннотации с Git Blame
git.annotate.open.context.menu=Щёлкните правой кнопкой мыши по подсвеченной левой области, чтобы открыть контекстное меню.
git.annotate.show.diff=Щёлкните правой кнопкой мыши по подсвеченной аннотации, чтобы открыть контекстное меню и выбрать {0}.
git.changelists.shelf.choose.new.changelist=Нажмите на подсвеченную иконку и выберите пункт меню {0}.
git.changelists.shelf.click.changelist.tooltip=Щёлкните правой кнопкой мыши по списку изменений {0}
git.changelists.shelf.click.line.marker.balloon=Нажмите на маркер строки
git.changelists.shelf.congratulations=Поздравляем\! Теперь вы знаете, как управлять списками изменений и откладывать изменения.
git.changelists.shelf.create.changelist=Назовите новый список изменений {0}. Нажмите {1} или нажмите {2}, чтобы создать новый список изменений.
git.changelists.shelf.explanation=Кроме того, вы можете использовать функцию {0} для сохранения этих изменений в файл на вашем компьютере. Изменения, сохранённые в {0}, можно применить позже к любой ветке. Это поможет избежать потери этих изменений.
git.changelists.shelf.help.link=Используйте Git для одновременной работы над несколькими функциями
git.changelists.shelf.introduction=Допустим, вы не хотите коммитить некоторые изменения. Например, некоторые комментарии предназначены только для локального использования. Вы можете переместить комментарий в новый список изменений, чтобы он не был случайно закоммичен. Нажмите на подсвеченный маркер строки, чтобы открыть контекстное меню.
git.changelists.shelf.lesson.name=Списки изменений и шельф
git.changelists.shelf.open.commit.window=Теперь давайте проверим созданный список изменений.
git.changelists.shelf.open.context.menu=Давайте отложим изменения. Щёлкните правой кнопкой мыши по подсвеченному списку изменений, чтобы открыть контекстное меню.
git.changelists.shelf.open.shelf.dialog=Выберите {0}, чтобы открыть диалог {1}.
git.changelists.shelf.open.unshelve.dialog=Когда ваши изменения сохранены в {0}, вы можете применить их снова. Выберите подсвеченный список изменений и нажмите {1}, чтобы открыть диалог <strong>Восстановить со стеллажа</strong>.
git.changelists.shelf.performed.explanation=Вы можете заметить, что список изменений успешно сохранён в {0}, а комментарий исчез.
git.changelists.shelf.performed.got.it=Вы можете заметить, что список изменений успешно сохранён в {0}
git.changelists.shelf.remove.changelist=Этот список изменений больше не нужен\: нажмите {0}, чтобы удалить его.
git.changelists.shelf.shelve.changelist=Теперь вы можете отредактировать сообщение или оставить его без изменений. Нажмите {0}, чтобы сохранить изменения в {1}.
git.changelists.shelf.unshelve.changelist=Теперь вы можете отредактировать имя списка изменений для восстанавливаемых изменений или оставить его как есть. Нажмите {0}, чтобы применить изменения.
git.click.balloon=Нажмите {0}
git.click.to.change.settings=Или <callback id\="{0}">нажмите</callback>, чтобы изменить настройки.
git.click.to.open=Нажмите, чтобы открыть {0}
git.commit.amend.commit=Нажмите кнопку {0}, чтобы отредактировать последний коммит.
git.commit.amend.commit.balloon=Нажмите, чтобы завершить редактирование последнего коммита
git.commit.analyze.code.explanation=Используйте {0}, чтобы получать уведомления о предупреждениях и ошибках в файлах, которые будут закоммичены. В этом уроке можно оставить этот параметр без изменений.
git.commit.choose.files=Окно инструмента {0} помогает настраивать коммиты различными способами. Допустим, вы хотите включить {1} в коммит. Установите флажок, чтобы включить его.
git.commit.choose.files.balloon=Выберите подсвеченный файл, чтобы включить его в коммит
git.commit.close.commit.options=Когда нужные параметры выбраны, закройте всплывающее окно параметров коммита. Нажмите {0}.
git.commit.committed.file.explanation=Правая панель окна инструмента {0} показывает файл, измененный в последнем коммите.
git.commit.committed.file.got.it=Здесь отображается файл, измененный в последнем коммите
git.commit.enable.reformat.code=Выберите {0}, чтобы автоматически исправить форматование перед применением коммита.
git.commit.help.link=Коммит и пуш изменений в репозиторий Git
git.commit.lesson.name=Коммит
git.commit.open.before.commit.options=Теперь отредактируйте параметры коммита. Нажмите {0}, чтобы открыть всплывающее окно параметров Git.
git.commit.open.commit.window=Допустим, вы изменили некоторые файлы в проекте и хотите закоммитить их в текущую ветку.
git.commit.open.git.window=Отлично\! Нажмите {0} или кнопку {1} на панели, чтобы открыть окно инструмента {2} и найти ваш коммит в дереве.
git.commit.open.options.tooltip=Нажмите, чтобы открыть параметры {0}
git.commit.perform.commit=Теперь отредактируйте сообщение коммита или оставьте его как предложено. Затем нажмите кнопку {0}, чтобы выполнить коммит.
git.commit.select.amend.checkbox=Что делать, если вы забыли добавить некоторые изменения в последний выполненный коммит? Лучший способ - использовать функцию {0} для редактирования последнего коммита. Нажмите {1} или установите флажок {0} в окне инструмента {2}.
git.commit.select.amend.checkbox.balloon=Установите флажок {0}, чтобы начать редактирование последнего коммита
git.commit.select.file=Выберите подсвеченный файл, чтобы добавить его в коммит.
git.commit.select.file.balloon=Выберите файл, чтобы добавить его в коммит
git.commit.select.top.commit=Выберите верхний коммит в дереве, чтобы увидеть подробную информацию о нем.
git.commit.select.top.commit.again=Снова выберите верхний коммит в окне инструмента {0}, чтобы увидеть информацию об измененном коммите.
git.commit.select.top.commit.again.balloon=Снова выберите верхний коммит, чтобы просмотреть изменения
git.commit.select.top.commit.balloon=Выберите коммит, чтобы увидеть подробную информацию о нем.
git.commit.two.committed.files.explanation=Теперь вы можете видеть, что целевой коммит содержит два измененных файла.
git.feature.branch.checkout.and.rebase=Выберите ветку {0} и выберите {1}.
git.feature.branch.checkout.branch=Выберите ветку {0} и выберите {1} из меню.
git.feature.branch.choose.force.push=Вы не можете просто запушить изменения, так как удалённая ветка {0} конфликтует с обновленной локальной веткой. Используйте {1}. Нажмите подсвеченную стрелку рядом с кнопкой {2}, чтобы открыть список и выбрать {1}.
git.feature.branch.confirm.force.push=Нажмите {0} еще раз для подтверждения действия.
git.feature.branch.confirm.update=Нажмите {0}, чтобы подтвердить обновление.
git.feature.branch.force.push.tip=<strong>Совет</strong>\: не используйте {0}, если вы не единственный пользователь ветки. Это может привести к потере коммитов ваших коллег.
git.feature.branch.help.link=Управление ветками Git
git.feature.branch.introduction.1=Предположим, вы закончили работу в ветке {0} и отправили изменения в удалённый репозиторий для последующего слияния с веткой {1}. Нажмите {2}, чтобы открыть окно инструмента "{3}" и просмотреть историю проекта.
git.feature.branch.introduction.2=Но пока вы работали над своей функциональностью, ваши коллеги также могли отправить свои изменения в ветку {0}.
git.feature.branch.introduction.check=Давайте проверим, что возможные изменения в {0} не конфликтуют с вашими изменениями.
git.feature.branch.introduction.got.it=Это новые коммиты вашей ветки {0}.
git.feature.branch.lesson.name=Рабочий процесс с ветками функциональности
git.feature.branch.new.commits.explanation=Вы можете заметить некоторые изменения в ветке {0}.
git.feature.branch.new.commits.got.it=В ветке {0} есть новый коммит
git.feature.branch.open.branches.popup.1=Сначала переключитесь на ветку {0}. Нажмите {1} или кликните по подсвеченной области, чтобы открыть {2}.
git.feature.branch.open.branches.popup.2=Итак, вам нужно разместить ваши коммиты после нового коммита из ветки {0}. Вы можете сделать это с помощью функции {1}. Нажмите {2} или кликните по подсвеченной области, чтобы снова открыть {3}.
git.feature.branch.open.push.dialog=Когда ветка {0} обновлена, вам также нужно обновить её в удалённом репозитории. Нажмите {1}, чтобы открыть диалог {2}.
git.feature.branch.open.update.dialog=Теперь обновите ветку {0}, чтобы узнать о возможных изменениях из удалённого репозитория. Нажмите {1}, чтобы открыть диалог {2}.
git.interactive.rebase.apply.reword=По умолчанию сообщения всех объединенных коммитов включаются в итоговое сообщение. Однако в этом уроке замените его на что-то вроде {0}. При желании отредактируйте сообщение и нажмите {1}, чтобы применить изменения.
git.interactive.rebase.choose.interactive.rebase=Выберите {0} из списка.
git.interactive.rebase.click.commit.tooltip=Щёлкните правой кнопкой мыши по подсвеченному коммиту
git.interactive.rebase.congratulations=Поздравляем\! Вы привели историю проекта в порядок\!
git.interactive.rebase.help.link=Редактирование истории проекта с помощью интерактивного rebase
git.interactive.rebase.introduction=Глядя на подсвеченную последовательность коммитов, трудно понять, что изменилось в целом. Было бы проще, если бы вы могли переупорядочить или объединить некоторые коммиты.
git.interactive.rebase.invoke.fixup=Нажмите {0} или кликните по подсвеченной кнопке и выберите {1} из списка, чтобы добавить изменения из этого коммита в верхний коммит.
git.interactive.rebase.invoke.squash=Нажмите {0} или кнопку {1}, чтобы объединить коммиты.
git.interactive.rebase.lesson.name=Интерактивный rebase
git.interactive.rebase.move.commit=А теперь переместите этот коммит вверх в подсвеченную область. Перетащите коммит или нажмите {0} три раза.
git.interactive.rebase.open.context.menu=Используйте <strong>Интерактивный rebase</strong> для решения этой задачи. Щёлкните правой кнопкой мыши по подсвеченному коммиту, чтобы открыть контекстное меню.
git.interactive.rebase.open.git.window=Предположим, вы внесли некоторые исправления в ваш проект. Нажмите {0}, чтобы открыть окно инструмента "{1}" и просмотреть историю проекта.
git.interactive.rebase.select.one.commit=Похоже, что подсвеченный коммит исправляет что-то в самом верхнем коммите списка. Было бы здорово объединить эти два коммита в один. Выберите подсвеченный коммит.
git.interactive.rebase.select.three.commits=Отлично\! Похоже, что три подсвеченных коммита связаны между собой. Вы можете объединить их в один и отредактировать итоговое сообщение. Выберите подсвеченные коммиты, кликая по ним с нажатой клавишей {0}.
git.interactive.rebase.start.rebasing=Наконец, нажмите {0}.
git.module.description=Изучите, как использовать интеграцию Git в ИСР
git.module.name=Git
git.not.use.staging.area.warning=Для выполнения этого урока необходимо отключить <strong>область стейджинга</strong>. Нажмите {0}, перейдите в {1} <strong>→</strong> {2} и снимите флажок {3}.
git.open.tool.window=Нажмите {0} или кнопку "{1}" на панели, чтобы открыть окно инструмента "{2}".
git.open.tool.window.balloon=Нажмите, чтобы открыть окно инструмента "{0}"
git.project.history.apply.branch.filter=Все ветки вашего репозитория перечислены в левой панели окна инструмента. {0,choice,0\#Нажмите|1\#Дважды нажмите} на ветку <strong>HEAD</strong>, чтобы показать коммиты только из активной ветки.
git.project.history.apply.message.filter=Подсвеченное поле поиска поможет найти коммиты по их сообщению или хешу. Допустим, вы хотите найти коммит по части его сообщения. Например, введите {0} в подсвеченное поле и нажмите {1}.
git.project.history.apply.user.filter=Вы можете использовать множество фильтров для поиска коммитов. Например, вы можете просмотреть коммиты определённого автора. Нажмите на подсвеченный фильтр, чтобы открыть список пользователей.
git.project.history.click.changed.file=Также есть дерево со всеми файлами, измененными в этом коммите. Дважды кликните по подсвеченному файлу, чтобы просмотреть его изменения.
git.project.history.click.changed.file.popup=Дважды кликните по подсвеченному файлу, чтобы просмотреть его изменения
git.project.history.click.filter.tooltip=Нажмите, чтобы открыть список пользователей
git.project.history.click.head.tooltip={0,choice,0\#Нажмите|1\#Дважды нажмите} на <strong>HEAD</strong>, чтобы показать коммиты только из активной ветки
git.project.history.close.diff=Закройте окно сравнения после просмотра изменений. Нажмите {0}.
git.project.history.commit.details.explanation=Правая панель окна инструмента показывает информацию о выбранном коммите\: метаданные и ветки, содержащие этот коммит.
git.project.history.commit.details.got.it=Здесь отображаются подробные метаданные коммита и ветки, содержащие этот коммит
git.project.history.commits.tree.explanation=Дерево коммитов находится в центре окна инструмента. Вы можете видеть, что последний коммит вашей активной ветки подсвечен. Обратите внимание, что все коммиты ниже подсвеченного также относятся к этой ветке и выделены другим цветом. Остальные коммиты находятся в других ветках.
git.project.history.commits.tree.got.it=Это последний коммит вашей активной ветки
git.project.history.invitation.to.commit.lesson=Отлично\! Давайте узнаем, как создавать коммиты в следующем уроке.
git.project.history.lesson.name=История проекта
git.project.history.open.git.window=Нажмите {0} или кнопку "{1}" на панели, чтобы открыть окно инструмента "{2}" и просмотреть все выполненные коммиты на временной шкале.
git.project.history.select.commit=Выберите подсвеченный коммит, чтобы получить информацию о нем.
git.project.history.select.me=Выберите {0} из списка, чтобы показать только ваши коммиты.
git.quick.start.choose.new.branch.item=Выберите {0} из списка.
git.quick.start.clone.dialog.got.it.1=Вы можете склоновать репозиторий в указанную директорию, используя URL репозитория
git.quick.start.clone.dialog.got.it.2=Также вы можете войти напрямую в популярные хостинг-сервисы и клоновать репозитории оттуда
git.quick.start.close.clone.dialog=Однако для этого урока уже подготовлен тестовый репозиторий. Вы можете закрыть это диалоговое окно.
git.quick.start.commit.window.select.file=Здесь вы можете выбрать файлы для коммита. Отметьте флажок, чтобы добавить файл в коммит.
git.quick.start.find.action=Вы можете клоновать существующий Git-репозиторий с помощью действия {0}. Нажмите {1} дважды, чтобы открыть окно {2}.
git.quick.start.help.link=Настройка Git-репозитория
git.quick.start.introduction=В этом уроке вы научитесь клоновать существующий проект и выполнять базовые операции контроля версий с помощью функций интеграции Git в ИСР.
git.quick.start.lesson.name=Быстрый старт
git.quick.start.modify.file=В новой ветке вы можете изменять файлы, и ИСР будет отслеживать изменения. Например, давайте изменим цвет глаз кота в открытом файле. Замените {0} на другой цвет.
git.quick.start.name.new.branch=Введите любое имя для новой ветки, затем нажмите {0} или кликните {1}.
git.quick.start.open.commit.window=Теперь вы можете закоммитить измененный файл.
git.quick.start.open.push.dialog=После выполнения коммита вы можете запушить его в удалённый репозиторий. Нажмите {0}, чтобы открыть диалог {1}.
git.quick.start.open.vcs.widget=Сначала нажмите {0} или кликните по подсвеченной области, чтобы открыть {1}.
git.quick.start.perform.commit=Введите сообщение коммита в подсвеченной области. Например, это может быть {0}. Затем нажмите {1}.
git.quick.start.perform.push=Теперь нажмите {0}. Ваш коммит будет отправлен в репозиторий, созданный на вашем компьютере для целей обучения.
git.quick.start.type.clone=Введите {0} в поле поиска и выберите подсвеченный вариант.
git.quick.start.workflow.explanation=Отлично\! Теперь давайте рассмотрим, как выполнять базовые Git-операции с помощью интеграции в ИСР. Например\: <strong>создать новую ветку → внести изменения и закоммитить → запушить</strong>.
git.use.non.modal.commit.ui.warning=Для выполнения этого урока необходимо включить немодальный интерфейс коммитов. Нажмите {0}, перейдите в {1} <strong>→</strong> {2} и выберите {3}.
git.window.closed.warning=Нажмите {0}, чтобы снова открыть окно инструмента "{1}".