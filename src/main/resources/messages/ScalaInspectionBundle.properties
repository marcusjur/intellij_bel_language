### META-INF/scala-i18n.xml
internal.string.should.be.in.bundle=문자열이 번들로 추출되어야 합니다
internal.only.pass.hardcoded.strings.as.property.keys=프로퍼티 키로 하드코딩된 문자열만 전달
internal.expression.without.nls.passed.to.nls=@Nls로 전달된 @Nls가 없는 표현식
intention.category.scala.internal=Scala/내부

### META-INF/scala-plugin-common.xml
fileName.does.not.match=클래스가 파일 이름과 대응하지 않습니다
method.signature.accessor.empty.parenthesis=접근자 같은 메서드에 빈 매개변수 절이 있습니다
method.signature.accessor.unit.return.type=접근자 같은 메서드에 Unit 결과 타입이 있습니다
method.signature.unit.parameterless=결과 타입이 Unit인 메서드에 매개변수가 없습니다
method.signature.procedure.declaration=메서드 선언 내 프로시저 구문
method.signature.procedure.definition=메서드 정의 내 프로시저 구문
method.signature.result.type.refinement=결과 타입을 명확하게 개선해야 합니다. 대입이 누락되었나요?
method.signature.parameterless.override.empty.paren=매개변수 없이 재정의된 빈 소괄호 Scala 메서드
method.signature.parameterless.override.java.mutator=매개변수 없이 재정의된 Java 변경자 메서드
method.signature.parameterless.override.mutator.like=변경자 같은 명명된 메서드는 매개변수가 없습니다
method.signature.override.abstract.member=override 키워드 없이 추상 메서드 구현
method.signature.empty.paren.override.java.accessor=빈 인수 절로 재정의된 Java 접근자 메서드
method.signature.empty.paren.override.parameterless=빈 소괄호로 재정의된 매개변수가 없는 Scala 멤버
method.signature.parameterless.access.java.mutator=매개변수 없이 액세스된 Java 변경자 메서드
method.signature.parameterless.access.empty.paren=매개변수 없이 액세스된 빈 소괄호 메서드
method.signature.java.accessor.empty.paren=빈 인수 절로 호출된 Java 접근자 메서드
typed.parameter.without.parenthesis.in.function.literal=함수 리터럴 내 소괄호 없이 타입 지정된 매개변수
unused.expression.name=사용되지 않는 표현식
unreachable.code.name=도달할 수 없는 코드
internal.getText.contains.shouldBe.textContains=.getText.contains는 .textContains여야 합니다
internal.getText.equals.shouldBe.textMatches=.getText.equals는 . textMatches여야 합니다
internal.api.status.of.symbols=심볼의 Api 상태
internal.instanceOf.shouldBe.is=instanceOf는 다음이어야 합니다
displayname.scala=Scala
displayname.loop.variable.not.updated.inside.loop=루프 변수가 루프 내에서 업데이트되지 않음
displayname.package.name.inspection=잘못된 package 문
displayname.scala.deprecation=Scala 지원 중단
displayname.deprecated.identifier=지원 중단되는 식별자
displayname.deprecated.kind.projector.syntax=지원 중단되는 kind-projector 구문
displayname.case.class.parameter=케이스 클래스 매개변수
displayname.var.could.be.a.val=''var''이 ''val''일 수 있습니다
displayname.unused.declaration=사용되지 않는 선언
displayname.access.can.be.weaker=선언 액세스를 제한할 수 있음
displayname.in.kind.projector.use.correct.lambda.keyword=Kind Projector\: 올바른 람다 키워드 사용
displayname.in.kind.projector.simplify.type=Kind Projector\: 타입 단순화
displayname.use.of.postfix.method.call=접미사 메서드 호출 사용
displayname.advanced.language.features=고급 언어 기능
displayname.reference.must.be.prefixed=참조에 접두사가 필요합니다
displayname.floating.point.literal.ending.with.dot=''.''로 끝나는 부동 소수점 리터럴
displayname.chained.package.clause.inspection=기본 패키지 선언
displayname.relative.import=상대적 import 문
displayname.suspicious.shadowing.by.a.variable.pattern=변수 패턴에 의한 의심스러운 가리기
displayname.suspicious.shadowing.by.a.type.parameter=타입 매개변수에 의한 의심스러운 가리기
displayname.abstract.value.in.trait=특성 내 추상 값
displayname.unmatched.tag=일치하지 않는 태그
displayname.unnecessary.braces.in.import.inspection=import 문 검사 내 불필요한 중괄호
displayname.name.boolean.parameters=부울 매개변수 이름 지정
displayname.redundant.cast.inspection=불필요한 형 변환 검사
displayname.redundant.conversion.inspection=불필요한 변환 검사
displayname.missing.type.annotation=타입 어노테이션 누락
displayname.malformed.format.string=형식이 잘못된 서식 문자열
displayname.legacy.string.formatting=기존 문자열 서식 지정
displayname.not.implemented.code=코드를 구현하지 않음
displayname.redundant.block=불필요한 블록
displayname.suspicious.forward.reference=의심스러운 전방 참조
displayname.type.annotation.required=타입 어노테이션 필요
displayname.double.negation=이중 부정
displayname.simplify.boolean.expression=부울 표현식 단순화
displayname.trivial.match.can.be.simplified=자명한 match를 단순화할 수 있음
displayname.unnecessary.parentheses=불필요한 소괄호
displayname.type.check.can.be.pattern.matching=타입 검사가 패턴 매칭이 될 수 있음
displayname.comparing.unrelated.types=관련 없는 타입 비교 중
displayname.isinstanceof=isInstanceOf
displayname.match.statement.convertible.to.pattern.matching.anonymous.function=패턴 매칭 익명 함수로 변환 가능한 match 문
displayname.view.bounds.are.deprecated=뷰 바운드는 지원 중단됨
displayname.convert.expression.to.single.abstract.method=표현식을 단일 추상 메서드(SAM)로 변환
displayname.nested.stateful.monads=중첩 스테이트풀 모나드
displayname.field.from.delayedinit=DelayedInit의 필드
displayname.non.value.field.is.accessed.in.hashcode=값이 아닌 필드가 ''hashCode()''에서 액세스됨
displayname.unnecessary.partial.function=불필요한 부분 함수
displayname.wrong.platform.method.usage=잘못된 플랫폼 메서드 사용 위치
displayname.syntactic.sugar=문법적 설탕
displayname.scala.unnecessary.semicolon.inspection=Scala 불필요한 세미콜론 검사
displayname.redundant.return=불필요한 반환
displayname.nonlocal.return=비 로컬 return 문
displayname.postfix.unary.operation=접미사 단항 연산
displayname.anonymous.function.convertible.to.a.method.value=메서드 값으로 변환 가능한 익명 함수
displayname.applied.type.lambda.can.be.simplified=적용된 람다 타입을 단순화할 수 있음
displayname.redundant.new.on.case.class=케이스 클래스의 불필요한 new
displayname.argument.duplicates.corresponding.parameter.default.value=인수가 해당 매개변수 디폴트 값을 복제
displayname.auto.tupling=자동 튜플화
displayname.null.initializer.can.be.replaced.by.underscore=Null 이니셜라이저를 _로 바꿀 수 있습니다
displayname.scala.style.inspection=Scala 스타일 검사
displayname.simplifiable.empty.check=단순화 가능한 공백 검사
displayname.size.to.length.on.arrays.and.strings=배열 및 문자열에서 size가 length로 변경됨
displayname.equals.on.arrays.and.iterators=배열 및 반복자에서 equals가 사용됨
displayname.sameelements.oncollections.of.a.same.kind=동일한 종류의 SameElements onCollections
displayname.corresponds.sameelements.on.unsorted.collection=정렬되지 않은 컬렉션의 Corresponds/sameElements
displayname.equals.oncollections.of.different.kinds=다른 종류의 컬렉션에 사용된 Equals
displayname.comparing.length.to.lengthcompare=length 비교를 lengthCompare로
displayname.manually.zipping.with.indices=색인을 사용해 수동으로 압축
displayname.access.to.first.element.by.index=색인으로 첫 요소에 액세스
displayname.access.to.last.element.by.index=색인으로 마지막 요소에 액세스
displayname.constructing.range.for.seq.indices=시퀀스 색인 범위 생성 중
displayname.filter.and.headoption.to.find=filter 및 headOption를 find로
displayname.find.and.emptiness.check.to.exists=find 및 공백 검사를 exists로
displayname.filter.and.emptiness.check.to.exists.forall=filter 및 공백 검사를 exists/forall로
displayname.filter.and.size.to.count=filter 및 size를 count로
displayname.find.and.map.to.get=find 및 map을 get으로
displayname.exists.simplifiable.to.contains=contains로 단순화 가능한 exists
displayname.map.and.contains.true.false.to.exists.or.forall=map 및 contains(true/false)를 exists 또는 \!forall로
displayname.filter.and.contains.to.intersect.or.diff=filter 및 contains를 intersect 또는 diff로
displayname.redundant.contains.in.filter=filter 내 불필요한 contains
displayname.double.negation.in.forall.and.exists=forall 및 exists 내 이중 부정
displayname.simplifiable.fold.or.reduce.method=단순화 가능한 fold 또는 reduce 메서드
displayname.fold.simplifiable.to.forall=forall로 단순화 가능한 fold
displayname.reverse.and.iterator.to.reverseiterator=reverse 및 iterator를 reverseIterator로
displayname.reverse.find.to.findLast=reverse 및 find를 findLast로
displayname.conversion.to.set.and.back.to.distinct=Set로 변환하고 distinct로 복원
displayname.drop.and.take.to.slice=drop 및 take를 slice로
displayname.reverse.take.and.reverse.to.takeright=reverse, take 및 reverse를 takeRight으로
displayname.map.and.flatten.to.flatmap=map 및 flatten을 flatMap으로
displayname.emulated.headoption.or.lastoption=에뮬레이션된 headOption 또는 lastOption
displayname.replace.to.with.until=to를 until로 바꾸기
displayname.replace.with.flatten=flatten으로 바꾸기
displayname.sorted.and.head.last.to.max.min=sorted 및 head/last를 max/min로
displayname.collect.and.headoption.to.collectfirst=collect 및 headOption을 collectFirst로
displayname.index.bounds.check=색인 바운드 검사
displayname.make.array.to.string=배열을 문자열로 만들기
displayname.get.and.getorelse.to.getorelse=get 및 getOrElse를 getOrElse로
displayname.extracting.keys.manually=수동으로 키 추출
displayname.extracting.values.manually=수동으로 값 추출
displayname.redundant.get.when.getting.a.value.from.map=map에서 값을 가져올 경우 불필요한 get
displayname.lift.to.get=Lift를 Get으로
displayname.emptiness.check.on.get.to.contains=Get 공백 검사를 Contains로
displayname.redundant.headoption.or.lastoption=불필요한 headOption 또는 lastOption
displayname.equals.some.x.to.contains.x=등호 Some(x)을 contains(x)로
displayname.map.and.getorelse.to.fold=map 및 getOrElse를 fold로
displayname.map.and.getorelse.false.to.exists=map 및 getOrElse(false)를 exists로
displayname.getorelse.null.to.ornull=GetOrElse(null)를 orNull로
displayname.emulated.option.x=모방된 Option(x)
displayname.change.to.filter=filter로 변경
displayname.some.to.option=Some을 Option으로
displayname.filter.after.sort=정렬 후 필터링
displayname.redundant.collection.conversion=불필요한 컬렉션 변환
displayname.side.effects.in.a.monadic.transformation=단항 변환 시 부수 효과
displayname.unit.return.type.in.the.argument.of.map=map 인수 내 Unit 반환 타입
displayname.multiple.arg.lists.in.annotation.constructor=어노테이션 생성자 내 여러 개의 인수 목록
displayname.unzip.for.extracting.a.single.element=단일 요소 추출을 위한 압축 해제
displayname.tag.unclosed=태그가 닫히지 않음
displayname.inlined.tag=인라인화된 태그
displayname.header.tags.unbalanced=짝이 맞이 않는 헤더 태그
displayname.unknown.tag=알 수 없는 태그
displayname.unknown.parameter=알 수 없는 매개변수
displayname.missing.tag.parameter.description=태그 매개변수 설명 누락
displayname.wrong.scaladoc.element=잘못된 scaladoc 요소
displayname.specs2.matchers=Specs2 매처
displayname.source3.scala2.syntax=-X source\:3을 사용한 Scala 2 구문
displayname.dataflow.analysis.constant.conditions=상수 조건
final.modifier.is.redundant.for.toplevel.objects=''final'' 제어자는 최상위 객체와 중복됩니다
mark.inner.case.objects.as.final=내부 case 객체를 final로 표시
group.general=일반
group.internal=내부
group.syntactic.simplification=구문 단순화
group.syntactic.clarification=구문 명확화
group.method.signature=메서드 시그니처
group.code.style=코드 스타일
group.dataflow.analysis=데이터 흐름 분석
group.size=크기
group.comparing=비교
group.indices=색인
group.simplifications.filter.and.exists=단순화\: filter 및 exists
group.simplifications.find.and.map.to.apply=단순화\: find 및 적용할 map
group.simplifications.forall.and.exists=단순화\: forall 및 exists
group.simplifications.other=단순화\: 기타
group.maps=맵
group.options=옵션
group.other=기타
group.collections=컬렉션
group.scaladoc=Scaladoc
group.resource.leaks=리소스 누수
group.specs2=Specs2
displayname.deprecated.package.object=곧 사용할 수 없게 될 패키지 객체
displayname.empty.targetname=비어 있는 @targetName 외부 이름
displayname.multiple.targetname.annotations=여러 개의 @targetName 어노테이션
displayname.multiple.targets.targetname=여러 개의 @targetName 타깃
displayname.no.targetname.annotation.for.operator.like.definition=연산자 이름이 있는 정의에 @targetName 어노테이션이 없음
displayname.member.has.targetname.when.overridden.does.not=멤버에는 @targetName 어노테이션이 있지만 재정의되는 멤버에는 없음
displayname.definition.misses.targetname.annotation=정의에 @targetName 어노테이션이 없음
displayname.definition.and.overridden.member.have.different.targetname.annotations=정의와 재정의되는 멤버에 서로 다른 @targetName 어노테이션이 있음
displayname.alphanumeric.definition.used.as.infix.operator.is.not.declared.infix=infix 연산자로 사용된 영숫자 정의가 ''infix''로 선언되지 않았습니다
display.name.absolute.import=절대 가져오기
grouppath.scala.collections=Scala,컬렉션

### org/jetbrains/plugins/scala/codeInsight/intention/expression/ConvertParameterToUnderscoreIntention.scala
introduce.implicit.incorrect.order=잘못된 매개변수 순서 때문에 묵시적 매개변수 삽입이 허용되지 않습니다
introduce.implicit.incorrect.count=매개변수 사용 위치의 개수가 잘못되어 묵시적 매개변수 삽입이 허용되지 않습니다
introduce.implicit.not.allowed.here=이 표현식에는 묵시적 매개변수 삽입이 허용되지 않습니다

### org/jetbrains/plugins/scala/codeInsight/intention/expression/OptionWithLiteralToSomeIntention.scala
replace.with.some=Some으로 바꾸기
replace.option.with.some=Option을 Some으로 바꾸기

### org/jetbrains/plugins/scala/codeInsight/intention/expression/RemoveUnnecessaryParenthesesIntention.scala
remove.unnecessary.parentheses=불필요한 소괄호 제거

### org/jetbrains/plugins/scala/codeInspection/SAM/ConvertExpressionToSAMInspection.scala
convert.expression.to.sam=표현식을 단일 추상 메서드로 변환

### org/jetbrains/plugins/scala/codeInspection/ScalaFileNameInspection.scala
fileName.rename.text={0} {1}을(를) {2}(으)로
fileName.rename.class=타입 정의 이름 변경
fileName.rename.file=파일 이름 변경

### org/jetbrains/plugins/scala/codeInspection/annotations/MultipleArgLists.scala
implementation.limitation.multiple.argument.lists=구현 제한\: 어노테이션에서 여러 개의 인수 목록은 현재 지원되지 않습니다

### org/jetbrains/plugins/scala/codeInspection/booleans/DoubleNegationInspection.scala
remove.double.negation=이중 부정 제거

### org/jetbrains/plugins/scala/codeInspection/booleans/SimplifyBooleanInspection.scala
simplify.with.text={0} 단순화

### org/jetbrains/plugins/scala/codeInspection/booleans/SimplifyBooleanMatchInspection.scala
simplify.match.to.if.statement=match를 if 문으로 단순화

### org/jetbrains/plugins/scala/codeInspection/caseClassParamInspection/RemoveValQuickFix.scala
remove.unnecessary.val=불필요한 ''val'' 제거
remove.val.from.definition=정의에서 ''val'' 제거

### org/jetbrains/plugins/scala/codeInspection/cast/ScalaRedundantCastInspection.scala
remove.redundant.cast=불필요한 형 변환 제거
casting.left.to.right.is.redundant=''{0}''에서 ''{1}''(으)로의 형 변환은 중복됩니다

### org/jetbrains/plugins/scala/codeInspection/cast/ScalaRedundantConversionInspection.scala
remove.redundant.conversion=불필요한 변환 제거
casting.a.to.b.is.redundant=''{0}''에서 ''{1}''(으)로의 형 변환은 중복됩니다

### org/jetbrains/plugins/scala/codeInspection/catchAll/DangerousCatchAllInspection.scala
catch.all=예외 타입 지정

### org/jetbrains/plugins/scala/codeInspection/collections/CollectHeadOptionInspection.scala
replace.collect.headOption.with.collectFirst=.collect 및 .headOption을 .collectFirst로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/ComparingDiffCollectionKindsInspection.scala
hint.comparing.different.collection.kinds=다른 컬렉션 종류 비교 중
hint.convert.left.hand.side.to.collection=왼쪽을 {0}(으)로 변환
hint.convert.right.hand.side.to.collection=오른쪽을 {0}(으)로 변환

### org/jetbrains/plugins/scala/codeInspection/collections/ComparingLengthInspection.scala
replace.with.lengthCompare=.lengthCompare로 바꾸기
replace.with.sizeIs=.sizeIs로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/CorrespondsUnsortedInspection.scala
sameElements.unsorted=정렬되지 않은 컬렉션에 ''sameElements''를 사용하는 경우 결과를 예측할 수 없습니다
corresponds.unsorted=정렬되지 않은 컬렉션에 ''corresponds''를 사용하는 경우 결과를 예측할 수 없습니다

### org/jetbrains/plugins/scala/codeInspection/collections/DropTakeToSliceInspection.scala
replace.drop.take.with.slice=.drop 및 .take를 .slice로 바꾸기
replace.take.drop.with.slice=.take 및 .drop을 .slice로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/EmptyCheckInspection.scala
replace.with.isEmpty=.isEmpty로 바꾸기
replace.with.isDefined=.isDefined로 바꾸기
replace.with.nonEmpty=.nonEmpty로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/EmulateFlattenInspection.scala
replace.with.flatten=.flatten으로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/EqualityToSameElementsInspection.scala
replace.equals.with.sameElements=equals를 sameElements로 바꾸기
config.description.for.arrays=배열의 경우
config.description.for.iterators=반복자의 경우

### org/jetbrains/plugins/scala/codeInspection/collections/ExistsEqualsInspection.scala
exists.equals.hint=exists를 contains로 바꾸기
forall.notEquals.hint=forall를 not contains로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/ExistsForallReplaceInspection.scala
replace.with.forall=.forall로 바꾸기
replace.with.exists=.exists로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/FilterEmptyCheckInspection.scala
filter.nonempty.check.hint=filter 및 비공백 검사를 exists로 바꾸기
filter.empty.check.hint=filter 및 공백 검사를 \!(...).exists로 바꾸기
filterNot.empty.check.hint=filterNot 및 공백 검사를 forall로 바꾸기
filterNot.nonempty.check.hint=filterNot 및 비공백 검사를 \!(...).forall로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/FilterHeadOptionInspection.scala
filter.headOption.hint=filter 및 headOption을 find로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/FilterOtherContainsInspection.scala
replace.filter.with.intersect=filter 및 contains을 intersect로 바꾸기
replace.filter.with.diff=filter 및 not contains을 diff로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/FilterSetContainsInspection.scala
remove.redundant.contains=불필요한 .contains 제거

### org/jetbrains/plugins/scala/codeInspection/collections/FilterSizeInspection.scala
filter.size.hint=filter 및 size를 count로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/FindAndMapToGetInspection.scala
replace.find.and.map.with.apply=find 및 map을 apply로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/FindEmptyCheckInspection.scala
find.isDefined.hint=find 및 비공백 검사를 exists로 바꾸기
find.isEmpty.hint=find 및 공백 검사를 \!(...).exists로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/FoldTrueAndInspection.scala
fold.true.and.hint=fold를 forall로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/GetGetOrElseInspection.scala
get.getOrElse.hint=getOrElse(key, defaultValue)로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/GetOrElseNullInspection.scala
getOrElse.null.hint=getOrElse(null)를 orNull로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/HeadOrLastOptionInspection.scala
replace.with.headOption=.headOption으로 바꾸기
replace.with.lastOption=.lastOption으로 바꾸기
ifstmt.to.headOption=If-else를 headOption으로
ifstmt.to.lastOption=If-else를 lastOption으로
lift.to.headOption=.lift를 headOption으로
lift.to.lastOption=.lift를 lastOption으로

### org/jetbrains/plugins/scala/codeInspection/collections/IfElseToFilteredOptionInspection.scala
ifstmt.to.filteredOption=if를 filter 적용된 Option으로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/IfElseToOptionInspection.scala
hint.replace.with.option.expr=Option(x)으로 바꾸기
hint.replace.with.option.expr.with.preview=Option({0})으로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/IndexBoundsCheckInspection.scala
ifstmt.to.lift=If-else를 lift로

### org/jetbrains/plugins/scala/codeInspection/collections/LastIndexToLastInspection.scala
replace.with.last=.last로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/MakeArrayToStringInspection.scala
format.with.mkstring=.mkString("Array(", ", ", ")")으로 서식 지정

### org/jetbrains/plugins/scala/codeInspection/collections/MapFlattenInspection.scala
replace.map.flatten.with.flatMap=.map 및 .flatten을 .flatMap으로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/MapGetEmptinessCheckInspection.scala
replace.get.nonEmpty.with.contains=.contains(key)로 바꾸기
replace.get.isEmpty.with.not.contains=\!.contains(key)로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/MapGetGetInspection.scala
get.get.hint=.(key)로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/MapGetOrElseBooleanInspection.scala
map.getOrElse.false.hint=map 및 getOrElse(false)를 exists로 바꾸기
map.getOrElse.true.hint=map 및 getOrElse(true)를 forall로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/MapGetOrElseInspection.scala
map.getOrElse.hint=map 및 getOrElse를 fold로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/MapKeysInspection.scala
replace.with.keys=.keys로 바꾸기
replace.with.keySet=.keySet으로 바꾸기
replace.with.keysIterator=.keysIterator로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/MapLiftInspection.scala
replace.with.get=.get으로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/MapToBooleanContainsInspection.scala
replace.map.contains.true.with.exists=.map(...).contains(true)를 .exists(...)로 바꾸기
replace.map.contains.false.with.not.forall=.map(...).contains(false)를 \! .forall(...)로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/MapValuesInspection.scala
replace.with.values=.values로 바꾸기
replace.with.valuesIterator=.valuesIterator로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/OperationOnCollectionInspectionBase.scala
operation.on.collection.id=OperationsOnCollection
operation.on.collection.name=컬렉션의 단순화 가능한 연산
operation.on.collection.like.option.input.message=검사에서 이러한 클래스는 scala.Option과 같이 처리됩니다
operation.on.collection.like.option.input.title=option과 유사한 클래스 추가
operation.on.collection.like.option.panel.title=option과 유사한 클래스
operation.on.collection.like.collection.input.message=검사에서 이러한 클래스는 컬렉션과 같이 처리됩니다
operation.on.collection.like.collection.input.title=컬렉션과 유사한 클래스 추가
operation.on.collection.like.collection.panel.title=컬렉션과 유사한 클래스

### org/jetbrains/plugins/scala/codeInspection/collections/OptionEqualsSomeToContainsInspection.scala
replace.with.contains=.contains로 바꾸기
replace.with.not.contains=\!.contains로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/RangeToIndicesInspection.scala
hint.replace.with.indices=.indices로 바꾸기
hint.replace.with.indices.with.preview={0}.indices로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/RedundantCollectionConversionInspection.scala
redundant.collection.conversion=불필요한 컬렉션 변환 제거

### org/jetbrains/plugins/scala/codeInspection/collections/RedundantHeadOrLastOptionInspection.scala
remove.redundant.headOption=불필요한 .headOption 제거
remove.redundant.lastOption=불필요한 . lastOption 제거

### org/jetbrains/plugins/scala/codeInspection/collections/ReplaceToWithUntilInspection.scala
replace.to.with.until=''to''를 ''until''로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/ReverseFindInspection.scala
replace.with.findlast=''findLast''로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/ReverseIteratorInspection.scala
replace.reverse.iterator=.reverse.iterator를 .reverseIterator로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/ReverseTakeReverseInspection.scala
replace.reverse.take.reverse.with.takeRight=.reverse.take(...).reverse를 .takeRight(...)로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/SameElementsToEqualsInspection.scala
replace.sameElements.with.equals=sameElements를 equals로 바꾸기
replace.corresponds.with.equals=corresponds를 equals로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/SimplifiableFoldOrReduceInspection.scala
fold.sum.hint=fold를 sum으로 바꾸기
fold.product.hint=fold를 product로 바꾸기
fold.sum.short=fold를 sum으로
fold.product.short=fold를 product로
reduce.sum.hint=reduce를 sum으로 바꾸기
reduce.product.hint=reduce를 product로 바꾸기
reduce.min.hint=reduce를 min으로 바꾸기
reduce.max.hint=reduce를 max로 바꾸기
reduce.sum.short=reduce를 sum으로
reduce.product.short=reduce를 product로
reduce.min.short=reduce를 min으로
reduce.max.short=reduce를 max로

### org/jetbrains/plugins/scala/codeInspection/collections/SizeToLengthInspection.scala
size.to.length=배열 및 문자열의 .size를 .length로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/SomeToOptionInspection.scala
replace.with.option=Option으로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/SortFilterInspection.scala
sort.filter.hint=sort 및 filter의 순서 변경

### org/jetbrains/plugins/scala/codeInspection/collections/SortedMaxMinInspection.scala
replace.sorted.head.with.min=.min으로 바꾸기
replace.sorted.last.with.max=.max로 바꾸기
replace.sortBy.head.with.minBy=.minBy로 바꾸기
replace.sortBy.last.with.maxBy=.maxBy로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/ToSetAndBackInspection.scala
replace.toSet.and.back.with.distinct=Set로의 변환 및 복원을 .distinct로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/UnitInMapInspection.scala
expression.unit.return.in.map=map의 인수 내 Unit 반환 타입을 가진 표현식
use.foreach.instead.of.map=map 대신 foreach 사용

### org/jetbrains/plugins/scala/codeInspection/collections/UnzipSingleElementInspection.scala
replace.with.map=.map으로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/ZeroIndexToHeadInspection.scala
replace.with.head=.head로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/collections/ZipWithIndexInspection.scala
replace.with.zipWithIndex=zipWithIndex로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/controlFlow/NonLocalReturnInspection.scala
nonlocal.return.statement=return 문이 사용되어 익명 함수에서 일찍 빠져나왔습니다
nonlocal.return.check.compiler.option=-Xlint\:nonlocal-return 컴파일러 옵션만 사용
fix.nonlocal.return.check.compiler.option=-Xlint\:nonlocal-return으로만

### org/jetbrains/plugins/scala/codeInspection/controlFlow/ScalaUnreachableCodeInspection.scala
remove.unreachable.code=도달할 수 없는 코드 제거
unwrap.do.statement=do-구문 줄 바꿈 해제

### org/jetbrains/plugins/scala/codeInspection/controlFlow/ScalaUnusedExpressionInspection.scala
unused.expression.throws=사용되지 않는 표현식입니다. 발생 가능한 유일한 부수 효과는 예외입니다
unused.expression.no.side.effects=사용되지 않는 부수 효과 없는 표현식
add.return.keyword=반환 키워드 추가

### org/jetbrains/plugins/scala/codeInspection/declarationRedundancy/AddScalaAnnotationUnusedQuickFix.scala
annotate.declaration.with.unused=선언에 @unused로 어노테이션 추가

### org/jetbrains/plugins/scala/codeInspection/declarationRedundancy/DeleteUnusedElementFix.scala
remove.unused.element=사용하지 않는 요소 제거
remove.whole.definition=전체 정의 제거
remove.only.name.binding={0} 바인딩만 제거

### org/jetbrains/plugins/scala/codeInspection/declarationRedundancy/ScalaAccessCanBeTightenedInspection.scala
make.private=''private''으로 만들기
access.can.be.private=액세스는 private일 수 있습니다
change.modifier=제어자 변경

### org/jetbrains/plugins/scala/codeInspection/declarationRedundancy/ScalaOptimizeImportsFix.scala
mark.import.as.always.used.in.this.project=import 문을 이 프로젝트에서 항상 사용으로 표시

### org/jetbrains/plugins/scala/codeInspection/declarationRedundancy/ScalaUnusedDeclarationInspection.scala
fix.unused.declaration.report.public.declarations=사용되지 않는 public 선언에 대한 보고 비활성화
name.unused.declaration.report.public.declarations=public 선언 보고
name.unused.declaration.report.local.declarations=지역 선언을 보고
declaration.is.never.used=선언이 한 번도 사용되지 않습니다
enable.in.scala.3=Scala 3에서 활성화

### org/jetbrains/plugins/scala/codeInspection/declarationRedundancy/ScalaUnusedImportPassBase.scala
unused.import.statement=사용되지 않는 import 문

### org/jetbrains/plugins/scala/codeInspection/delayedInit/FieldFromDelayedInitInspection.scala
field.defined.in.delayedinit.is.likely.to.be.null=DelayedInit에 정의된 필드가 null일 수 있습니다

### org/jetbrains/plugins/scala/codeInspection/deprecation/Scala3DeprecatedAlphanumericInfixCallInspection.scala
scala3.alphanumeric.definition.is.not.declared.infix=영숫자 정의 {0}이(가) ''infix''로 선언되지 않았습니다. 중위 연산자로 사용하면 안 됩니다.

### org/jetbrains/plugins/scala/codeInspection/deprecation/Scala3DeprecatedPackageObjectInspection.scala
package.objects.are.deprecated=패키지 객체는 Scala 3에서 더 이상 사용되지 않습니다. 대신 최상위 수준의 정의를 사용해보세요
unwrap.package.object.fix=멤버를 최상위 수준으로 이동

### org/jetbrains/plugins/scala/codeInspection/deprecation/ScalaDeprecatedIdentifierInspection.scala
usage.of.deprecatedname.as.identifier.is.deprecated={0}을(를) 식별자로 사용하는 것은 지원 중단됩니다. 향후 Scala 버전에서는 키워드로 사용할 수 있습니다.

### org/jetbrains/plugins/scala/codeInspection/deprecation/ScalaDeprecationInspection.scala
parameter.name.is.deprecated=매개변수 이름\: {0}은(는) 지원 중단됩니다.
symbol.name.is.deprecated.with.message=심볼 {0}은(는) 지원 중단됩니다. {1}
super.method.name.is.deprecated.with.message=상위 메서드 {0}은(는) 지원 중단됩니다. {1}
overriding.is.deprecated={0} 재정의는 지원 중단됩니다. {1}
inheriting.form.name.is.deprecated.message={0} 상속은 지원 중단됩니다. {1}

### org/jetbrains/plugins/scala/codeInspection/feature/LanguageFeatureInspection.scala
advanced.language.feature=고급 언어 기능\: {0}
import.feature.flag.for.language.feature={0}의 기능 플래그 가져오기
language.feature.postfix.operator.notation=접미사 연산자 표기법
language.feature.reflective.call=리플렉티브 호출
language.feature.dynamic.member.selection=동적 멤버 선택
language.feature.implicit.conversion=묵시적 변환
language.feature.higher.kinded.type=상위 타입
language.feature.existential.type=존재 타입
language.feature.macro.definition=매크로 정의

### org/jetbrains/plugins/scala/codeInspection/format/LegacyStringFormattingInspection.scala
legacy.string.formatting.use.interpolated.string=예전 문자열 서식입니다. 보간된 문자열을 대신 사용할 수 있습니다
convert.to.interpolated.string=보간된 문자열로 변환

### org/jetbrains/plugins/scala/codeInspection/format/ScalaMalformedFormatStringInspection.scala
format.specifier.cannot.be.used.for.an.argument=서식 지정자 {0}에 인수 {1}({2})을(를) 사용할 수 없습니다
argument.cannot.be.used.for.a.format.specifier=서식 지정자 {2}에 인수 {0}({1})을(를) 사용할 수 없습니다
malformed.format.specifier=형식이 잘못된 서식 지정자
no.argument.for.a.format.specifier=서식 지정자 {0}에 인수가 없습니다
no.argument.at.position=위치 {0}에 인수가 없습니다
no.format.specifier.for.an.argument=인수 {0}에 서식 지정자가 없습니다

### org/jetbrains/plugins/scala/codeInspection/functionExpressions/MatchToPartialFunctionInspection.scala
convert.match.statement.to.pattern.matching.function=match 문을 패턴 매칭 익명 함수로 변환

### org/jetbrains/plugins/scala/codeInspection/functionExpressions/UnnecessaryPartialFunctionQuickFix.scala
convert.to.anonymous.function=익명 함수로 변환

### org/jetbrains/plugins/scala/codeInspection/implicits/DeprecatedViewBoundInspection.scala
replace.with.implicit.parameters=묵시적 매개변수로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/imports/SingleImportInspection.scala
single.import=하나의 가져오기만 포함하는 import 문에서 중괄호 제거

### org/jetbrains/plugins/scala/codeInspection/internal/ApiStatusInspection.scala
super.method.name.is.marked.as.status=상위 메서드 {0}이(가) {1}(으)로 표시되어 있습니다
symbol.name.is.marked.as.status=심볼 {0}이(가) {1}(으)로 표시되어 있습니다

### org/jetbrains/plugins/scala/codeInspection/internal/InstanceOfInspection.scala
replace.with.is=.is로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/internal/ScalaShouldBeTextContainsInspection.scala
internal.replace.with.textContains=.textContains로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/internal/ScalaShouldBeTextMatchesInspection.scala
internal.replace.with.textMatches=.textMatches로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/literal/FloatLiteralEndingWithDecimalPointInspection.scala
convert.to.floating.point={0}(으)로 변환

### org/jetbrains/plugins/scala/codeInspection/methodSignature/ApparentResultTypeRefinementInspection.scala
insert.missing.assignment=누락된 대입 삽입

### org/jetbrains/plugins/scala/codeInspection/methodSignature/JavaAccessorEmptyParenCallInspection.scala
remove.call.parentheses=호출 소괄호 제거

### org/jetbrains/plugins/scala/codeInspection/methodSignature/OverrideAbstractMemberInspection.scala
add.override.modifier.quickfix=재정의 제어자 추가

### org/jetbrains/plugins/scala/codeInspection/methodSignature/ParameterlessAccessInspection.scala
add.call.parentheses=호출 소괄호 추가

### org/jetbrains/plugins/scala/codeInspection/methodSignature/UnitMethodInspection.scala
convert.to.function.syntax=함수 구문으로 변환

### org/jetbrains/plugins/scala/codeInspection/methodSignature/quickfix/AddEmptyParentheses.scala
empty.parentheses=빈 소괄호 추가

### org/jetbrains/plugins/scala/codeInspection/methodSignature/quickfix/RemoveParentheses.scala
redundant.parentheses=불필요한 소괄호 제거

### org/jetbrains/plugins/scala/codeInspection/modifiers/SetModifierQuickfix.scala
add.modifier=''{0}'' 제어자 추가
remove.modifier=''{0}'' 제어자 제거

### org/jetbrains/plugins/scala/codeInspection/notImplementedCode/NotImplementedCodeInspection.scala
not.implemented=구현되지 않음
implement.quickfix.name=구현

### org/jetbrains/plugins/scala/codeInspection/packageNameInspection/ChainedPackageInspection.scala
package.declaration.could.use.chained.package.clauses=기본 패키지 ''{0}''은(는) 별도의 패키지 절이어야 합니다
use.chained.package.clauses.like=패키지 절 추출
use.chained.package.clauses=별도의 기본 패키지 절 사용

### org/jetbrains/plugins/scala/codeInspection/packageNameInspection/ScalaMoveToPackageQuickFix.scala
fimaly.name.move.file.to.package=패키지로 이동
move.file.to.default.package=디폴트 패키지로 이동
move.file.to.package.with.packagename=패키지 {0}(으)로 이동
move.file.to.package.package.prefix.error=소스 폴더 ''{1}''에서 패키지 접두사가 ''{2}''인 패키지 ''{0}''을(를) 생성할 수 없습니다

### org/jetbrains/plugins/scala/codeInspection/packageNameInspection/ScalaPackageNameInspection.scala
package.names.does.not.correspond.to.directory.structure=패키지 이름 ''{0}''이(가) 파일 경로 ''{1}''에 해당하지 않습니다
package.names.does.not.correspond.to.directory.structure.package.prefix=소스 폴더 ''{0}''에는 패키지 접두사 ''{1}''이(가) 있습니다

### org/jetbrains/plugins/scala/codeInspection/packageNameInspection/ScalaRenamePackageQuickFix.scala
rename.package.quickfix.command.name=패키지 이름 변경
family.name.rename.package=패키지 이름 변경
remove.package.statement=패키지 구문 제거
rename.package.to=패키지 이름을 ''{0}''(으)로 설정

### org/jetbrains/plugins/scala/codeInspection/parameters/NameBooleanParametersInspection.java
name.boolean.ignore.single.parameter.methods=매개변수가 하나인 메서드 무시

### org/jetbrains/plugins/scala/codeInspection/parameters/RedundantDefaultArgumentInspection.scala
delete.redundant.default.argument=불필요한 디폴트 인수 삭제

### org/jetbrains/plugins/scala/codeInspection/parameters/TypedParameterWithoutParenthesisInspection.scala
surround.with.parenthesis=소괄호로 둘러싸기

### org/jetbrains/plugins/scala/codeInspection/parentheses/ScalaUnnecessaryParenthesesInspection.java
clarifying.parentheses=명확히 구분 짓는 소괄호
around.function.type=함수 타입 주위
around.function.type.parameter=함수 타입의 매개변수 주위
around.function.expr.parameter=함수 표현식의 매개변수 주위
unnecessary.parentheses.ignore=무시

### org/jetbrains/plugins/scala/codeInspection/parentheses/ScalaUnnecessaryParenthesesInspectionBase.scala
remove.unnecessary.parentheses.with.text=불필요한 소괄호 {0} 제거

### org/jetbrains/plugins/scala/codeInspection/postfix/PostfixMethodCallInspection.scala
add.dot.to.method.call=메서드 호출에 마침표 추가

### org/jetbrains/plugins/scala/codeInspection/prefixMutableCollections/ReferenceMustBePrefixedInspection.scala
add.prefix.to.reference=참조에 접두사 추가

### org/jetbrains/plugins/scala/codeInspection/quickfix/ConvertFromInfixExpressionQuickFix.scala
convert.from.infix.expression=중위 표기식에서 변환

### org/jetbrains/plugins/scala/codeInspection/quickfix/ConvertFromInfixPatternQuickFix.scala
convert.from.infix.pattern=중위 패턴에서 변환

### org/jetbrains/plugins/scala/codeInspection/quickfix/ConvertFromInfixTypeQuickFix.scala
convert.from.infix.type=중위 타입에서 변환

### org/jetbrains/plugins/scala/codeInspection/quickfix/RemoveExpressionQuickFix.scala
remove.expression=표현식 제거

### org/jetbrains/plugins/scala/codeInspection/quickfix/WrapInBackticksQuickFix.scala
wrap.in.backticks=백틱으로 래핑

### org/jetbrains/plugins/scala/codeInspection/redundantBlock/RedundantBlockInspection.scala
remove.redundant.braces=불필요한 중괄호 제거
unwrap.the.expression=표현식 래핑 해제
the.enclosing.block.is.redundant=둘러싸는 블록이 불필요합니다
redundant.braces.in.case.clause=case 절의 불필요한 중괄호

### org/jetbrains/plugins/scala/codeInspection/relativeImports/AbsoluteImportInspection.scala
absolute.import.detected=import 문은 베이스 패키지에 상대적일 수 있습니다

### org/jetbrains/plugins/scala/codeInspection/relativeImports/RelativeImportInspection.scala
relative.import.detected=상대 가져오기 탐지됨
family.name.enable.full.qualified.imports=정규화된 import 문 활성화

### org/jetbrains/plugins/scala/codeInspection/resourceLeaks/SourceNotClosedInspection.scala
source.not.closed=소스가 닫히지 않습니다

### org/jetbrains/plugins/scala/codeInspection/scaladoc/ScalaDocInlinedTagInspection.scala
display.name.inlined.tag=인라인화된 태그

### org/jetbrains/plugins/scala/codeInspection/scaladoc/ScalaDocMissingParameterDescriptionInspection.scala
display.name.missing.parameter.description=매개변수 설명 누락

### org/jetbrains/plugins/scala/codeInspection/scaladoc/ScalaDocUnbalancedHeaderInspection.scala
all.text.from.header.closing.tag.to.end.of.line.will.be.lost=헤더 닫기 태그에서부터 줄 끝까지의 모든 텍스트가 손실됩니다

### org/jetbrains/plugins/scala/codeInspection/scaladoc/ScalaDocUnclosedTagWithoutParserInspection.scala
display.name.unclosed.tag=닫히지 않은 태그

### org/jetbrains/plugins/scala/codeInspection/scaladoc/ScalaDocUnknownParameterInspection.scala
inspection.scaladoc.problem.duplicate.param=매개변수 ''{0}''에 대한 @param 태그 중복
inspection.scaladoc.problem.duplicate.tparam=타입 매개변수 ''{0}''의 @tparam 태그 중복
inspection.scaladoc.problem.param.not.allowed=@param 태그는 여기서 허용되지 않습니다
inspection.scaladoc.problem.tparam.not.allowed=@tparam 태그는 여기서 허용되지 않습니다
inspection.scaladoc.problem.tparam.not.supported.by.scaladoc.in.type.alias=현재 Scaladoc이 타입 별칭의 tparam을 처리할 수 없습니다

### org/jetbrains/plugins/scala/codeInspection/scaladoc/ScalaDocUnknownTagInspection.scala
missing.tag.parameter=태그 매개변수 누락
unknown.scaladoc.tag=알 수 없는 scaladoc 태그

### org/jetbrains/plugins/scala/codeInspection/scaladoc/package.scala
family.name.scala.scaladoc=Scala\: Scaladoc

### org/jetbrains/plugins/scala/codeInspection/shadow/PrivateShadowInspection.scala
private.shadow.description=클래스 매개변수가 상위 클래스 var을 가립니다
private.shadow.rename.identifier=이름 변경
private.shadow.compiler.option.label=-Xlint\:private-shadow 컴파일러 옵션만 사용
private.shadow.fatal.warnings.label=<html><code>-Xfatal-warnings</code>(<code>-Werror</code>) 컴파일러 옵션 오류</html>
fix.private.shadow.compiler.option.label=-Xlint\:private-shadow로만 표시
fix.private.shadow.fatal.warnings.label=-Xlint\:fatal-warnings가 있을 오류로 표시

### org/jetbrains/plugins/scala/codeInspection/shadow/VariablePatternShadowInspection.scala
rename.variable.pattern=변수 패턴 이름 변경
convert.to.stable.identifier.pattern=식별자 패턴 ''{0}''(으)로 변환

### org/jetbrains/plugins/scala/codeInspection/source3/Source3Inspection.scala
replace.with.questionmark=?로 바꾸기
add.case=''case'' 추가
replace.with.star=*로 바꾸기
replace.with.as=''as''로 바꾸기
replace.with.name.followed.by.star=''{0}*''로 바꾸기
replace.with.and.char=\\&로 바꾸기
suggest.converting.wildcards=<html>와일드카드 변환 제안(<code>Seq[_]</code> \\&rarr; <code>Seq[?]</code>)</html>
suggest.adding.case.in.for.comprehensions=<html><code>for</code> 컴프리헨션에 <code>case</code>를 추가할 것을 제안합니다</html>
suggest.using.star.instead.of.underscore=<html>import 문 내 <code>_</code> 대신 <code>*</code>를 사용할 것을 제안합니다</html>
suggest.using.as.instead.of.arrow=<html>import 문 내 <code>\=\\&gt;</code> 대신 <code>as</code>를 사용할 것을 제안합니다</html>
suggest.converting.vararg.splices=<html>vararg 스플라이스를 변환할 것을 제안합니다(<code>seq\: _*</code> \\&rarr; <code>seq*</code>)</html>
suggest.converting.named.wildcard.patterns=<html>명명된 와일드카드 패턴을 변환할 것을 제안합니다(<code>seq@_*</code> \\&rarr; <code>seq*</code>)</html>
suggest.using.and.instead.of.with=<html>복합 타입 내 <code>with</code> 대신 <code>\\&</code>를 사용할 것을 제안합니다</html>

### org/jetbrains/plugins/scala/codeInspection/specs2/BuiltinMatcherExistsInspection.scala
specs2.builtin.matcher.alternative.exists=사용 가능한 매처가 있습니다
specs2.use.builtin.matcher=기본 제공 매처로 바꾸기

### org/jetbrains/plugins/scala/codeInspection/suppression/ScalaSuppressForStatementFix.scala
suppress.inspection.function=함수에 대해 억제
suppress.inspection.typeAlias=타입 별칭에 대해 억제
suppress.inspection.variable=변수 정의에 대해 억제

### org/jetbrains/plugins/scala/codeInspection/syntacticClarification/AutoTuplingInspection.scala
scala.compiler.will.replace.this.argument.list.with.tuple=Scala 컴파일러가 이 인수 목록을 튜플로 바꿉니다
make.tuple.explicit=튜플을 명시적으로 만들기

### org/jetbrains/plugins/scala/codeInspection/syntacticClarification/VariableNullInitializerInspection.scala
use.option.type=Option 타입 사용
use.underscore.initializer=_ 이니셜라이저 사용
variable.with.null.initializer=null 이니셜라이저가 있는 변수

### org/jetbrains/plugins/scala/codeInspection/syntacticSimplification/ConvertibleToMethodValueInspection.scala
convertible.to.method.value.anonymous.hint=메서드 값으로 변환
convertible.to.method.value.eta.hint=불필요한 자리표시자 제거

### org/jetbrains/plugins/scala/codeInspection/syntacticSimplification/FunctionTupleSyntacticSugarInspection.scala
syntactic.sugar.could.be.used=문법적 설탕을 사용할 수 있습니다

### org/jetbrains/plugins/scala/codeInspection/syntacticSimplification/PostfixUnaryOperationInspection.scala
unary.operation.can.use.prefix.notation=단항 연산자의 접두사 표기 사용

### org/jetbrains/plugins/scala/codeInspection/syntacticSimplification/RemoveRedundantReturnInspection.scala
return.keyword.is.redundant=키워드 반환이 불필요합니다

### org/jetbrains/plugins/scala/codeInspection/syntacticSimplification/ScalaUnnecessarySemicolonInspection.scala
remove.unnecessary.semicolon=불필요한 세미콜론 제거
unnecessary.semicolon=불필요한 세미콜론

### org/jetbrains/plugins/scala/codeInspection/targetNameAnnotation/EmptyTargetNameInspection.scala
targetname.cannot.be.empty=@targetName의 외부 이름은 비어 있어서는 안 됩니다

### org/jetbrains/plugins/scala/codeInspection/targetNameAnnotation/MultipleTargetNameAnnotationsInspection.scala
all.but.last.targetname.annotation.ignored=마지막 @targetName 어노테이션만 무시됩니다. 정의당 하나의 @targetName 어노테이션만 사용하는 것을 고려해 보세요

### org/jetbrains/plugins/scala/codeInspection/targetNameAnnotation/MultipleTargetsTargetNameInspection.scala
targetname.multiple.targets=@targetName 어노테이션에 여러 개의 타깃이 있습니다

### org/jetbrains/plugins/scala/codeInspection/targetNameAnnotation/NoTargetNameAnnotationForOperatorLikeDefinitionInspection.scala
definition.with.operator.name.should.have.targetname.annotation=정의에 연산자 이름이 있으므로 @targetName 어노테이션도 있어야 합니다

### org/jetbrains/plugins/scala/codeInspection/targetNameAnnotation/OverridingTargetNameInspection.scala
override.definition.should.not.have.targetname.annotation=@targetName 어노테이션이 재정의되는 멤버에 없기 때문에 정의에도 없어야 합니다
override.definition.misses.targetname.annotation=정의에 타깃 이름 어노테이션 @targetName(''{0}'')이 없습니다
override.definition.has.different.target.name=정의에 다른 타깃 이름 어노테이션이 있으므로 @targetName("{0}")이 필요합니다
fix.targetname.annotation=@targetName 어노테이션 수정

### org/jetbrains/plugins/scala/codeInspection/targetNameAnnotation/package.scala
add.targetname.annotation=@targetName 어노테이션 추가

### org/jetbrains/plugins/scala/codeInspection/typeAnnotation/AddTypeAnnotationQuickFix.scala
add.type.annotation=타입 어노테이션 추가

### org/jetbrains/plugins/scala/codeInspection/typeAnnotation/TypeAnnotationInspection.scala
quickfix.modify.code.style=코드 스타일 수정...
type.annotation.required.for={0}에 타입 어노테이션 필요

### org/jetbrains/plugins/scala/codeInspection/typeChecking/ComparingUnrelatedTypesInspection.scala
comparing.unrelated.types.hint=관련 없는 타입 비교 중\: {0} 및 {1}

### org/jetbrains/plugins/scala/codeInspection/typeChecking/IsInstanceOfInspection.scala
missing.explicit.type.in.isinstanceof.call=isInstanceOf가 명시적 타입 없이 호출되었습니다. 동작이 타입 경계를 충족하는 타입을 삽입하는 컴파일러에 의존하기 때문에 컴파일러 버전에 따라 달라집니다.

### org/jetbrains/plugins/scala/codeInspection/typeChecking/TypeCheckCanBeMatchInspection.scala
type.check.can.be.replaced.by.pattern.matching=타입 검사를 패턴 일치로 바꿀 수 있습니다

### org/jetbrains/plugins/scala/codeInspection/ui/CompilerInspectionOptions.scala
inspection.option.enabled=활성화됨
inspection.option.check.compiler={0}에 의해 활성화됨
inspection.option.check.compiler.unnamed=컴파일러 옵션에서 사용
inspection.option.disabled=비활성화됨

### org/jetbrains/plugins/scala/codeInspection/valInTraitInspection/AbstractValueInTraitInspection.scala
abstract.value.used.in.trait=특성에 사용된 추상 값
abstract.variable.used.in.trait=특성에 사용된 추상 변수

### org/jetbrains/plugins/scala/codeInspection/varCouldBeValInspection/ValToVarQuickFix.scala
convert.val.to.var=''val''을 ''var''로 변환

### org/jetbrains/plugins/scala/codeInspection/varCouldBeValInspection/VarCouldBeValInspection.scala
var.could.be.a.val=var이 val일 수 있습니다
convert.var.to.val=''var''을 ''val''로 변환

### org/jetbrains/plugins/scala/codeInspection/xml/package.scala
family.name.scala.general=Scala\: 일반

### org/jetbrains/plugins/scala/externalLibraries/kindProjector/inspections/AppliedTypeLambdaCanBeSimplifiedInspection.scala
applied.type.lambda.can.be.simplified=적용된 람다 타입을 단순화할 수 있습니다
simplify.type=타입 단순화

### org/jetbrains/plugins/scala/externalLibraries/kindProjector/inspections/DeprecatedKindProjectorSyntaxInspection.scala
replace.with.star.syntax=''*'' 구문으로 바꾸기
kind.projector.deprecated.tip=''?'' 자리표시자는 더 이상 사용되지 않습니다. 대신 ''*''를 사용해 주세요.
kind.projector.deprecated.tip.with.update=''?'' 자리표시자는 더 이상 사용되지 않습니다. 대신 kind-projector 플러그인을 업데이트한 후 ''*''를 사용해 주세요.

### org/jetbrains/plugins/scala/externalLibraries/kindProjector/inspections/KindProjectorUseCorrectLambdaKeywordInspection.scala
kind.projector.replace.lambda.with.lambda.char=Kind Projector\: 람다를 λ로 바꾸기
kind.projector.replace.lambda.char.with.lambda=Kind Projector\: λ를 람다로 바꾸기
kind.projector.code.style.setting.use.lambda.char=Kind Projector\: 코드 스타일 설정 변경\: 람다 대신 λ 사용
kind.projector.code.style.setting.use.lambda.word=Kind Projector\: 코드 스타일 설정 변경\: λ 대신 람다 사용

### org/jetbrains/plugins/scala/lang/dfa/utils/ScalaDfaTypeUtils.scala
invocation.index.out.of.bounds=호출이 IndexOutOfBoundsException을 생성합니다. 색인이 항상 범위를 벗어납니다
invocation.no.such.element=호출이 NoSuchElementException을 생성합니다. 컬렉션이 항상 비어 있습니다
condition.always.true=조건이 항상 true입니다
condition.always.false=조건이 항상 false입니다
expression.always.zero=표현식이 항상 0으로 평가됩니다
expression.always.null=표현식이 항상 null로 평가됩니다
