basic.completion.activate.explicitly=Чтобы явно активировать базовое автодополнение, нажмите {0}.
basic.completion.finish.explicit.completion=Выберите {0} и нажмите {1}.
basic.completion.help.code.completion=Базовое автодополнение
basic.completion.just.press.to.complete=Теперь просто нажмите {0}, чтобы завершить это выражение.
basic.completion.lesson.name=Базовое автодополнение
basic.completion.start.typing=По умолчанию <ide/> мгновенно предлагает варианты автодополнения для вашего кода. Начните вводить {0} прямо там, где находится курсор, и вы увидите список автодополнения с подходящими предложениями.
code.assistance.module.description=Узнайте, как форматовать код, получать информацию о параметрах и просматривать быстрые всплывающие окна.
code.assistance.module.name=Помощь при написании кода
code.completion.module.description=Позвольте ИСР дополнять ваш код. Попробуйте базовое, умное и другие типы автодополнения.
code.completion.module.name=Автодополнение кода
code.format.help.link=Настройка стиля кода
code.format.lesson.name=Форматование кода
code.format.optimize.imports=Здесь вы можете настроить параметры форматования. Например, включите {0} и нажмите "{1}".
code.format.reformat.file=Чтобы переформатовать весь файл, когда не выделено ни одной строки, используйте {0}.
code.format.reformat.selection=<ide/> может помочь исправить форматование кода одним действием. Нажмите {0}, чтобы переформатовать выделенный фрагмент кода.
code.format.show.reformat.file.dialog=Используйте {0}, чтобы показать настройки форматования.
collapse.all.collapse=Если вы хотите свернуть все области в файле, нажмите {0}.
collapse.all.expand=Аналогично, нажмите {0}, чтобы развернуть все доступные области.
collapse.help.link=Развернуть или свернуть элементы кода
collapse.hit.expand=Чтобы развернуть область кода, нажмите {0}.
collapse.lesson.name=Сворачивание
collapse.try.collapse=Иногда нужно свернуть фрагмент кода для лучшей читаемости. Попробуйте свернуть фрагмент кода с помощью {0}.
comment.block.comment=Чтобы закомментировать блок комментарием {0}, выделите блок кода и нажмите {1}.
comment.block.lesson.name=Комментирование строк и блоков кода
comment.block.uncomment=Чтобы раскомментировать блочный комментарий, установите курсор в любое место закомментированного блока и нажмите {0}.
comment.line.comment.any.line=Закомментируйте любую строку с помощью {0}.
comment.line.comment.several.lines=Выделите несколько строк и закомментируйте их с помощью {0}.
comment.line.lesson.name=Комментирование строки
comment.line.uncomment.several.lines=Чтобы раскомментировать несколько строк, выделите все закомментированные строки и нажмите {0}.
comment.line.uncomment.that.line=Раскомментируйте закомментированную строку тем же сочетанием клавиш\: установите курсор в любое место этой строки и нажмите {0}.
completion.with.tab.begin.completion=Нажмите {0}, чтобы увидеть предложения автодополнения. Если вы не видите {1} в списке предложений, начните вводить {1}, пока не увидите эту запись.
completion.with.tab.finish.with.tab=Выберите "{0}" и нажмите {1}. Это действие не просто вставляет выбранное предложение, а полностью заменяет слово под курсором.
completion.with.tab.lesson.name=Автодополнение с помощью Tab
context.actions.apply.intention=Давайте применим действие "{0}".
context.actions.fix.warning=Давайте применим первое быстрое исправление\: {0}.
context.actions.help.intention.actions=Действия намерений
context.actions.invoke.general.intentions=Вы можете вызвать "{0}" практически в любом контексте. Давайте посмотрим, что можно сделать в другой позиции курсора. Снова нажмите {1}.
context.actions.invoke.intentions.for.warning=В <ide/> есть сотни контекстно-зависимых действий, которые помогают преобразовывать, улучшать и исправлять ваш код. Нажмите {1}, чтобы вызвать "{0}".
context.actions.lesson.name=Контекстные действия
context.actions.refactorings.promotion=Обратите внимание, что многие полезные рефакторинги недоступны через {0}. Перейдите в модуль {1}, чтобы узнать, как их вызывать и использовать.
debug.workflow.check.result=Нажмите {0}, чтобы вычислить выбранный оператор return.
debug.workflow.choose.method.to.step.in=Обратите внимание, что есть несколько вложенных вызовов, и Умный шаг внутрь подсвечивает их все. Нажмите {1}, чтобы выбрать вызов {0}, затем нажмите {2}, чтобы войти в него.
debug.workflow.consider.to.add.a.shortcut=(рекомендуется назначить сочетание клавиш позже)
debug.workflow.evaluate.expression=Чтобы проверить, выбрасывает ли функция исключение, вы можете вычислить выражение, которое вызывает эту функцию. Давайте скопируем выделенное выражение и вставим его в подсвеченное поле в окне отладки.
debug.workflow.evaluate.it=Нажмите {0}, чтобы вычислить выражение.
debug.workflow.exception.description=Программа выбрасывает исключение, и вы можете увидеть его стек вызовов в окне запуска. Обратите внимание, что вы можете кликнуть по именам файлов и номерам строк в стеке вызовов для перехода в редактор.
debug.workflow.fix.error=Ой, в индексе массива ошибка\! Давайте исправим это прямо сейчас. Нажмите {0}, чтобы закрыть всплывающее окно, затем измените 0 на 1.
debug.workflow.frames.disabled.warning=Чтобы продолжить этот урок, <callback id\="{0}">включите</callback> представление {1} в окне отладки.
debug.workflow.help.link=Отладка кода
debug.workflow.incorrect.breakpoints=Точки останова установлены неправильно для этого урока.
debug.workflow.lesson.name=Процесс отладки
debug.workflow.mute.breakpoints=Упс, наша точка останова снова сработала, но в этот раз нам не нужно здесь останавливаться. Давайте отключим точки останова, нажав "{0}" в окне отладки.
debug.workflow.need.restart.lesson=Сессия отладки была остановлена. Перезапустите урок.
debug.workflow.quick.evaluate=Давайте посмотрим, что мы собираемся передать в {0}. Нажмите {1}, чтобы вызвать Быстрое вычисление выражения для выбранного аргумента.
debug.workflow.resume=Теперь вызов работает без исключений. Нажмите {0} или нажмите "{1}" в окне отладки, чтобы возобновить выполнение программы.
debug.workflow.run.current=Давайте запустим этот пример программы, которая вычисляет среднее количество разных фруктов из входных данных.
debug.workflow.run.to.cursor.alternative=Альтернативно, наведите курсор на левую область и нажмите встроенное действие {0}.
debug.workflow.run.to.cursor.intro=Наконец, давайте проверим результат {0} (для удобства мы переместили курсор на его оператор {1}).
debug.workflow.run.to.cursor.note=Обратите внимание, что {0} работает даже если точки останова отключены.
debug.workflow.run.to.cursor.press=Нажмите {0}, чтобы выполнить программу до строки, где находится курсор.
debug.workflow.start.debug=Чтобы начать отладку с текущей выбранной конфигурацией запуска, нажмите "{0}" на панели инструментов или нажмите {1}.
debug.workflow.step.into=Чтобы выяснить, что вызвало исключение, давайте выполним шаг внутрь выбранного вызова. Нажмите {0} или нажмите "{1}" в окне отладки.
debug.workflow.step.over=Давайте проверим, будет ли вызов {0} выбрасывать исключение после нашего исправления. Чтобы перешагнуть через вызов, нажмите {1} или нажмите "{2}" в окне отладки.
debug.workflow.stop.debug=Результат правильный\! Давайте закончим отладку, нажав {0} или нажав "{1}" на панели инструментов.
debug.workflow.toggle.breakpoint=Давайте установим точку останова, чтобы начать исследование проблемы. Для этого кликните на полях нужной строки или установите курсор на эту строку и нажмите {0}.
debug.workflow.use.watches=Действительно, это выражение приводит к исключению. Давайте добавим это выражение в {0}, чтобы оно вычислялось автоматически в будущем. Нажмите {1} или нажмите "{2}".
debug.workflow.use.watches.shortcut=Альтернативно, вы можете использовать действие "{0}" для добавления выделенного текста в {1} {2}.
declaration.and.usages.find.usages=Нажмите {0}, чтобы увидеть более подробное представление использований. Вы можете вызвать {0} как на объявлении, так и на использовании.
declaration.and.usages.help.link=Перейти к объявлению и его типу
declaration.and.usages.hide.view=Когда вы закончите просмотр использований, нажмите {0}, чтобы скрыть представление.
declaration.and.usages.jump.to.declaration=Нажмите {0}, чтобы перейти к объявлению метода.
declaration.and.usages.lesson.name=Объявления и использования
declaration.and.usages.open.find.view=Нажмите {0}, чтобы снова открыть представление {1}.
declaration.and.usages.pin.motivation=Из представления {0} вы можете переходить как к использованиям, так и к объявлениям. Следующий поиск перезапишет эти результаты в представлении {0}. Чтобы предотвратить это, закрепите результаты.
declaration.and.usages.right.click.tab=Чтобы закрепить вкладку, щёлкните правой кнопкой мыши по подсвеченному заголовку вкладки.
declaration.and.usages.select.pin.item=Выберите {0}.
declaration.and.usages.show.usages=Теперь курсор находится на объявлении метода. Используйте то же сочетание клавиш {0}, чтобы увидеть все его использования, затем выберите одно из них.
duplicate.and.delete.lines.delete.line=Чтобы удалить текущую строку, нажмите {0}.
duplicate.and.delete.lines.duplicate.line=Дублируйте строку под курсором с помощью {0}.
duplicate.and.delete.lines.duplicate.several.lines=Теперь нажмите {0}, чтобы дублировать выделенные строки.
duplicate.and.delete.lines.lesson.name=Дублирование и удаление строк
duplicate.and.delete.lines.select.several.lines=Вы можете применить то же действие к нескольким строкам. Например, нажмите {0} дважды, чтобы выделить текущую и предыдущую строки.
duplicate.and.delete.lines.unexpected.selection.restore=Неожиданное выделение
editor.basics.module.description=Добавляйте, удаляйте, выделяйте, перемещайте и дублируйте код с помощью умных сочетаний клавиш.
editor.basics.module.name=Основы редактора
editor.coding.assistance.fix.error=Давайте исправим эту ошибку. Нажмите {0} и выберите {1}.
editor.coding.assistance.fix.warning=Всплывающее окно показывает предложение рефакторинга для исправления этого предупреждения.
editor.coding.assistance.goto.next.error=Нажмите {0}, чтобы перейти к следующей подсвеченной ошибке в файле.
editor.coding.assistance.goto.next.warning=Перейдем к следующему предупреждению. Нажмите {0}.
editor.coding.assistance.help.link=Работа с исходным кодом
editor.coding.assistance.highlight.usages=Еще один полезный инструмент - подсветка использований. Нажмите {0}, чтобы подсветить все использования символа под курсором в файле.
editor.coding.assistance.lesson.name=Помощь при написании кода в редакторе
editor.coding.assistance.show.warning.description=Нажмите {0}, чтобы развернуть описание предупреждения.
essential.module.description=Откройте для себя самые важные возможности {0}
essential.module.name=Основы
extract.method.confirm.several.replaces=В сортировке коктейлем есть два места для обмена. Первый фрагмент только что был извлечен. Нажмите {0}, чтобы извлечь оба.
extract.method.help.link=Извлечение метода
extract.method.invoke.action=Нажмите {0}, чтобы извлечь выделенный блок кода в метод.
extract.method.lesson.name=Извлечение метода
extract.method.second.fragment=Теперь вы можете подтвердить или отклонить замену второго фрагмента.
extract.method.start.refactoring=Нажмите {0}, чтобы начать рефакторинг.
extract.variable.choose.name=Выберите имя для новой переменной или оставьте как есть. Нажмите {0}, чтобы завершить рефакторинг.
extract.variable.help.link=Извлечь/Ввести переменную
extract.variable.lesson.name=Извлечение переменной
extract.variable.replace.all=Этот блок кода содержит 3 вхождения выбранного выражения. Выберите второй пункт в списке, чтобы заменить их все.
extract.variable.start.refactoring=Нажмите {0}, чтобы извлечь локальную переменную из выражения {1}.
file.structure.help.link=Просмотр структуры исходного файла
file.structure.lesson.name=Структура файла
file.structure.navigate=Остался только один элемент. Теперь нажмите {0}, чтобы перейти к выбранному элементу.
file.structure.open.popup=В большом исходном файле может быть сложно читать и перемещаться. Иногда вам нужно только предварительно просмотреть его. Нажмите {0}, чтобы открыть структуру файла.
file.structure.request.prefixes=Предположим, вы хотите найти метод со словами {0} и {1} в его имени. Введите {2} (префиксы нужных слов), чтобы отфильтровать структуру файла.
file.structure.toolwindow=<ide/> также может показать структуру файла в виде инструментального окна. Откройте его с помощью {0}.
find.help.link=Поиск цели в файле
find.in.files.confirm.replace=Наконец, нажмите {0} в диалоговом окне для подтверждения.
find.in.files.go.to.file=Также вы можете открыть выбранный файл в главном редакторе. Нажмите {0} или дважды щёлкните по подсвеченному элементу, чтобы перейти к соответствующему файлу.
find.in.files.help.link=Поиск и замена текста в файлах проекта
find.in.files.lesson.name=Поиск и замена в файлах
find.in.files.popup.closed.warning.message=Нажмите {0}, чтобы снова открыть окно {1}.
find.in.files.press.replace.all=Нажмите {0}, чтобы начать замену.
find.in.files.select.directory=Вы можете определить область поиска и замены. Нажмите кнопку {0} или нажмите {1}, чтобы сузить замену только до текущей директории.
find.in.files.select.row=Вы можете видеть контекст найденной строки во встроенном редакторе. Нажмите на подсвеченную строку или перейдите к ней, используя кнопки {0} и {1}.
find.in.files.show.find.popup=Предположим, вы хотите найти все вхождения некоторой строки в проекте. Нажмите {0}, чтобы открыть окно {1}.
find.in.files.show.replace.popup=Предположим, вы хотите заменить все найденные вхождения другой строкой. Выполнять замену последовательно в каждом файле может быть очень утомительно. <ide/> поможет вам с этой задачей. Нажмите {0}, чтобы открыть окно {1}.
find.in.files.type.to.find=Введите {0}, чтобы искать все текстовые вхождения в учебном проекте.
find.in.files.type.to.replace=Давайте заменим все вхождения {0} на {1}. Введите {1} в подсвеченное поле.
find.in.files.whole.words=Вы должны были найти строку {0}, но также получили некоторые записи {1}. Давайте сузим поиск до целого слова. Нажмите {2} или нажмите {3}.
find.occurrences.close.search.tool=Даже когда панель поиска закрыта, вы все еще можете использовать эти сочетания клавиш для навигации между недавно найденными вхождениями. Давайте закроем панель поиска, нажав {0}.
find.occurrences.find.next=<ide/> автоматически копирует выделенный текст в поле поиска. Давайте найдем следующее вхождение. Нажмите {0} или {1}.
find.occurrences.find.next.in.editor=Найдите следующее вхождение с помощью {0}.
find.occurrences.find.previous=Чтобы перейти к предыдущему вхождению, нажмите {0}.
find.occurrences.find.previous.in.editor=И {0}, чтобы двигаться назад.
find.occurrences.invoke.find=В этом уроке вы выбрали {0}. Нажмите {1}, чтобы начать полнотекстовый поиск по текущему файлу.
find.occurrences.lesson.name=Следующее/предыдущее вхождение
find.occurrences.note.about.cyclic=<strong>Примечание\:</strong> Поиск циклический. Когда вы нажимаете {0} дважды на последнем вхождении, будет выбрано первое вхождение. {1} также работает циклически.
find.occurrences.search.closed.warning=Нажмите {0}, чтобы снова открыть поле поиска.
goto.action.first.lines.toggle={0, choice, 0\#Отключите|1\#Включите} нумерацию строк.
goto.action.invoke.about.action=Например, если вы хотите узнать об <ide/>, введите {0} и нажмите {1}.
goto.action.invoke.again=Вы также можете использовать {0} или двойное нажатие {1} для изменения настроек ИСР и проекта. Нажмите одно из этих сочетаний клавиш снова.
goto.action.lesson.name=Поиск действий
goto.action.mac.workaround=Если вместо {0} открывается поиск <strong>Терминала</strong>, обратитесь к <a href\="{1}">этой статье</a>.
goto.action.popup.closed.warning.message=Нажмите {0} или дважды нажмите {1}, чтобы снова открыть окно поиска.
goto.action.propose.to.go.next.new.ui=Отлично\! Просто нажмите {0} или кнопку ниже, чтобы начать следующий урок.
goto.action.second.lines.toggle=Теперь {0, choice, 0\#включите|1\#отключите} нумерацию строк обратно.
goto.action.show.line.numbers.request=Введите {0}, чтобы увидеть селектор {1}.
goto.action.to.return.to.the.editor=Нажмите {0}, чтобы вернуться в редактор.
goto.action.use.find.action.1=Одно из самых полезных сочетаний клавиш — {0}. Оно позволяет искать все доступные действия ИСР, не зная их точных названий или сочетаний клавиш. Попробуйте его сейчас с помощью {1}.
goto.action.use.find.action.2=Также вы можете дважды нажать {1}, чтобы вызвать {0}, что поможет найти как сущности проекта, <strong>так и</strong> элементы ИСР. Выбор за вами.
help.code.comment=Закомментировать и раскомментировать код
help.code.completion=Автодополнение кода
help.code.duplicate=Дублировать строку или выделение
help.find.actions=Поиск действий и настроек
help.lines.of.code=Строки кода
help.search.everywhere=Поиск везде
local.history.close.window=Закройте диалог, чтобы вернуться к измененному коду. Нажмите {0}.
local.history.congratulations=Отлично\! Вы восстановили фрагмент кода\!
local.history.dialog.message=ИСР симулирует процесс редактирования файла. Пожалуйста, дождитесь завершения.
local.history.editor.hint=Модификация файла отключена для текущего шага.
local.history.file.modification.progress=Модификация файла
local.history.help.link=Локальная история
local.history.imagine.restore=Представьте, что вам нужно восстановить код, который был удален ранее. {0} не поможет, так как с тех пор было сделано несколько изменений, которые вы не хотите потерять.
local.history.invoke.context.menu=Используйте {0}, чтобы восстановить удалённый код всего несколькими кликами. Щёлкните правой кнопкой мыши в любом месте редактора, чтобы открыть контекстное меню.
local.history.lesson.name=Восстановление удалённого кода
local.history.remove.code=В этом уроке вы узнаете, как восстанавливать код с помощью {0}. Нажмите {1}, чтобы удалить выбранный фрагмент кода.
local.history.restore.code=Правая панель показывает различия между выбранной и текущей ревизиями файла. В данном случае выбранная ревизия содержит код, который был удален ранее. Чтобы восстановить фрагмент кода, нажмите кнопку со стрелкой {0}.
local.history.restore.code.balloon=Нажмите, чтобы восстановить фрагмент кода
local.history.select.revision=Левая панель диалога {0} отображает список сохранённых ревизий текущего файла. Состояние проекта автоматически сохраняется в {1} каждый раз, когда вы редактируете код, запускаете тесты или выполняете другие действия. Давайте выберем подсвеченную ревизию.
local.history.show.history=Выберите {0} → {1}.
move.lesson.name=Перемещение фрагментов кода
move.pull.down=Перестановка строк обычно включает два действия\: вырезать и вставить. В <ide/> это можно сделать одним действием. Нажмите {0}, чтобы переместить текущую строку вниз.
move.pull.up=Аналогично, чтобы переместить строку вверх, нажмите {0}.
move.whole.method.down=Теперь переместите его вниз с помощью {0}.
move.whole.method.up=Попробуйте переместить весь метод вверх с помощью {0}. Обратите внимание, что курсор должен находиться в заголовке метода.
multiple.selections.deselect.symbol=Нажмите {0}, чтобы отменить выделение последнего вхождения.
multiple.selections.escape=Нажмите {0}, чтобы сбросить множественное выделение и вернуться к режиму одного курсора.
multiple.selections.help.multiple.carets=Множественные курсоры и диапазоны выделения
multiple.selections.lesson.name=Множественное выделение
multiple.selections.replace=Введите {0}, чтобы заменить все вхождения {1} на {0}.
multiple.selections.select.all=Нажмите {0}, чтобы выделить все вхождения в файле.
multiple.selections.select.next.symbol=Нажмите {0} снова, чтобы выделить следующее вхождение этого символа.
multiple.selections.select.symbol=Нажмите {0}, чтобы выделить символ под курсором.
navigation.module.description=Переход к исходному коду, навигация к объявлениям, реализациям и структуре файла.
navigation.module.name=Навигация
new.selection.add.quotes=Нажмите {0} в третий раз, чтобы включить кавычки в выделение.
new.selection.select.call=Нажмите {0} еще {1,choice,1\#один|2\#два|3\#три|4\#четыре} раза, чтобы выделить весь вызов.
new.selection.select.if=Мы переместили курсор в начало оператора {0}. Нажмите {1} два раза, чтобы выделить его. Ключевое слово может быть хорошей отправной точкой для выбора соответствующего оператора всего за несколько нажатий.
new.selection.select.string=Нажмите {0} снова, чтобы выделить всю строку.
new.selection.select.word=Нажмите {0}, чтобы выделить слово под курсором.
new.selection.unselect=Предположим, мы хотим выделить его аргументы вместо всего вызова. Нажмите {0}, чтобы сократить выделение обратно до аргументов.
onboarding.finish.exit=Закрыть демо-проект
onboarding.finish.modules=Показать больше уроков
onboarding.finish.text=Вы только что завершили ознакомительный тур по <ide/>.\nТеперь вы можете закрыть учебный проект{0}.\nВы также можете продолжить обучение и попробовать другие уроки.
onboarding.finish.title=Поздравляем
onboarding.return.to.welcome.remark=\ и вернуться к экрану приветствия
parameter.info.add.parameters=Используйте ширину {0} и высоту {1}.
parameter.info.help.link=Информация о параметрах
parameter.info.lesson.name=Информация о параметрах
parameter.info.use.action=Всплывающее окно {0} показывает имена параметров в вызовах методов и функций. <ide/> автоматически показывает всплывающее окно со всеми доступными сигнатурами метода в течение секунды после того, как вы введете открывающую скобку в редакторе или выберете метод из списка предложений. Нажмите {1}, чтобы увидеть сигнатуру метода.
postfix.completion.help.link=Постфиксное завершение кода
postfix.completion.intro=Постфиксное завершение помогает уменьшить количество перемещений курсора назад при написании кода. Оно позволяет преобразовать уже набранное выражение в другое на основе добавляемого постфикса, типа выражения и его контекста.
postfix.completion.lesson.name=Постфиксное завершение
proceed.to.the.next.step=<callback id\="{0}">Нажмите, чтобы продолжить</callback>
quick.popups.close=Нажмите {0}, чтобы закрыть всплывающее окно.
quick.popups.help.link=Быстрые всплывающие окна
quick.popups.lesson.name=Быстрые всплывающие окна
quick.popups.press.show.documentation.again=Нажмите {0} снова, чтобы открыть эту документацию в окне инструментов Documentation.
quick.popups.press.show.documentation.focus=Кликните по окну Documentation или нажмите {0} еще раз, чтобы переместить туда фокус.
quick.popups.show.documentation=Вы можете получить быструю информацию о любом символе прямо из редактора с помощью функции {0}. Нажмите {1}, чтобы увидеть документацию для символа под курсором.
quick.popups.show.implementation=Нажмите {0}, чтобы увидеть определение символа под курсором.
readme.bug.tracker.remark=Если возникла другая проблема, попробуйте перезапустить урок или сообщите об ошибке в [нашем баг-трекере]({0}).
readme.conclusion.header=Вернуться к проекту
readme.exit.options=Чтобы вернуться к экрану приветствия, просто закройте окно проекта. Также можно выбрать `{0} | {1}` в главном меню. Вы также можете использовать меню `{0}` для открытия или создания новых проектов. По умолчанию окно инструментов `{2}` скрыто. Его можно открыть, выбрав `{3} | {4}` в главном меню.
readme.experienced.users.remark=Даже если урок кажется вам знакомым, попробуйте его пройти\: вы можете обнаружить полезные примеры и неизвестные сочетания клавиш для функций, которыми активно пользуетесь\!
readme.feedback.request=Будем признательны, если вы оставите отзыв об этом учебном курсе\!
readme.ift.description=Этот интерактивный курс познакомит вас с множеством рабочих процессов и сценариев использования ИСР. Он включает множество полезных сочетаний клавиш. Вам не нужно запоминать их все - попробуйте и возьмите на вооружение самые полезные. Поскольку в повседневной работе вы можете столкнуться с новыми задачами, возвращайтесь к этому курсу и попробуйте другие функции. Следите за новыми уроками, которые помогут вам эффективнее работать с {0}.
readme.indexing.description=Вероятно, вы читаете этот `README.md` во время инициализации учебного проекта. Обычно `индексация` - самая длительная операция при инициализации проекта. ИСР необходимо собрать информацию о вашем окружении, проекте{0,choice,1\#, библиотеках|2\#} и построить внутреннее представление. Это нужно для быстрой навигации и поиска.
readme.navigation.hint=Модуль `{0}` в этом курсе покажет, как этим пользоваться.
readme.shortcuts.header=Управление сочетаниями клавиш
readme.shortcuts.problem.description=Некоторые сочетания клавиш в этом курсе могут конфликтовать с системными или сочетаниями других приложений. В этом случае вы можете кликнуть на проблемное сочетание в тексте урока. В открывшемся popup будет показано название действия и альтернативные сочетания клавиш. Вы сможете применить действие или назначить новое сочетание клавиш.
readme.start.header=Начало работы
readme.toolwindow.description=Окно инструментов `{0}` содержит несколько модулей с соответствующими наборами уроков, которые можно проходить в любом порядке. После завершения урока он будет отмечен как пройденный. Вы можете использовать пройденный урок для справки или начать его заново, если хотите освежить знания.
readme.usage.header=Как пользоваться курсом
readme.welcome.header=Знакомство с интерактивным тренажером
recent.files.close.popup=Теперь история наших недавних файлов чище. Кликните где-нибудь за пределами всплывающего окна, чтобы закрыть его, или используйте {0}.
recent.files.delete=Этот список содержит много исходных файлов, которые мы больше не хотим открывать. Давайте удалим {0} файлов из истории недавних файлов с помощью {1}.
recent.files.dialog.message=Мы хотим смоделировать базовый рабочий процесс\: быструю навигацию между файлами. Пожалуйста, подождите завершения.
recent.files.dialog.title=Моделирование рабочего процесса
recent.files.first.transition=Интересно, как реализован метод {0}? Давайте перейдем к его объявлению с помощью {1}.
recent.files.lesson.name=Недавние файлы и места
recent.files.locations.help.link=Поиск недавних файлов
recent.files.locations.search.jump=Теперь выберите подсвеченный фрагмент и нажмите {0}, чтобы открыть содержащий его файл.
recent.files.locations.search.typing=Здесь вы можете искать по фрагментам кода, которые помните. Введите {0}
recent.files.progress.title=Открытие файлов
recent.files.search.jump=Остался только один файл. Теперь нажмите {0}, чтобы перейти к выбранному файлу.
recent.files.search.typing=Вы можете искать файл по его имени. Введите {0} (префиксы нужных слов).
recent.files.show.recent.files=Мы глубоко погрузились в файлы библиотеки. Как вернуться к нашему файлу? В <ide/> есть функция, которая может помочь показать недавно открытые файлы. Нажмите {0}.
recent.files.show.recent.locations=С помощью другого полезного действия вы можете найти свой код в недавно посещенных файлах. Нажмите {0}
recent.files.use.recent.files.again=Мы вернулись к нашему файлу. Давайте снова посмотрим недавние файлы с помощью {0}.
refactoring.menu.finish.refactoring=Чтобы завершить рефакторинг, выберите имя для нового параметра или оставьте имя по умолчанию и нажмите {0}.
refactoring.menu.help.link=Вызов рефакторинга
refactoring.menu.introduce.parameter=Предположим, вам нужно переместить выбранное выражение в место вызова и передать его как параметр содержащего метода. Выберите "{0}" из списка и нажмите {1}.
refactoring.menu.introduce.parameter.eng=Допустим, вам нужно переместить выбранное выражение в точку вызова и передать его как параметр содержащего метода. {0} может сделать именно это. Просто введите <strong>pa</strong> (introduce <strong>pa</strong>rameter) или <strong>ip</strong> (<strong>i</strong>ntroduce <strong>p</strong>arameter), чтобы сократить предложенный список.
refactoring.menu.lesson.name=Меню рефакторинга
refactoring.menu.show.refactoring.list=<ide/> предоставляет различные виды рефакторинга. Многие из них имеют свои сочетания клавиш, но вы всегда можете нажать {0}, чтобы увидеть список всех доступных в текущем контексте рефакторингов.
refactoring.menu.start.refactoring=Нажмите {0}, чтобы начать рефакторинг {1}. <strong>Обратите внимание</strong>, что вы можете узнать сочетания клавиш для рефакторинга из меню рефакторинга.
refactorings.change.settings.warning.message=Чтобы завершить этот урок, измените параметры рефакторинга в настройках редактора. Нажмите {0}, перейдите в {1} <strong>→</strong> {2} и выберите {3} в разделе {4}. Или <callback id\="{5}">нажмите</callback>, чтобы изменить настройку.
refactorings.module.description=Сделайте ваш код аккуратным с помощью переименования, извлечения и других типов рефакторинга.
refactorings.module.name=Рефакторинг
rename.help.link=Рефакторинг переименования
rename.lesson.name=Переименование
restore.settings.informer=В этом уроке вы изменили некоторые настройки ИСР. <callback id\="{0}">Нажмите</callback>, если хотите восстановить измененные параметры.
run.configuration.close.settings=Теперь закройте диалог, чтобы завершить этот урок.
run.configuration.edit.configuration=Чтобы редактировать конфигурации запуска или добавить новые, нажмите на выпадающий список, удерживая {0}, или откройте выпадающий список и нажмите {1}.
run.configuration.help.link=Конфигурации запуска/отладки
run.configuration.hover.generated.configuration=Для этого урока мы добавили еще одну конфигурацию с параметрами. Наведите курсор мыши на эту конфигурацию, чтобы увидеть кнопки Run или Debug для нее.
run.configuration.lesson.name=Конфигурация запуска
run.configuration.no.run.configuration=Как видите, запуск {0} не создает никаких конфигураций запуска.
run.configuration.open.additional.menu.balloon=Показать дополнительные действия
run.configuration.open.run.configurations.popup=Теперь посмотрим на всплывающее окно конфигураций запуска. Нажмите на выпадающий список.
run.configuration.run.current=Давайте запустим эту демо-программу, нажав {0} на панели инструментов.
run.configuration.run.current.balloon=Давайте запустим этот пример
run.configuration.run.generated.configuration=Давайте запустим её.
run.configuration.select.save.configuration=Выберите {0}.
run.configuration.settings.description=Это место для управления всеми конфигурациями запуска. Здесь вы можете установить параметры программы, аргументы JVM, переменные окружения и так далее.
run.configuration.temporary.to.permanent=Теперь <ide/> создала временную конфигурацию запуска. Временные конфигурации автоматически удаляются, когда их число превышает стандартный лимит в пять. Давайте преобразуем временную конфигурацию в постоянную. Нажмите {0} рядом с кнопками Run и Debug.
run.configuration.tip.about.save.configuration.into.file=Совет\: Чтобы сделать конфигурацию запуска доступной для ваших коллег, сохраните её в отдельный файл и поделитесь этим файлом через систему контроля версий.
run.debug.module.description=Запускайте код и исправляйте ошибки с помощью визуального отладчика ИСР.
run.debug.module.name=Запуск и отладка
search.everywhere.class.popup.closed.warning.message=Нажмите {0}, чтобы снова открыть окно поиска.
search.everywhere.close.documentation.popup=Нажмите {0}, чтобы закрыть всплывающее окно.
search.everywhere.finish=<strong>Готово\!</strong> Аналогично вы можете нажать {0} для поиска метода или глобальной переменной и {1} для поиска файла.
search.everywhere.goto.class=Отлично\! Однако иногда нужно искать только классы или только в определённых директориях. Используйте {0} для поиска классов.
search.everywhere.invoke.search.everywhere=Нажмите {1} дважды, чтобы открыть {0}.
search.everywhere.lesson.name=Поиск везде
search.everywhere.navigate.to.class=Выберите {0} с помощью стрелок клавиатуры и нажмите {1}, чтобы перейти к найденному определению.
search.everywhere.navigation.promotion=Другие действия навигации и сценарии использования вы найдете в модуле {0}.
search.everywhere.quick.documentation=Нажмите {0}, чтобы просмотреть документацию для выбранного класса.
search.everywhere.type.class.name=Предположим, вам нужен класс библиотеки, отвечающий за буферизованное чтение из входного потока. Введите {0} (начальные буквы слов поиска), но пока не переходите.
search.everywhere.type.prefixes=Предположим, вы ищете определение кода со словами {0} и {1} в названии. Введите {2} (начальные буквы этих слов) в поле поиска.
search.everywhere.use.all.places=Теперь вы видите, что есть подходящий класс в демо-проекте. Однако нам нужно найти класс в библиотеках. Давайте переключим фильтр {0} на {1}, чтобы показать подходящие классы из доступных библиотек.
selection.extend.selection=Нажмите {0}, чтобы расширить выделение до следующего блока кода.
selection.extend.until.whole.file=Попробуйте увеличивать выделение с помощью {0}, пока не будет выделен весь файл.
selection.help.select.code.constructs=Выделение конструкций кода
selection.lesson.name=Расширение и сужение выделения кода
selection.select.word=Поместите курсор перед любым словом. Нажмите {0}, чтобы переместить курсор к следующему слову и выделить всё между ними.
selection.shrink.selection={0} сужает выделение. Попробуйте.
smart.completion.lesson.name=Автодополнение по типу
surround.and.unwrap.choose.surround.item=Выберите пункт {0}.
surround.and.unwrap.choose.unwrap.item=Выберите пункт {0}.
surround.and.unwrap.help.surround.code.fragments=Оборачивание фрагментов кода
surround.and.unwrap.help.unwrapping.and.removing.statements=Разворачивание и удаление операторов
surround.and.unwrap.invoke.surround=Нажмите {0}, чтобы обернуть выделенный фрагмент кода шаблонным кодом.
surround.and.unwrap.invoke.unwrap=Давайте вернемся к предыдущему состоянию с помощью действия разворачивания {0}.
surround.and.unwrap.lesson.name=Оборачивание и разворачивание
surround.with.lesson.name=Оборачивание