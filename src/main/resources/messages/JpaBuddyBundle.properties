ActionGroupDropDown.label=Действия
AttribitePanel.validation=Валидация
AttributeTipInfo.Severity.LEAST_EFFICIENT=Наименее эффективно
AttributeTipInfo.Severity.MORE_EFFICIENT=Более эффективно
AttributeTipInfo.Severity.MOST_EFFICIENT=Наиболее эффективно
ColumnRenderer.inDb.prefix=В базе данных\:
ColumnValueCellRenderer.usedBy=Используется {0}
ConfirmDialog.title=Подтвердите
ConstraintCheckDigitIndexItem.name=Проверка цифрового индекса
ConstraintCurrencyItem.name=Валюта
ConstraintFractionItem.name=Дробь
ConstraintHostItem.name=Хост
ConstraintIgnoreNonDigitCharactersItem.name=Игнорировать нецифровые символы
ConstraintInclusiveItem.name=Включительно
ConstraintIntegerItem.name=Целое число
ConstraintMaxItem.name=Максимум
ConstraintMaxLongItem.name=Максимум
ConstraintMessageItem.name=Сообщение
ConstraintMinItem.name=Минимум
ConstraintMinLongItem.name=Минимум
ConstraintPortItem.name=Порт
ConstraintProtocolItem.name=Протокол
ConstraintRegexpItem.name=Регулярное выражение
ConverterAttributeItem.name=Конвертер
CreateIndexDialog.label.name=Название
CreateIndexDialog.label.unique=Уникальный
DaysDurationItem.days=дней
DaysDurationItem.hours=часов
DaysDurationItem.millis=миллисекунд
DaysDurationItem.minutes=минут
DaysDurationItem.nanos=наносекунд
DaysDurationItem.seconds=секунд
DisplayName.codingAssistance=Помощь в написании кода
DisplayName.dbDrivers=Драйверы баз данных
DisplayName.dtoDeclaration=Объявление DTO
DisplayName.entityDeclaration=Объявление JPA Entity
DisplayName.hibernateEnvers=Hibernate Envers
DisplayName.mapperDeclaration=Объявление Mapper
DisplayName.projectionDeclaration=Объявление проекции
DisplayName.repository=Spring Data Repository
DomainEntityType.JPA=JPA Entity
DomainEntityType.MONGODB=MongoDB Document
DtoAttributePanel.mappingWillBeHandledImplicitly=Маппинг будет обработан неявно
DtoAttributePanel.unsetName=<сбросить имя>
EndIndexItem.name=Конечный индекс
EntityFromPojoAttributeType.EXISTING_CLASS=Выбрать существующий класс сущности
EntityFromPojoAttributeType.NEW_CLASS=Создать новый класс сущности
EntityFromPojoAttributeType.TRANSIENT=Transient
EntityToDtoMapperDialog.fromDto=Маппинг {0} из…
EntityToDtoMapperDialog.toDto=Маппинг {0} в…
EntityViewCreateDialog.title=Новый {0}
EnvironmentVariablesDialog.message.illegalNameEnvironmentVariable=Недопустимое имя переменной окружения\: {0}
EnvironmentVariablesDialog.message.illegalValueEnvironmentVariable=Недопустимое значение для переменной окружения ''{0}''\: ''{1}''
ExtractJpqlQueryIntention.error={0} ошибка
GenerateEntityAttributeAction.TypeField.radio.element.collection=Коллекция элементов
GenerateEntityAttributeAction.TypeField.radio.id=ID
GenerateEntityAttributeAction.TypeField.radio.persist=Persist
GenerateEntityAttributeAction.TypeField.radio.transient=Transient
GenerateEntityAttributeAction.popup.title.enterAttributeType=Введите тип атрибута
InheritanceField.default=По умолчанию ({0})
InjectionInsertHandler.hint.text.canNotPerformCompletion.canNotFindInjectingClass=Невозможно выполнить автодополнение\: не найден внедряемый класс.
InjectionInsertHandler.hint.text.canNotPerformCompletion.targetClassNotFound=Невозможно выполнить автодополнение\: целевой класс не найден.
Item.notImplemented.text=Эта функция еще не реализована. Мы планируем добавить её в будущих обновлениях.
JpaAttributePropertiesPanel.action.createItem=Создать обратный атрибут…
JpaAttributePropertiesPanel.notification.unableToDefineEntityId=Невозможно определить тип ID для сущности ''{0}''
JpaColumnNamesEditor.validation.columnMustNotBeEmpty=Список столбцов не может быть пустым
JpaToolWindowManager.designer=Дизайнер
JpaToolWindowManager.jpaDesignerTitle=JPA Designer
JpaToolWindowManager.structure=Структура
JpaToolWindowManager.toolWindowId=JPA Buddy
MapperMethodCreationDialog.single=Одиночный
MapperMethodCreationDialog.title.from.dto.to.entity=Из DTO в Entity
MapperMethodCreationDialog.title.from.entity.to.dto=Из Entity в DTO
MessageDialog.no.thanks=Нет, спасибо
MessageDialog.request.ultimate.trial=Попробовать IntelliJ ИСРA Ultimate
MethodType.COUNT=Count
MethodType.DELETE=Delete
MethodType.EXISTS=Exists
MethodType.FIND_COLLECTION=Find коллекция
MethodType.FIND_INSTANCE=Find экземпляр
MethodType.QUERY_COUNT=Query count
MethodType.QUERY_DELETE=Query delete
MethodType.QUERY_EXISTS=Query exists
MethodType.QUERY_FIND_COLLECTION=Query find коллекция
MethodType.QUERY_FIND_INSTANCE=Query find экземпляр
MethodType.QUERY_UPDATE=Query update
NewType.INDEX=Индекс
NewType.UNIQUE_CONSTRAINT=Уникальное ограничение
NotImplemented.title=Скоро
PTableGroup.association=Ассоциация
PTableGroup.basic=Базовое
PTableGroup.column=Столбец
PTableGroup.format=Формат
PTableGroup.general=Общее
PTableGroup.hibernate.envers=Hibernate Envers
PTableGroup.id=ID
PTableGroup.inheritance=Наследование
PTableGroup.jpa.buddy=JPA Buddy
PTableGroup.lombok=Lombok
PTableGroup.table=Таблица
PTableGroup.validation=Валидация
Palette.category.attributes=Атрибуты
Palette.category.audit=Аудит
Palette.category.indexes=Индексы
Palette.category.lifecycleCallbacks=Lifecycle callbacks
Palette.category.liquibase.add=Добавить
Palette.category.liquibase.create=Создать
Palette.category.liquibase.drop=Удалить
Palette.category.liquibase.filter=Liquibase файлы
Palette.category.liquibase.rename=Переименовать
Palette.category.method=Метод
Palette.category.namedGraph=Named graph
Palette.category.namedGraphs=Named graphs
Palette.category.namedQuery=Named query
Palette.category.other=Прочее
Palette.category.query=Query
Palette.category.reverseEngineering=Reverse engineering
Palette.category.utils=Утилиты
QueryType.COUNT=Count
QueryType.DELETE=Delete
QueryType.EXISTS=Exists
QueryType.FIND=Find
QueryType.UPDATE=Update
RepositoryCreationDialog.mode.bulk=Массовый
RepositoryCreationDialog.mode.single=Одиночный
RepositoryCreationDialog.title=Новый Spring Data Repository
RepositoryGraphEditor.radio.fetch=Fetch
RepositoryGraphEditor.radio.load=Load
RepositoryMethodDialog.changeSettings=Изменить настройки
RepositoryMethodDialog.is=(Is)
RevisionListenerRenderer.newClass=Новый класс
SpringAuditItem.name=Spring аудит
StartIndexItem.name=Начальный индекс
TabularPropertiesEditor.propertiesNotFound=Свойства не найдены
TabularPropertiesEditor.validation.number=Недопустимое число
ToStringType.ALL=Все
ToStringType.NONE=Нет
ToStringType.ONLY_EXPLICITLY_INCLUDED=Только явно включенные
TypeInject.CONSTRUCTOR_OR_AUTOWIRED=Constructor/@Autowired
TypeInject.LOOKUP=Lookup метод
TypeInject.OBJECT_FACTORY=Object factory
action.CreateLiquibaseChangeLog.text=Пустой Liquibase changelog
action.CreateLiquibaseChangeLogItem.description=Создать Liquibase изменение
action.CreateLiquibaseChangeLogItem.text=Liquibase изменение
action.CreateReverseEngineeringItem.description=Создать атрибуты JPA Entity из столбцов базы данных
action.CreateReverseEngineeringItem.text=Создать атрибуты Entity из базы данных…
action.JpbAddAttributesFromPojo.text=Добавить атрибуты из DTO
action.JpbAddAttributesToDTO.text=Добавить атрибуты в DTO
action.JpbAddMapperMethods.description=Добавить методы Mapper
action.JpbAddMapperMethods.text=Методы Mapper…
action.JpbConfigureToolWindow.description=Настроить панель инструментов редактора и окно инструментов
action.JpbConfigureToolWindow.text=Настроить панель инструментов редактора и окно инструментов
action.JpbCreateCustomDs.text=Подключение к базе данных…
action.JpbCreateCustomType.text=Пользовательский тип Hibernate
action.JpbCreateDto.text=Создать DTO
action.JpbCreateEntity.text=JPA Entity
action.JpbCreateEntityActionWithRelationFrom.text=Связанная сущность…
action.JpbCreateEntityActionWithRelationTo.text=Связанная сущность
action.JpbCreateEntityFromPojo.text=Создать JPA Entity из POJO
action.JpbCreateEntityView.text=Blaze Persistence Entity View
action.JpbCreateHibernateEvent.text=Создать событие Hibernate
action.JpbCreateIndex.description=Создать индекс
action.JpbCreateIndex.text=Индекс/ограничение…
action.JpbCreateJpaConverter.text=JPA Converter
action.JpbCreateJpaDto.text=DTO
action.JpbCreateJpaRepository.text=Spring Data JPA Repository
action.JpbCreateMapper.text=MapStruct интерфейс
action.JpbCreatePersistenceUnit.text=Persistence Unit
action.JpbCreateRelatedEntityPopup.description=Добавить атрибут со связанной сущностью
action.JpbCreateRelatedEntityPopup.text=Создать связанную сущность
action.JpbCreateRepositoryMethod.description=Создать метод репозитория
action.JpbCreateRepositoryMethod.text=Метод репозитория…
action.JpbCreateRevisionEntity.text=Revision Entity
action.JpbCreateSpringDataSource.description=Сгенерировать свойства источника данных
action.JpbCreateSpringDataSource.text=Источник данных
action.JpbCreateSpringProjection.text=Spring Data Projection
action.JpbDeleteDataStore.text=Удалить…
action.JpbDeletePersistenceUnit.text=Удалить Persistence Unit
action.JpbDetectDataSource.text=Определить подключение…
action.JpbEditCustomDataSource.text=Редактировать подключение к базе данных
action.JpbEditPersistenceUnit.text=Редактировать Persistence Unit
action.JpbExtractMappedSuperClass.text=Извлечь в MappedSuperclass
action.JpbFlywayAddDdlChange.text=Добавить DDL/SQL оператор
action.JpbFlywayCreateSqlChange.description=Создать DDL оператор
action.JpbFlywayCreateSqlChange.text=DDL/SQL оператор
action.JpbFlywayGenerateDiffDdlChanges.text=Сгенерировать DDL операторы различий
action.JpbGenerateEntityAttribute.description=Добавить атрибут сущности
action.JpbGenerateEntityAttribute.text=Атрибут сущности…
action.JpbGenerateLifecycleCallback.description=Добавить JPA lifecycle callback
action.JpbGenerateLifecycleCallback.text=Lifecycle callback…
action.JpbGenerateNamedQuery.description=Добавить named query
action.JpbGenerateNamedQuery.text=Named query…
action.JpbGenerateUtilities.description=JPA утилиты
action.JpbGenerateUtilities.text=JPA утилиты…
action.JpbLiquibaseDeleteTag.text=Удалить тег
action.JpbMapperCreation.text=Создать MapStruct интерфейс
action.JpbReEntityAttributeFromDb.text=Создать атрибуты Entity из базы данных
action.JpbReferencesTreeNotification.text=Ссылки
action.JpbRefreshJpaStructure.text=Обновить дерево JPA Explorer
action.JpbSafeDeleteAttribute.description=Безопасное удаление атрибута
action.JpbSafeDeleteAttribute.text=Безопасное удаление…
action.JpbSafeDeleteClass.text=Безопасное удаление класса
action.JpbSafeDeleteMethod.description=Безопасное удаление метода
action.JpbSafeDeleteMethod.text=Безопасное удаление…
action.JpbSearchInLibraries.text=Поиск в библиотеках
action.JpbSelectInStructureView.text=Выбрать в JPA Explorer
action.JpbSelectOpenedFileNotificationProvider.text=Выбрать в JPA Explorer
action.JpbShowEntityDdl.text=Показать DDL
action.JpbShowInspectorPopup.description=Показать всплывающее окно инспектора
action.JpbShowInspectorPopup.text=Показать всплывающее окно инспектора
action.JpbShowJpaSettings.text=Настройки JPA Buddy
action.JpbSyncDtoWithEntity.text=Добавить атрибуты из сущности
action.JpbSyncEntityWithDto.text=Сгенерировать атрибуты сущности из DTO
action.actions.text=Действия
action.add.text=Добавить
action.add.to.source.text=Добавить в исходный код
action.browse.text=Обзор
action.create.dto.text=Создать DTO
action.create.jpa.converter.text=Создать JPA конвертер
action.create.projection.text=Создать проекцию
action.delete.tag.text=Удалить тег
action.delete.text=Удалить…
action.description.create.projection=Создать проекцию…
action.description.migration=Миграция типов…
action.description.smart.refactoring=Умный рефакторинг
action.documentation.text=Документация
action.edit.lowercase=редактировать
action.extract.lowercase=извлечь…
action.navigate.lowercase=навигация
action.new.text=Создать
action.select.item.text=Выбрать элемент
add=Добавить
add.attribute.dto=Добавить атрибут в DTO
add.attributes.from.dto.to.entity=Добавить атрибуты из DTO в {0}
add.attributes.to.entity=Добавить атрибуты в сущность
addShortCut=Добавить сочетание клавиш
additional.db.drivers=Дополнительные драйверы БД
apply=Применить
attributeItem.readModel=Прочитать модель атрибута
bean.injection.symbols.comment=Автодополнение внедрения Bean не будет показано, если количество введенных символов меньше указанного.
border.title.autowiring.code.style=Стиль кода автоподключения
cancel=Отмена
category.all.results=Все результаты
changes.please.enter.a.valid.regex=Пожалуйста, введите корректное {0}
checkbox.update.entity.from.dto=Обновить сущность из DTO
choose.table.columns=Выбрать столбцы таблицы
class.comment=Комментарий класса
class.name.postfix=Постфикс имени класса
column.name.attribute=Атрибут
column.name.column=Столбец
column.name.condition=Условие
column.name.direction=Направление
column.name.entity=Сущность
column.name.ignoreCase=Игнорировать регистр
column.name.name=Имя
column.name.nullability=Обнуляемость
column.name.nullable=Nullable
column.name.operator=Оператор
column.name.repository=Repository
column.name.unique=Уникальный
columns=Столбцы
command.name.add.lifecycle.callback=Добавить callback жизненного цикла ''{0}''
command.name.append.changes.to.sql.file=Добавить изменения в SQL файл
command.name.change.repository.method.nullability=Изменить nullability метода repository
command.name.create=Создать {0}
command.name.create.changeset=Создать ChangeSet
command.name.create.tag=Создать тег {0}
command.name.generate.repository.method=Сгенерировать метод repository
command.name.override.repository.method=Переопределить метод repository
configurable.group.jpa.buddy.tools.settings.description=<html><body>JPA Buddy - инструмент разработки, предназначенный для автоматизации повседневной работы, связанной с моделированием данных в Java и Kotlin приложениях.
configurable.group.jpa.buddy.tools.settings.display.name=JPA Buddy
configure.editor.header.and.tool.windows=Настроить панель инструментов редактора и окна инструментов
continue=Продолжить
copy=Копировать
could.not.parse.repository.method.name=Не удалось разобрать имя метода repository.\nПроверьте, соответствует ли "{0}" соглашению об именовании методов Spring Data.
create=Создать
create.db.connection=Создать подключение к БД
db.connection.0.has.been.created=Подключение к БД "{0}" создано
db.driver.version=Версия драйвера
ddl.generate.in.existing.file.feature.description=С помощью этой функции вы можете генерировать DDL-операторы для ваших JPA-сущностей всего несколькими кликами. Она может генерировать скрипты инициализации для создания схемы базы данных с нуля или diff DDL для обновления существующей базы данных до актуального состояния в соответствии с JPA-сущностями. Кроме того, эта функция полезна как альтернатива подверженному ошибкам свойству spring.jpa.hibernate.ddl-auto. Используя операции JPA Buddy, вы получаете полный контроль над DDL перед выполнением, правильное сопоставление типов Java -> DB, поддержку атрибутных конвертеров и маппинга типов Hibernate, генерацию операторов drop и многое другое.
default.beans.inject.strategy=Стратегия внедрения Bean по умолчанию
default.beans.inject.strategy.constructor=Создавать final поля для Bean и инициализовать через конструктор класса
default.beans.inject.strategy.field=Создавать поля для Bean с аннотацией @Autowired
default.beans.inject.strategy.setter=Создавать поля для Bean и setter-методы с аннотацией @Autowired
default.repository.name.suffix=Суффикс имени repository по умолчанию
delete=Удалить
delete.db.persistenceUnit=Удалить persistence unit "{0}"?
designer.settings=Настройки дизайнера
designers=Дизайнеры
designers.changelog=Changelog Liquibase
designers.entity=JPA Entity
designers.repository=Spring Data Repository
designers.sql=Тип SQL файла
detect.dataSource.not.found=<html>JPA Buddy не нашел конфигурацию источника данных в файлах свойств. Помните, что JPA Buddy может обнаруживать подключения только для <a href\="https\://www.jetbrains.com/help/idea/jpa-buddy-database-connections.html" target\="_blank">поддерживаемых баз данных</a>.</html>
detected.data.sources=Обнаруженные источники данных
dialog.message.entity.projectionTypeInvalid=Недопустимый тип сущности/проекции\!
dialog.message.this.not.valid.length=Недопустимая длина
dialog.message.validation.attributeOverridesHaveEmptyValues=Переопределения атрибутов содержат пустые значения
dialog.message.validation.columnHaventSpecified=Столбец не указан
dialog.message.value.length.must.be.between.symbols=Длина значения должна быть от 1 до {0} символов
dialog.title.attribute.overrides=Переопределения атрибутов
dialog.title.choose.attributes.to.concatenate=Выберите атрибуты для конкатенации
dialog.title.choose.attributes.to.include=Выберите атрибуты для включения
dialog.title.create.choice.constraint.index=Создать {0, choice, 0\#ограничение|1\#индекс}
dialog.title.delete=Удаление
dialog.title.entity.projection.type.migration=Миграция типа сущности/проекции
dialog.title.new.spring.projection=Новая Spring проекция
dialog.title.spring.auditing=Spring аудит
discard=Отменить
done=Изменения сохранены
driver.class=Класс драйвера
dto.and.mapper.feature.description=DTO критически важны для веб-приложений, но их реализация приводит к шаблонному коду. Десятки классов, практически копирующих ваши сущности, каждый со своим маппером. С помощью функции <b>генерации DTO</b> вы можете сэкономить время на рутинной работе. Вы можете создавать DTO и MapStruct мапперы на основе определений JPA-сущностей, но это еще не все\! Со временем сущности могут меняться, и вам нужно соответственно изменять DTO. JPA Buddy решает и эту проблему. Он позволяет <b>синхронизовать сущности с их DTO</b> и наоборот. Кроме того, JPA Buddy предоставляет операцию <b>генерации JPA-сущностей из POJO</b>, помогая генерировать JPA-сущности из любого java/kotlin класса. Эта функция может быть полезна, если вы разрабатываете приложение по принципу API-first\: сначала определяете DTO для API, а затем реализуете модель данных.
dto.class.comment.help.tooltip=<html>Переменная <b>ENTITY_FQN</b> - полное имя сущности, на основе которой создаётся DTO.</html>
dto.comment.description=<html>Регулярное выражение для комментария-ссылки позволяет JPA Buddy связывать DTO с их JPA-сущностями. Для указания плейсхолдера FQN целевой сущности в комментарии используйте паттерн <b>(?\\&lt;entity\\&gt;.*)</b>.<br><br>Таким образом, если регулярное выражение определено как <b>A DTO for the {@link (?.*)} entity.</b>, оно будет разобрано в следующем комментарии\: <i>//A DTO for the {@link io.jpabuddy.demo.entities.Project} entity.</i>.<br><br>Когда поле пустое, функция отключена.</html>
dto.comment.regexp=Регулярное выражение для комментария-ссылки
dto.name.pattern.description=<html>Если вы используете строгое соглашение об именовании между JPA-сущностями и DTO, вы можете объявить его здесь. Это позволяет JPA Buddy связывать DTO с их JPA-сущностями.<br><br>Для указания плейсхолдера простого имени класса целевой JPA-сущности используйте паттерн <b>(?\\&lt;entity\\&gt;.*)</b>. Например, (?.*)Dto означает, что класс MyEntityDto будет рассматриваться как DTO для MyEntity.<br><br>Когда поле пустое, функция отключена.</html>
dto.name.pattern.regexp=Регулярное выражение для имени класса
duplicate.method.name=Метод с именем ''{0}'' уже определен в repository
edit=Редактировать
editor.toolbar=Панель инструментов редактора
editorMode=Режим редактора
editorMode.enable=Включить минималистичный режим
enable.completion=Умное автодополнение
entity.attributes.from.dto=Сгенерировать атрибуты сущности из DTO
entity.listener=Entity Listener
entity.listeners=Entity Listeners
feature.available.only.with.subscription=Эта функция доступна только в IntelliJ ИСРA Ultimate Edition
field.exists=Поле с таким именем уже существует
field.required=Поле ''{0}'' обязательно
fixes.createCustomEntity=Создать JPA Entity…
fixes.createMappedSuperclassEntity=Создать JPA MappedSuperclass "{0}"
fixes.createMissingAttribute=Создать отсутствующий атрибут
flyway.diff.feature.description=Генерация версионных миграций Flyway - очень полезная функция, которая может сэкономить много времени в повседневной работе. Используя эту функцию, вы можете автоматически генерировать миграции, содержащие DDL, необходимый для обновления базы данных в соответствии с вашей JPA-моделью. Такие миграции Flyway с diff DDL могут быть сгенерированы путем сравнения JPA-сущностей с одной базой данных, двумя базами данных или даже JPA-сущностей из одной ветки СКВ с сущностями из другой ветки СКВ, что полезно, когда у вас нет доступа к целевой базе данных.
flyway.init.feature.description=Операция инициализации схемы Flyway помогает разработчикам генерировать схему базы данных с нуля. Она может использовать ваши JPA-сущности или существующую базу данных в качестве источника. В результате вы получаете версионную миграцию Flyway, содержащую DDL, необходимый для инициализации схемы. Эта функция полезна, если вы интегрируете Flyway в существующее приложение или решаете сгенерировать единый скрипт для инициализации базы данных вместо запуска множества старых миграций. Кроме того, она может помочь в настройке новой среды разработки или тестования.
follow.this.link.to.watch.feature=<a href\="{0}">Посмотрите это короткое видео</a>, чтобы увидеть функцию в действии.
following.licence.options=Вы можете включить эту функцию следующими способами\: <ol><li>Если вы еще не пробовали IntelliJ ИСРA Ultimate, вы можете <a href\="https\://www.jetbrains.com/lp/idea-extended-trial/\#\:~\:text\=90%2Dday%20Trial%20for%20Your%20Whole%20Team&text\=Complete%20a%20short%20form%20and,a%20set%20of%20simple%20criteria">запросить пробную версию прямо сейчас для себя или даже всей команды</a></li><li>Если вы студент или преподаватель, преподаете или изучаете курс или разрабатываете проект с открытым исходным кодом, вы можете <a href\="https\://www.jetbrains.com/idea/buy/?section\=discounts&billing\=yearly">получить IntelliJ ИСРA Ultimate бесплатно</a></li><li><a href\="https\://www.jetbrains.com/idea/buy/?section\=commercial&billing\=yearly">Купить IntelliJ ИСРA Ultimate</a></li></ol>
from.db=Из базы данных
from.dto=Из DTO
generate.ddl.by.entities=С помощью операции "Генерировать DDL по сущностям" разработчики могут преобразовывать сущности в DDL-операторы всего несколькими кликами. Она может генерировать скрипты инициализации для создания схемы базы данных с нуля или diff DDL для обновления существующей базы данных до актуального состояния в соответствии с JPA-сущностями. Кроме того, эта функция полезна как альтернатива подверженному ошибкам свойству spring.jpa.hibernate.ddl-auto. Используя операции JPA Buddy, вы получаете полный контроль над DDL перед выполнением, правильное сопоставление типов Java -> DB, поддержку атрибутных конвертеров и маппинга типов Hibernate, генерацию операторов drop и многое другое.
generate.ddl.from.run.console.feature.description=Это исключение возникает, когда ваши JPA-сущности не могут быть правильно сопоставлены с таблицами и полями базы данных. JPA Buddy предоставляет очень полезную функцию для легкого решения этой проблемы. Генерируйте DDL прямо из stack trace для устранения различий между JPA-сущностями и базой данных\! Затем проверьте сгенерированный скрипт, запустите его и перезапустите приложение. Та же проблема может быть решена путем пересоздания или обновления базы данных с помощью свойств ddl-auto или hbm2ddl. Однако это решение имеет серьезные ограничения. Посмотрите видео ниже, чтобы узнать об этих ограничениях и лучшем решении, предлагаемом JPA Buddy.
generate.equals.and.hashcode.empty.fields=В сущности нет атрибутов для включения в equals() и hashCode()
generate.equals.and.hashcode.empty.fields.title=Поля не найдены
generateEntity.resolveAttributeInfo=Разрешение информации об атрибуте
go.to.reference.element=Перейти к ссылочному элементу
group.com.intellij.jpb.group.otherNewGroup.text=Другое
group.com.intellij.jpb.structure.toolbar.new.flyway.text=Все новые операции
group.com.intellij.jpb.structure.toolbar.new.text=Все новые операции
hsql.unsupported.rename.sequence=HSQL не поддерживает переименование последовательностей
hsql.unsupported.rename.view=HSQL не поддерживает переименование представлений
ide=ИСР
inspection.ConverterSpecifiedIncorrectlyInspection=Тип конвертера не соответствует типу атрибута
inspection.ConverterSpecifiedIncorrectlyInspectionExt=Тип конвертера {0} не соответствует типу атрибута {1}
inspection.LombokDataInspection=Использование @Data не рекомендуется для JPA-сущностей. Это может привести к серьезным проблемам с производительностью и потреблением памяти.
inspection.LombokEqualsInspection=Использование @EqualsAndHashCode не рекомендуется для JPA-сущностей. Это может привести к серьезным проблемам с производительностью и потреблением памяти.
inspection.LombokToStringIncludeInspection=Это поле загружается лениво, но включено в @ToString. Это может привести к проблемам с производительностью и потреблением памяти.
inspection.LombokToStringInspection=@ToString включает ленивозагружаемые поля и/или ассоциации. Это может привести к проблемам с производительностью и потреблением памяти.
inspection.NoArgsConstructorInspection=Сущность должна иметь public или protected конструктор без аргументов
inspection.cantFindHibernateCustomType=Не удаётся найти пользовательский тип Hibernate
inspection.cantFindInverseAttribute=Не удаётся найти обратный атрибут
inspection.cantFindRelatedAttribute=Не удаётся найти связанный атрибут
inspection.compositeIdClassSerializableInspection=Класс составного ID должен реализовывать Serializable
inspection.converterNotAnnotated=JPA конвертер должен быть аннотирован @Converter
inspection.dataClassRequiredEqualsAndHashCode=Реализация equals(), hashCode() и toString() для data class не рекомендуется для JPA-сущностей. Они могут привести к серьезным проблемам с производительностью и потреблением памяти.
inspection.dataClassRequiredEqualsAndHashCode.key=Data class не рекомендуется для JPA-сущностей.
inspection.entityIdMissing=У сущности отсутствует первичный ключ
inspection.entityIdMissing.fix.createEntityId=Добавить ID атрибут
inspection.group.key.jpbCommon=JPA Buddy
inspection.incompatibleTableAnnotation=Аннотация @Table не должна использоваться со стратегией наследования SINGLE_TABLE.
inspection.message.unknown.column=Неизвестный столбец {0}
inspection.missingConverter=Атрибуты с неподдерживаемым типом должны быть помечены как @Transient или иметь объявление пользовательского типа или конвертера
inspection.serializable.annotator.message=Класс ''{0}'' должен реализовывать ''Serializable''
inspection.toManyVersionAnnotations=Только одно поле или свойство может быть помечено как Version в каждом классе
inspector=Инспектор
inspector.tool.window=Окно инструмента инспектора
intention.create.dto.confirmation.message=У этой сущности нет связанного DTO. Хотите создать новый?
intention.create.dto.confirmation.title=DTO не найден
intention.showInspector=Показать всплывающее окно инспектора
invalid.method.name=Недопустимое имя метода
jpa.buddy.generation=JPA Buddy
jpa.entity.from.pojo=Сгенерировать JPA Entity из POJO
jpa.structure=JPA Explorer
jpa.structure.updated=Дерево JPA Explorer обновлено
jpaBuddy.title=JPA Buddy
label.index=Индекс
label.migrate.entity.projection.type.repositoryMethodTo=Мигрировать тип сущности/проекции метода repository {0}"{1}" в
label.named.query=Named Query
liquibase.diff.feature.description=Генерация diff changelog Liquibase - очень полезная функция, которая может сэкономить много времени в повседневной работе. Используя эту функцию, вы можете автоматически генерировать changelog Liquibase, содержащий весь код, необходимый для обновления базы данных в соответствии с вашей JPA-моделью. Diff changelog может быть сгенерирован путем сравнения JPA-сущностей с одной базой данных, двумя базами данных или даже JPA-сущностей из одной ветки СКВ с сущностями из другой ветки СКВ, что полезно, когда у вас нет доступа к целевой базе данных.
liquibase.diff.in.existing.file.feature.description=Генерация diff changelog Liquibase - очень полезная функция, которая может сэкономить много времени в повседневной работе. Используя эту функцию, вы можете автоматически генерировать changelog Liquibase, содержащий весь код, необходимый для обновления базы данных в соответствии с вашей JPA-моделью. Diff changelog может быть сгенерирован путем сравнения JPA-сущностей с одной базой данных, двумя базами данных или даже JPA-сущностей из одной ветки СКВ с сущностями из другой ветки СКВ, что полезно, когда у вас нет доступа к целевой базе данных.
liquibase.init.feature.description=Операция инициализации схемы changelog Liquibase помогает разработчикам генерировать схему базы данных с нуля. Она может использовать ваши JPA-сущности или существующую базу данных в качестве источника. В результате вы получаете changelog Liquibase, содержащий все команды, необходимые для инициализации схемы. Эта функция полезна, если вы интегрируете Liquibase в существующее приложение или решаете сгенерировать единый скрипт для инициализации базы данных вместо запуска множества старых changelog'ов. Кроме того, она может помочь в настройке новой среды разработки или тестования.
mapper.naming=Шаблон именования
mapper.naming.collection.strategy=Стратегия именования маппинга для коллекций
mapper.naming.hint=Используйте ${ENTITY_NAME} и ${DTO_NAME} для вставки соответствующих имен классов в имя метода
mapper.naming.to.dto=Из Entity в DTO
mapper.naming.to.entity=Из DTO в Entity
mapper.naming.update=Обновить Entity из DTO
mapping.methodAlreadyExists=В классе уже существует метод с таким же именем и другой сигнатурой
mysql.unsupported.sequence=Последовательности не поддерживаются в MySQL. Используйте AUTO_INCREMENT.
new=Новый
no=Нет
notification.content.attribute.must.be.embedded.type=Атрибут должен быть встраиваемым типом\!
notification.content.class.not.found.or.it.not.entity=Класс ''{0}'' не найден или не является сущностью
notification.content.containing.file.not.found=Содержащий файл не найден
notification.content.entity.not.found=Сущность не найдена
notification.content.errorMessage={0}<br/> Подробности см. в лог-файле ({1})
notification.content.incorrect.property.type.for.object.editor=Некорректный тип свойства для редактора объектов\!
notification.content.not.implemented=Не реализовано\!
notification.content.psi.file.not.found.in.jpa.palette=PSI файл не найден в панели JPA
ok=OK
open=Открыть
palette=Панель
palette.tool.window=Панель инструментов
popup.content.dragging.from.palette.not.available.indices=Перетаскивание из панели недоступно во время обновления индексов
popup.title.choose.repository.class=Выбрать класс репозитория
popup.title.inspector=Инспектор
popup.title.jpa.utilities=Утилиты JPA
popup.title.lifecycle.callback=Lifecycle callback
popup.title.liquibase.item=Элемент Liquibase
popup.title.repository.method=Метод репозитория
progress.title.create.dto.class=Создание DTO класса...
project.error.caption=Ошибка JPA Buddy
project.persistenceUnit.caption=JPA Buddy
project.persistenceUnit.changeSettings=Изменить настройки
project.persistenceUnit.initialized=Persistence unit по умолчанию инициализован
projection.class.comment.help.tooltip=<html>Переменная <b>ENTITY_FQN</b> - полное имя сущности, для которой создаётся проекция.</html>
projection.comment.description=<html>Регулярное выражение для комментария позволяет JPA Buddy связывать проекции с их JPA-сущностями. Для указания плейсхолдера FQN целевой сущности в комментарии используйте паттерн <b>(?\\&lt;entity\\&gt;.*)</b>.<br><br>Так, если регулярное выражение определено как <b>A Projection for the {@link (?.*)} entity.</b>, оно будет распознано в комментарии\: <i>//A Projection for the {@link io.jpabuddy.demo.entities.Project} entity.</i>.<br><br>Функция отключена, если поле пустое.</html>
projection.name.pattern.description=<html>Если вы используете строгие соглашения об именовании между JPA-сущностями и проекциями, вы можете объявить их здесь. Это позволяет JPA Buddy связывать проекции с их JPA-сущностями.<br><br>Для указания плейсхолдера простого имени класса целевой JPA-сущности используйте паттерн <b>(?\\&lt;entity\\&gt;.*)</b>. Например, (?.*)Prj означает, что класс MyEntityPrj будет рассматриваться как проекция для MyEntity.<br><br>Функция отключена, если поле пустое.</html>
properties.calculation.error=Ошибка вычисления свойств
properties.calculation.error.message=Сообщение об ошибке
properties.calculation.logForDetails=См. лог для подробностей
re.columns.from.db.feature.description=Если вы предпочитаете сначала проектировать базу данных, а затем писать JPA-сущности для маппинга таблиц, эта функция будет очень удобной и сэкономит много времени в повседневной работе\! С помощью операции "Колонки из БД" вы сможете преобразовать выбранные свойства в поля JPA-сущности. Она также поддерживает маппинг ассоциаций ManyToOne, OneToOne, OneToMany и ManyToMany. Лучше всего то, что она не регенерирует всю сущность, а добавляет новые поля к существующему объявлению сущности.
re.entities.from.db.feature.description=Если вы предпочитаете сначала проектировать базу данных, а затем писать JPA-сущности для маппинга таблиц, или если вы разрабатываете приложение на существующей базе данных, эта функция будет очень удобной и сэкономит много времени в повседневной работе\! С помощью операции "Генерировать сущности из БД" вы можете преобразовать выбранные таблицы базы данных и их свойства в JPA-сущности всего несколькими кликами, включая ограничения, индексы, свойства колонок и т.д. Она также поддерживает маппинг ассоциаций ManyToOne, OneToOne, OneToMany и ManyToMany. Лучше всего то, что она не регенерирует всю сущность, а добавляет новые поля к существующему объявлению сущности.
refactoring.rename.accessors=Переименовать аксессоры
refactoring.rename.dto.fields=Переименовать поля DTO
regexp.should.have.one.group={0} должен иметь одну группу с именем "{1}", например (?<{1}>.*)
remove=Удалить
repository.equality.condition.form=Форма условия равенства
repository.no.selected.item=Пожалуйста, выберите хотя бы один элемент из {0}
repository.no.selected.item.warning=Пожалуйста, выберите хотя бы один элемент
repository.other.conditions.form=Форма других условий
repository.verb.conditions.form=Форма глагольных условий
save=Сохранить
select.columns=Выбрать колонки
separator.class=Класс
separator.entity=Сущность
separator.item.name=Элемент-разделитель
separator.other=Другое
serializable.type=Serializable тип
show.all=Показать все
show.bean.injection.completion.on=Показывать автодополнение для внедрения Bean\:
showDiff=Показать изменения
smart.bean.injection=Автоопределение типа внедрения Bean
smart.bean.injection.help=Автоматически определять тип внедрения Bean на основе ранее внедренных Bean для выбранного класса. Если нет внедренных Bean, будет использована "Стратегия внедрения Bean по умолчанию"
smart.bean.injection.injectToBeanMethodSignature=Использовать параметры метода для внедрения в @Bean методы
smart.completion.availability.disable.caption=Отключить
smart.completion.availability.enableCreation.caption=Показывать опции на основе существующего кода и предложений
smart.completion.availability.enableCreation.example=Например, показывать несуществующие Spring Data JPA репозитории в списке автодополнения,<br>если они соответствуют существующим JPA-сущностям<a href\="https\://www.jetbrains.com/help/idea/jpa-buddy-coding-assistance.html\#code-completion">Подробнее</a>
smart.completion.availability.enableExisting.caption=Показывать опции на основе существующего кода
smart.completion.availability.enableExisting.example=Например, опции DTO, маппированные на сущности, и опции поиска на основе существующих<br>MapStruct мапперов и Spring Data JPA репозиториев
spring.data.repository=Spring Data репозиторий
sql.empty=Сгенерированный SQL пуст
start.typing.for.search=Начните вводить для поиска
structure.mode.none=Невидимый
structure.mode.none.help=Окно инструментов "JPA Explorer" полностью скрыто. Вы не можете получить к нему доступ откуда-либо.
structure.mode.project=Опция в окне Project
structure.mode.project.help="JPA Explorer" доступен как альтернативное представление проекта. Для доступа откройте окно Project и выберите "JPA Explorer" из выпадающего меню.
structure.mode.separate=Отдельное окно инструментов
structure.mode.separate.help=JPA Explorer отображается как отдельное окно инструментов.
structure.mode.unified=Unified окно инструментов
structure.mode.unified.help="JPA Explorer" отображается как вкладка в unified окне инструментов. Для доступа откройте окно инструментов JPA Buddy и выберите вкладку "Structure".
subscription.request.license=Лицензия JPA Buddy
subscription.request.licenseeEmail=Email лицензиата
subscription.request.link=<a href\="requestLicense">Перейдите по ссылке для получения лицензии.</a>
subscription.request.success=Спасибо за заявку\! Запрос на лицензию IntelliJ ИСРA Ultimate успешно отправлен.
subscription.request.title=Лицензия IntelliJ ИСРA Ultimate
subscription.request.topLabel=Мы заметили, что вы используете IntelliJ ИСРA Community Edition с действующей лицензией JPA Buddy, срок действия которой скоро истекает. Как вы знаете, JPA Buddy был приобретен JetBrains в 2023 году. С тех пор все платные функции JPA Buddy были перенесены в IntelliJ ИСРA Ultimate. Чтобы обеспечить вам дальнейший доступ к платным функциям JPA Buddy, мы предлагаем вам шестимесячную лицензию IntelliJ ИСРA Ultimate.
subscription.requestUltimate=Запрос лицензии IntelliJ ИСРA Ultimate
subscription.requestUltimate.description=Вы имеете право на получение шестимесячной лицензии IntelliJ ИСРA Ultimate. Пожалуйста, нажмите ниже, чтобы запросить лицензию.
subscription.required=Доступно в IntelliJ ИСРA Ultimate Edition
subscription.sendRequest=Запросить лицензию
suppress.LombokBuilderAllArgsInspection=Lombok @Builder требует соответствующего конструктора для этого класса
symbols=Символы
text.comment=Комментарий
toolWindow.infoDialog.text=Минималистичный режим призван максимально снизить отвлекающие факторы для разработчика. Если вам нравится иметь все под рукой, вам это понравится\!<br/><ul><li>Окно инструментов JPA Buddy будет скрыто;<li>JPA Explorer будет доступен в окне инструментов Project вместе с другими опциями (Project, Packages и т.д.);<li>Все операции из JPA Designer доступны в меню <b>Generate</b> (<b>{0}</b>), меню <b>Context Actions</b> (<b>{1}</b>) и на <b>панели инструментов редактора</b>;<li>Кроме того, вы можете вызвать JPA Designer, нажав "Add Keyboard Shortcut" или позже привязав любимые сочетания клавиш в <b>{2} -> Keymap</b>.<li>Вы также можете указать <a href\="\#designer-settings">пользовательские настройки видимости</a> для этого окна инструментов;</li></ul>Ознакомьтесь с нашим <a href\="https\://www.jetbrains.com/help/idea/jpa-buddy-minimalistic-mode.html">руководством</a> по минималистичному режиму.
tooltip.choose.class=Выбрать класс
tooltip.go.to=Перейти к
tooltip.hibernate.custom.type=Пользовательский тип Hibernate
tooltip.jpa.converter=JPA конвертер
tooltip.navigate.to=Перейти к {0}
tooltip.show.entity.attribute=Показать атрибут сущности
tooltip.show.usages=Показать использования
tree.dto.and.projection=DTO и проекции
unresolved.reference=Неразрешённая ссылка\: {0}
use.lombok=Использовать Lombok
validation_error=Ошибка валидации
view.mode=Режим просмотра
view.mode.custom=Пользовательский
view.mode.custom.help=Выберите что и как вы хотите видеть.
view.mode.extensive=Расширенный
view.mode.extensive.help=Показывает окно инструментов JPA Buddy и все его содержимое. Полезно для тех, кто только начинает работать с JPA. Все популярные опции всегда перед глазами, поэтому легче учиться и выбирать правильные опции для генерации и модификации кода.
view.mode.minimalistic=Минималистичный
view.mode.minimalistic.help=Не показывает окно инструментов JPA Buddy. JPA Explorer доступен как опция в окне инструментов Project. Опции генерации кода доступны через стандартное сочетание клавиш Generate (<b>{0}</b>) или на панели инструментов Editor. JPA Inspector доступен как всплывающее окно и может быть вызван через намерения или сочетание клавиш (<b>{1}</b>). Полезно для тех, кто предпочитает использовать сочетания клавиш вместо визуальных инструментов.
warning=Предупреждение
yes=Да