alt.enter.invert.condition=Инвертировать условие
alt.enter.remove.parameter=Удалить параметр
basic.completion.activate=Если автодополнение не предлагается автоматически, вызовите его вручную, нажав {0}.
basic.completion.choose.first=Лучшее совпадение выделено синим цветом в списке автодополнения\: выберите его, нажав {0}.
basic.completion.choose.item=Выберите {0} в списке автодополнения и нажмите {1}.
basic.completion.complete=Вы можете автоматически вставить все необходимые синтаксические элементы (скобки, фигурные скобки, точки с запятой и т.д.) и перейти в позицию, где можно начать ввод следующего выражения. Нажмите {0}, чтобы завершить это выражение.
basic.completion.lesson.name=Автодополнение кода
basic.completion.start.typing=По умолчанию <ide/> предлагает варианты автодополнения во время ввода. Начните вводить {0} прямо там, где находится каретка, и вы увидите подходящие предложения.
comment.block.comment=Чтобы закомментировать блок комментарием {0}, выделите блок кода и нажмите {1}.
comment.block.uncomment=Чтобы раскомментировать блочный комментарий, установите каретку в любое место закомментированного блока и нажмите {0}.
comment.lesson.name=Комментирование строк и блоков кода
comment.line.uncomment.several.lines=Чтобы раскомментировать несколько строк, выделите все закомментированные строки и нажмите {0}.
comment.line.uncomment.that.line=Раскомментируйте закомментированную строку той же комбинацией клавиш\: установите каретку в любое место этой строки и нажмите {0}.
docker.balloon.right.click.project=Давайте добавим поддержку Docker в проект {0}. Щёлкните правой кнопкой мыши и выберите <strong>Добавить</strong> | {1}
docker.check.out.dockerfile={0} сгенерировал Dockerfile со всеми необходимыми инструкциями для вашего проекта
docker.click.debug=Нажмите {0} или щёлкните {1}, чтобы начать отладку
docker.lesson.name=Основы Docker
docker.module.description=Начало работы с Docker в Rider
docker.module.name=Docker
docker.open.settings=Прежде чем начать, давайте убедимся, что демон Docker запущен на вашем компьютере. Откройте настройки, нажав {0}, или щелкнув {1} и выбрав соответствующий пункт
docker.run=Нажмите {0} или щёлкните эту кнопку, чтобы запустить проект в контейнере Docker
docker.select.run.config=Чтобы запустить проект в контейнере Docker, выберите конфигурацию запуска Dockerfile
extract.variable.choose.name=Укажите имя переменной или оставьте предложенное. Нажмите {0} еще раз, чтобы завершить рефакторинг.
extract.variable.choose.type=Выберите, использовать ли ''var'' или явный тип для новой переменной, и нажмите {0}.
extract.variable.replace.all=Выбранное выражение встречается в примере кода 3 раза. Выберите соответствующий пункт, чтобы заменить все вхождения.
file.structure.help.link=Структура файла и другие команды контекстной навигации
file.structure.lesson.name=Члены и структура файла
file.structure.open.popup=В большом файле сложно ориентироваться; хороший способ начать - просмотреть его члены. Нажмите {0}, чтобы увидеть список всех членов файла.
file.structure.request.prefixes=Допустим, вы хотите найти метод, содержащий слова {0} и {1} в своем имени. Введите {2} (префиксы искомых слов), чтобы отфильтровать список членов.
file.structure.toolwindow=Вы также можете просматривать структуру файла в отдельном инструментальном окне\: нажмите {0}, чтобы открыть его.
got.it.balloon.button.text=Далее
help.refactor.this=Меню "Рефакторинг"
onboarding.module.description=Начальные шаги по настройке и использованию ИСР
onboarding.module.name=Начало работы
onboarding.tour.lesson.name=Ознакомительный тур
refactoring.menu.extract.interface=Давайте выберем рефакторинг {0}, который помогает быстро создать новый интерфейс на основе членов текущего класса.
refactoring.menu.extract.interface.dialog=Укажите имя для нового интерфейса и отметьте флажками методы, которые должны быть в нем объявлены, затем нажмите <strong>Далее</strong>, чтобы завершить рефакторинг.
refactoring.menu.finish=Попробуйте нажать {0}, когда каретка находится на члене класса, переменной или строковом литерале, чтобы увидеть доступные рефакторинги в разных контекстах.
rename.dialog.title=Переименование
rename.epilogue=Обратите внимание, что рефакторинг не затронул свойство <code>Name</code> класса <strong>Person</strong>. Его безопасно использовать, даже если в том же контексте есть символы с похожими именами.
rename.press.rename=Рефакторинг <strong>Переименование</strong> автоматически обновляет все ссылки на переименованный символ. Вы можете начать рефакторинг из объявления или любого использования символа. Нажмите {0}, чтобы переименовать свойство {1} класса <code>Car</code>.
rename.type.new.name=Введите новое имя для этого свойства (например, {0}) и нажмите {1}.
rider.onboarding.alt.enter={0} - это ваша главная комбинация клавиш в редакторе. Например, когда каретка находится на параметре {1}, нажмите ее, чтобы удалить параметр и обновить использования.
rider.onboarding.alt.enter.menu=Перед применением исправления {0} рассмотрите другие полезные действия, доступные в этом всплывающем окне.
rider.onboarding.balloon.open.file=Дважды щёлкните, чтобы открыть {0}
rider.onboarding.balloon.open.learn.window=Переключитесь в окно инструмента {0}, чтобы продолжить этот урок
rider.onboarding.balloon.project.directory=Дважды щёлкните узел решения, затем разверните проект <strong>Learning</strong>
rider.onboarding.change.ui.settings=Для этого урока Rider изменит некоторые настройки интерфейса на значения по умолчанию. Ваши настройки будут восстановлены после завершения или выхода из урока.
rider.onboarding.debug.window.toolbar=Здесь вы найдете все действия отладки. Сейчас нажмите {0} или щёлкните {1}, чтобы возобновить выполнение программы и дать ей выполниться до конца.
rider.onboarding.feedback.system.current.sdk=Текущий SDK\:
rider.onboarding.feedback.system.found.sdks=Найденные SDK\:
rider.onboarding.finish=На этом урок закончен. Теперь вы можете выбрать <strong>Файл</strong> | <strong>Новое решение</strong> в главном меню, чтобы начать свое собственное решение, или <strong>Файл</strong> | <strong>Открыть</strong>, чтобы открыть существующее.
rider.onboarding.online.help=Онлайн-справка
rider.onboarding.project.view.description=Нажмите на значок боковой панели или {0}, чтобы получить доступ к файлам решения
rider.onboarding.resume=Нажмите {0} или щёлкните {1}, чтобы возобновить выполнение программы и дать ей выполниться до конца
rider.onboarding.run.configuration.widget=Здесь вы можете настраивать и запускать конфигурации запуска. Нажмите {0} или щёлкните {1}, чтобы начать отладку с текущей конфигурацией.
rider.onboarding.search.everywhere=Чтобы найти что угодно, нажмите {0} дважды или щёлкните {1}
rider.onboarding.search.everywhere.query=Есть несколько вкладок, ограничивающих поиск файлами, действиями и т.д. Но сейчас останемся на вкладке <strong>Все</strong> и введем {0}.
rider.onboarding.search.everywhere.result=Запрос совпал с {0} по начальным буквам составного имени. Выберите его в списке и нажмите {1}.
rider.onboarding.settings=Последнее - это где настраивать все. Нажмите {0} или щёлкните {1} и выберите соответствующий пункт
rider.onboarding.settings.save=Чтобы применить изменения, нажмите {0}
rider.onboarding.settings.search=Используйте поле поиска для поиска конкретных настроек
rider.onboarding.settings.theme=Например, вы можете переключаться между светлой и темной темами на странице {0} | {1}
rider.onboarding.toggle.breakpoint=Давайте отладим нашу программу. Сначала установите точку останова\: щёлкните номер строки или установите каретку на строку и нажмите {0}.