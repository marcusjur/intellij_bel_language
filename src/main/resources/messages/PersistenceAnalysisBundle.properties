inspection.jvm.languages.group.name=JVM языки
jvm.inspections.sql.source.to.sink.flow.display.name=Небезопасная строка используется как SQL
jvm.inspections.sql.source.to.sink.flow.too.complex=Слишком сложно проверить безопасность строки, используемой в SQL
jvm.inspections.sql.source.to.sink.flow.unsafe=Строка, используемая в SQL, может быть небезопасной
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.final.field=Считать private или final поля в том же классе безопасными
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.final.field.comment=Если включено, то private или final поля считаются безопасными, иначе они будут обрабатываться согласно правилам
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.methods=Считать параметры private методов безопасными
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.methods.comment=Если отключено, параметры private методов будут считаться неизвестными
jvm.inspections.sql.source.unsafe.to.sink.flow.check.warn.if.complex=Сообщать о строках, которые слишком сложны для проверки
jvm.inspections.sql.source.unsafe.to.sink.flow.check.warn.if.complex.comment=Может быть полезно проверять такие строки вручную
jvm.inspections.sql.source.unsafe.to.sink.flow.safe.class=Безопасные классы\:
jvm.inspections.sql.source.unsafe.to.sink.flow.safe.class.comment=Эти классы считаются содержащими только безопасные данные
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.annotations=Непомеченные аннотации\:
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.annotations.comment=Эти аннотации будут использоваться как '@Untainted' аннотации во время анализа
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.methods=Непомеченные методы\:
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.methods.comment=Эти методы считаются возвращающими только безопасные объекты