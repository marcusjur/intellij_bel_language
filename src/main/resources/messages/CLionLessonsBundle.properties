change.signature.dialog.title=Изменить сигнатуру
clion.assembly.compile.arguments=В верхней части вкладки ассемблера вы можете найти поле аргументов компилятора. Добавьте флаг {0} и нажмите {1}, чтобы обновить просмотр ассемблера
clion.assembly.help.link=Просмотр ассемблера
clion.assembly.invoke=При вызове {0}, <ide/> использует настройки компилятора из выбранной конфигурации для компиляции кода в ассемблер.
clion.assembly.invoke.context.menu=В <ide/> вы можете исследовать базовый ассемблерный код без запуска сеанса отладки. Щёлкните правой кнопкой мыши внутри текущего файла и выберите {0} из контекстного меню.
clion.assembly.lesson.name=Просмотр ассемблера для файлов
clion.assembly.note=Опция "Использовать синтаксис Intel" отключена для архитектур ARM и инструментария MSVC.
clion.assembly.options=Используйте меню "Опции" для переключения на синтаксис ассемблера x86 (Intel) и/или просмотра необработанного вывода с именами символов, но без специального синтаксиса
clion.assembly.preview=В предварительном просмотре вы можете увидеть, какой исходный код создает какой ассемблерный код
clion.basic.editing.module.description=Действия, помогающие редактировать код
clion.basic.editing.module.name=Редактирование кода
clion.change.signature.click.refactor=Нажмите кнопку "{0}", чтобы выполнить рефакторинг.
clion.change.signature.conclusion=Обратите внимание, что <ide/> соответственно скорректировал все места вызова, теперь передавая строковый литерал {0} в качестве второго параметра в {1}.
clion.change.signature.extract.parameter=Теперь нажмите {0}, чтобы использовать рефакторинг "Параметр".
clion.change.signature.help.link=Рефакторинг "Изменение сигнатуры"
clion.change.signature.lesson.intro=Рефакторинг "Изменение сигнатуры" объединяет несколько различных модификаций, которые можно применить к сигнатуре функции. Вы можете использовать этот рефакторинг для изменения имени функции и типа возвращаемого значения, а также для добавления, удаления и переупорядочивания параметров.\nПри изменении сигнатуры функции CLion ищет все использования функции и обновляет все вызовы, реализации и замены переопределений функции, которые можно безопасно изменить, чтобы отразить изменение.
clion.change.signature.lesson.name=Изменение сигнатуры
clion.change.signature.move.parameter.down=Переместите параметр {0} ниже параметра {1}, нажав кнопку "Вниз" или {2}.
clion.change.signature.next.button=Далее
clion.change.signature.open.dialog=В этом примере функция {0} ожидает назначение в качестве первого параметра и источник в качестве второго, что некоторые пользователи могут считать неинтуитивным. Давайте поменяем их местами.
clion.change.signature.open.dialog.press=Нажмите {0}, чтобы открыть диалог "Изменить сигнатуру".
clion.change.signature.refactor.button=Рефакторинг
clion.change.signature.select.parameter.1=Хотя "Изменение сигнатуры" позволяет выполнять множество различных изменений в одном диалоге, некоторые специфические рефакторинги, изменяющие сигнатуру функции, также имеют свои собственные специальные действия.
clion.change.signature.select.parameter.2=Рефакторинг <strong>Параметр</strong> позволяет преобразовать локальную переменную или выражение в параметр функции. В этом примере функция {0} выводит элементы диапазона, разделенные запятыми. Давайте превратим строку-разделитель в новый параметр.
clion.change.signature.select.parameter.3=Выделите строку-разделитель, нажав {0}.
clion.change.signature.type.new.parameter.name=<ide/> теперь превратил строковый литерал в новый параметр функции. Нам нужно только дать ему осмысленное имя. Введите {0}.
clion.change.signature.type.new.parameter.refactor=Нажмите {0}, чтобы выполнить рефакторинг.
clion.code.assistance.module.description=Узнайте, как использовать локальную историю и просмотр ассемблера, получать информацию о параметрах и предварительно просматривать быстрые всплывающие окна.
clion.code.assistance.module.name=Помощь при написании кода
clion.collapse.all.collapse=Если вы хотите свернуть все области в файле, нажмите {0}.
clion.collapse.all.expand=Аналогично, нажмите {0}, чтобы развернуть все доступные области.
clion.collapse.help.link=Развернуть или свернуть элементы кода
clion.collapse.hit.expand=Чтобы развернуть область кода, нажмите {0}.
clion.collapse.lesson.name=Сворачивание
clion.collapse.region.collapse=Вы можете свернуть любой выделенный фрагмент кода и создать для него пользовательскую область сворачивания, чтобы сделать его "сворачиваемым". Попробуйте выделить три переменные-члена в строках 6-8 и свернуть выделенное с помощью {0}.
clion.collapse.try.collapse=Иногда нужно свернуть фрагмент кода для лучшей читаемости. Попробуйте свернуть фрагмент кода с помощью {0}.
clion.comments.comment.block=Вы можете закомментировать блок кода. Например, давайте закомментируем выделенный блок, нажмите {0}.
clion.comments.comment.one.line=Закомментируйте любую строку с помощью {0}.
clion.comments.help.link=Расширенное редактирование
clion.comments.lesson.name=Добавление и удаление комментариев
clion.comments.uncomment.line=Раскомментируйте закомментированную строку той же комбинацией клавиш {0}
clion.completion.complete.statement=Нажмите {0}, чтобы завершить это выражение.
clion.completion.module.description=Позвольте ИСР дополнять ваш код. Попробуйте базовое, умное и другие типы автодополнения.
clion.completion.module.name=Автодополнение кода
clion.debug.lesson.name=Процесс отладки
clion.debug.workflow.evaluate.expression=Чтобы проверить финальное выражение, вы можете вычислить его. Давайте скопируем {0} и вставим его в выделенное поле в окне отладки.
clion.debug.workflow.exception.description=Программа выбрасывает исключение, и вы можете увидеть его в окне "Выполнение".
clion.debug.workflow.fix.error=О, в подстановке строки есть ошибка\! Давайте исправим её прямо сейчас. Удалите первый аргумент {0} из {1}.
clion.debug.workflow.lesson.name=Процесс отладки
clion.debug.workflow.rerun.debug=Давайте закончим отладку, нажав {0} или нажав {1} на панели инструментов.
clion.debug.workflow.step.into=Чтобы выяснить, что вызвало исключение, давайте зайдем внутрь текущего вызова. Нажмите {0} или нажмите "{1}" в окне отладки.
clion.essential.module.description=Откройте для себя самые важные возможности {0}
clion.essential.module.name=Основы
clion.extract.and.inline.lesson.name=Извлечение и встраивание
clion.extract.constant=Нажмите {0}, чтобы извлечь литеральное значение pi, используемое здесь для вычисления площади круга, в константу.
clion.extract.constant.help.link=Извлечь константу
clion.extract.constant.intro=<ide/> предлагает множество полезных рефакторингов для вашего C++ кода. Например, рефакторинг <strong>Извлечь константу</strong> помогает избавиться от жестко закодованных констант, делая код более читаемым и поддерживаемым.
clion.extract.constant.replace.occurrences=Поскольку один и тот же числовой литерал встречается несколько раз, <ide/> предлагает вам возможность заменить все вхождения или только это. Выберите "{0}".
clion.extract.constant.replace.occurrences.item=Заменить все 2 вхождения
clion.extract.extend.selection=Выделите выражение {0}, нажав {1} три раза.
clion.extract.function=Теперь нажмите {0}, чтобы извлечь выделенный код в функцию.
clion.extract.function.button.name=Извлечь
clion.extract.function.click.extract=Теперь нажмите <strong>Извлечь</strong>, чтобы выполнить рефакторинг.
clion.extract.function.click.inline=Нажмите кнопку <strong>Встроить</strong> для подтверждения.
clion.extract.function.conclusion=Вы также можете использовать рефакторинг "Встроить" для встраивания констант и макросов препроцессора.
clion.extract.function.dialog=Диалог "Извлечь функцию" позволяет указать место объявления, тип возвращаемого значения и имя новой функции.
clion.extract.function.inline.button.name=Встроить
clion.extract.function.intro=Код теперь выглядит намного лучше, но мы можем применить еще больше рефакторингов. <ide/> позволяет извлекать любые выражения или фрагменты кода в отдельную функцию с помощью <strong>Извлечь функцию</strong>. Для выражения в следующей строке давайте извлечем его в отдельную функцию вместо локальной переменной.
clion.extract.function.new.function.name=Установите имя {0}.
clion.extract.inline=Нажмите на "{0}" и нажмите {1}.
clion.extract.inline.done=<ide/> теперь снова встроил {0}, отменив рефакторинг извлечения функции, который мы сделали ранее.
clion.extract.inline.intro=<ide/> теперь вынес вычисление длины окружности в новую функцию. Однако иногда вы хотите сделать обратное\: избавиться от функции и встроить её тело в место вызова. Для этого в <ide/> есть рефакторинг <strong>Встроить</strong>, который является противоположностью рефакторинга "Извлечь функцию".
clion.extract.lesson.name=Извлечение переменной
clion.extract.new.constant.name=Введите {0} в качестве имени новой константы и нажмите {1}.
clion.extract.new.constant.type=Укажите новый тип переменной или оставьте предложенный. Нажмите {0}, чтобы продолжить рефакторинг.
clion.extract.new.variable.name=Введите {0} в качестве имени новой локальной переменной и нажмите {1}.
clion.extract.variable=Нажмите {0}, чтобы извлечь выражение в переменную.
clion.extract.variable.declare.const=Объявить const
clion.extract.variable.expression=Затем выберите "{0}"
clion.extract.variable.expression.option=Теперь у вас есть дополнительные опции для объявления новой локальной переменной. Выберите "Объявить const".
clion.extract.variable.help.link=Извлечь/Ввести переменную
clion.extract.variable.intro=Теперь жестко закодованное значение исчезло, но выражение все еще довольно длинное. Давайте извлечем площадь круга в локальную переменную с помощью рефакторинга <strong>Извлечь переменную</strong>.
clion.inline.help.link=Встроить
clion.intn.name.replace.if=Заменить 'if else' на '?\:'
clion.multiple.selections.deselect.symbol=Нажмите {0}, чтобы отменить выделение последнего вхождения.
clion.multiple.selections.escape=Нажмите {0}, чтобы сбросить множественное выделение и вернуться в режим одиночного курсора.
clion.multiple.selections.help.multiple.carets=Множественные курсоры и диапазоны выделения
clion.multiple.selections.lesson.name=Множественное выделение
clion.multiple.selections.replace=Введите {0}, чтобы заменить все вхождения {1} на {0}.
clion.multiple.selections.select.all=Нажмите {0}, чтобы выделить все вхождения в файле.
clion.multiple.selections.select.next.symbol=Нажмите {0} еще раз, чтобы выделить следующее вхождение этого символа.
clion.multiple.selections.select.symbol=Нажмите {0}, чтобы выделить символ под курсором.
clion.navigation.module.description=Переход к исходному коду, навигация к объявлениям, реализациям и структуре файла.
clion.navigation.module.name=Навигация
clion.onboarding.apply.action=Выберите действие "{0}" и нажмите {1}.
clion.onboarding.apply.intention=Выберите действие, чтобы сделать параметр константной ссылкой, и нажмите {0}.
clion.onboarding.balloon.about.debug.panel=Окно инструментов "{0}" содержит панель с различными действиями отладки. Вы можете пройти урок "{1}" позже, чтобы попробовать их.
clion.onboarding.balloon.click.here=Нажмите здесь, чтобы установить точку останова
clion.onboarding.balloon.open.file=Дважды щёлкните, чтобы открыть {0}
clion.onboarding.balloon.open.learn.toolbar=Переключитесь в окно инструментов "{0}", чтобы продолжить этот урок
clion.onboarding.balloon.project.directory=Дважды щёлкните по директории проекта, чтобы развернуть её и просмотреть файлы проекта
clion.onboarding.balloon.project.view=Нажмите, чтобы открыть представление <strong>Проект</strong>
clion.onboarding.balloon.start.debugging=Нажмите на значок для начала отладки или нажмите {0}.
clion.onboarding.balloon.stop.debugging=Нажмите на значок для остановки отладки
clion.onboarding.case.changed=Регистр изменен.
clion.onboarding.change.ui.settings=Для этого урока <ide/> изменит некоторые настройки интерфейса на значения по умолчанию. Ваши настройки будут восстановлены после завершения или выхода из урока.
clion.onboarding.epilogue=Поздравляем\! Вы завершили ознакомительный тур. Теперь вы можете\:\n  - <callback id\="{0}">Закрыть</callback> учебный проект{1}\n  - <callback id\="{2}">Показать</callback> больше уроков
clion.onboarding.feedback.system.found.toolchain=Найденные тулчейны\:
clion.onboarding.feedback.system.no.toolchain=нет
clion.onboarding.feedback.system.used.toolchain=Используемый тулчейн\:
clion.onboarding.indexing.description=При первом открытии проекта <ide/> сканирует стандартные библиотеки шаблонов и сам проект для сбора информации, необходимой для помощи при кодовании. Для продолжения дождитесь завершения индексации.
clion.onboarding.invoke.completion=Теперь введите {0}, чтобы показать все доступные варианты автодополнения.
clion.onboarding.invoke.completion.tip=<strong>Совет</strong>\: вы можете нажать {0}, чтобы показать элементы автодополнения в любом месте кода.
clion.onboarding.invoke.intention.for.code=Намерения могут сэкономить ваше время, упростить кодование и сделать ваш код безопаснее и эффективнее. Здесь {0} передается по значению в {1}, что означает его копирование при каждом вызове {1}. Это неэффективно. Давайте используем намерение, чтобы избавиться от ненужного копирования. Нажмите {2}.
clion.onboarding.invoke.intention.for.warning.1=Вы только что исправили ошибку, но этот код можно сделать еще лучше. <ide/> подсвечивает и добавляет желтую лампочку к строкам кода, которые можно улучшить.
clion.onboarding.invoke.intention.for.warning.2=Нажмите {0}, чтобы просмотреть предупреждения и применить быстрое исправление.
clion.onboarding.invoke.search.everywhere.1=При работе в <ide/> вам может понадобиться поиск файлов в проекте, символов, классов или даже действий ИСР. В этом уроке давайте найдем действие {0}, чтобы сделать строку {1} строчной.
clion.onboarding.invoke.search.everywhere.2=Нажмите {0} дважды, чтобы открыть диалог {1}.
clion.onboarding.lesson.name=Знакомство с {0}
clion.onboarding.module.description=Краткий обзор основных функций {0}
clion.onboarding.module.name=Ознакомительный тур
clion.onboarding.no.toolchain=Чтобы скомпилировать и запустить код, сначала нужно <callback id\="{0}">настроить</callback> компилятор C/C++.
clion.onboarding.project.view.description=Представление <strong>Проект</strong> - одно из основных окон инструментов. Оно содержит директорию проекта, внешние библиотеки и временные файлы. Нажмите на кнопку с полосками для предпросмотра содержимого демо-проекта. Также можно открыть его, нажав {0}.
clion.onboarding.return.to.welcome=\ и вернуться к экрану приветствия
clion.onboarding.run.options=Вы открыли демо-проект. Теперь давайте запустим его\! В выделенной области панели инструментов вы можете увидеть популярные действия для выбранной конфигурации. Например, вы можете собрать код {0}, запустить его {1}, отладить {2}, запустить с покрытием {3}, профилировать {4} и запустить с memcheck {5}.
clion.onboarding.run.sample=Сейчас давайте запустим текущий файл, нажмите {0} или клавишу {1}.
clion.onboarding.run.sample.balloon=Давайте запустим текущий файл, нажмите {0} или клавишу {1}.
clion.onboarding.search.everywhere.description=Как видите, выделенный текст {0} был автоматически скопирован в строку ввода. Давайте введем {1} вместо {0}.
clion.onboarding.select.fix=Примените первый элемент\: {0}. С этим исправлением ваш код будет выглядеть аккуратнее.
clion.onboarding.select.item=<ide/> показывает варианты автодополнения автоматически при вводе. Выберите элемент {0} с помощью стрелок на клавиатуре и нажмите {1}.
clion.onboarding.start.debugging=Нажмите на значок {0} для начала процесса отладки.
clion.onboarding.start.typing=Затем начните вводить {0}, чтобы сократить список автодополнения, или выберите этот элемент и нажмите {1}.
clion.onboarding.stop.debugging=Давайте остановим отладку. Нажмите на значок {0}.
clion.onboarding.toggle.breakpoint.1=Вы можете заметить, что вместо ожидаемого значения {0} функция {1} возвращает {2}. Давайте остановимся на операторе return для отладки проблемного кода.
clion.onboarding.toggle.breakpoint.2=Нажмите на область левого поля внутри выделенной области, чтобы установить точку останова.
clion.onboarding.toggle.case.part=регистр
clion.onboarding.toolchain.description=<ide/> уже настроил стандартный тулчейн C/C++ для этого курса. Вы можете изменить его или создать новый для своих проектов. Для этого перейдите в Настройки -> Сборка, выполнение, развертывание -> Тулчейны.
clion.onboarding.toolchain.tip=<strong>Совет\:</strong> Вы можете настроить тулчейны C/C++ в настройках <ide/> в разделе Сборка, выполнение, развертывание -> Тулчейны.
clion.onboarding.type.division=После обнаружения проблемы в коде давайте исправим ее. Разделите полученную сумму на длину значений. Скрипт урока уже вставил {0}.
clion.postfix.completion.complete=Выберите {0} из списка и нажмите {1}, чтобы завершить оператор.
clion.postfix.completion.type=Для C++ постфиксное завершение может быть особенно полезно для случаев оборачивания в приведение типа в стиле C++, `make_shared`/`make_unique`, различных циклов и идиом `begin`/`end`. Введите {0} после имени класса, чтобы увидеть варианты постфиксного завершения.
clion.qfix.name.remove.parameter=Удалить объявление параметра 'redundant'
clion.quick.fix.use.range.based.loop="Использовать цикл на основе диапазона"
clion.rad.change.signature.move.parameter.down=Переместите параметр {0} ниже параметра {1}, нажав кнопку "Переместить вниз".
clion.rad.intn.name.replace.if=Преобразовать оператор 'if' в выражение '?\:'
clion.rad.qfix.name.remove.parameter=Удалить неиспользуемый параметр
clion.refactorings.module.description=Сделайте ваш код аккуратным с помощью переименования, извлечения и других типов рефакторинга.
clion.refactorings.module.name=Рефакторинг
clion.rename.again=Рефакторинг переименования имеет дополнительные опции. Попробуйте снова переименовать {0} в {1}. Нажмите на любое вхождение имени типа {0} в коде и нажмите {2}.
clion.rename.applied=<ide/> изменил имя шаблона класса в объявлении/определении, а также во всех использованиях. Это работает во всем проекте. Обратите внимание, что рефакторинг переименования {0} автоматически переименовывает вхождение {1} внутри этого комментария.
clion.rename.conclusion=<ide/> снова изменил имя шаблона класса, но в отличие от предыдущего раза, это не затрагивает комментарий.
clion.rename.description=Рефакторинг переименования позволяет переименовывать символы, файлы и директории глобально с автоматическим исправлением всех ссылок на них в коде.
clion.rename.dialog.next.button=Далее
clion.rename.dialog.title=Переименование
clion.rename.disable.update.option=Отключить "Также переименовать в комментариях и строках"
clion.rename.enable.update.option=Включить "{0}"
clion.rename.found.usages=<ide/> показывает все текстовые вхождения, найденные в комментариях и строковых литералах.
clion.rename.found.usages.options=Вы можете использовать элементы управления на панели инструментов для навигации / группировки / фильтрации найденных вхождений.
clion.rename.help.link=Рефакторинг переименования
clion.rename.lesson.name=Переименование
clion.rename.option.text=Искать в комментариях и строковых литералах
clion.rename.press.rename=Нажмите {0}, чтобы переименовать шаблон класса {1}.
clion.rename.show.option.popup=Нажмите на значки рядом с переименовываемым элементом или нажмите {0}, чтобы получить доступ к дополнительным опциям.
clion.rename.type.new.name=Введите новое имя для этого шаблона класса (например, {0}) и нажмите {1}.
clion.rename.undo=Как и любой рефакторинг, переименование типа можно легко отменить с помощью Отмены. Нажмите {0}.
clion.run.configuration.add.new.program.arguments=Введите {0} в поле Аргументы программы и нажмите Запустить
clion.run.configuration.dialog.run.button=Запустить
clion.run.configuration.dialog.title=Конфигурации запуска/отладки
clion.run.configuration.gutters=Существует несколько способов запустить ваш код. Вы можете запустить его из области левого поля, нажав {0} и выбрав пункт {1}. Или же вы можете нажать {2}.
clion.run.configuration.lesson.name=Конфигурация запуска
clion.run.configuration.program.arguments=Аргументы программы
clion.run.configuration.run.current=Давайте запустим эту демо-программу, нажав {0} на панели инструментов.
clion.run.configuration.run.current.balloon=Давайте запустим этот пример
clion.run.configuration.settings.description=Это место для управления всеми конфигурациями запуска. Здесь вы можете установить параметры программы, рабочую директорию, переменные окружения и так далее.
clion.run.debug.module.description=Запускайте код и исправляйте ошибки с помощью визуального отладчика ИСР.
clion.run.debug.module.name=Запуск и отладка
clion.selection.select.string=Нажмите {0} еще раз, чтобы выделить всю строку.
clion.smart.completion.finish.completion=Выберите {0} и нажмите {1}.
clion.smart.completion.help.link=Автодополнение с учетом типов
clion.smart.completion.introduction=Умное автодополнение типов фильтрует список предложений, включая только типы, применимые в текущем контексте.
clion.smart.completion.use.smart.completion=В данном случае имеет смысл передавать в функцию {1} только значение перечисления {0}. Нажмите {2}, чтобы увидеть список подходящих предложений. Обратите внимание, что отображаются только различные значения перечисления {0}.
clion.statement.completion.complete.condition=Добавьте условие внутри скобок {0} и нажмите {1}, чтобы перейти в оператор {2}.
clion.statement.completion.complete.finish.body=Введите строку кода\: {0}, затем нажмите {1}, чтобы завершить оператор и применить форматование.
clion.statement.completion.complete.for=Нажмите {0}, чтобы завершить оператор {1}.
clion.statement.completion.complete.if=Введите {0} и нажмите {1}, чтобы сгенерировать оператор.
clion.statement.completion.help.link=Завершение операторов
clion.statement.completion.lesson.intro1=Вы можете создавать синтаксически правильные конструкции кода, используя завершение операторов. Оно вставляет необходимые синтаксические элементы (скобки, фигурные скобки и точки с запятой) и помещает вас в позицию, где вы можете начать вводить следующий оператор.
clion.statement.completion.lesson.intro2=Завершение операторов работает для завершения объявлений (таких как классы, пространства имён и перечисления) и операторов (<code>if/else</code>, <code>while</code>, <code>do</code>, <code>for</code>, <code>switch/case</code>, <code>try/catch</code>).
clion.statement.completion.lesson.name=Завершение операторов
clion.tab.completion.lesson.intro=Завершение с помощью Tab (вместо Enter) не просто вставляет выбранное предложение, а полностью заменяет слово под курсором. Это может быть полезно для быстрого исправления кода, так как вам не нужно вручную выделять и удалять слово.
clion.tab.completion.lesson.name=Tab-завершение
clion.tab.completion.select.item=Выберите элемент {0} с помощью стрелок клавиатуры или просто начните его вводить.
clion.tab.completion.start.completion=Допустим, вы хотите заменить здесь {0} на член класса {1}. Нажмите {2}, чтобы увидеть предложения завершения.
clion.tab.completion.use.tab.completion=Если вы нажмете {0}, то вставите {1} перед {2}. Вместо этого нажмите {3}, чтобы заменить {2} на {1}.
toolbar.settings.button=Настройки ИСР и проекта
unwrap.try=Развернуть 'if...'