DumpSpringMVCModelAction.gathering.spring.mvc.models=Сбор моделей Spring MVC…
DumpSpringMVCModelAction.scanning.spring.mvc.models=Сканирование моделей Spring MVC…
SpringMVCInitBinderInspection.method.annotated.with.initbinder.must.return.void=Метод с аннотацией @InitBinder должен возвращать void
SpringMvcRequestMappingRelatedItemLineMarkerProvider.related.views=Связанные представления
SpringMvcRequestMappingRelatedItemLineMarkerProvider.request.mapping.task.caption=<html><body>Представления для <b>{0}</b> (найдено {1})</body></html>
SpringMvcRequestMappingRelatedItemLineMarkerProvider.request.mapping.task.finished.caption=<html><body>Представления для <b>{0}</b> (найдено {1})</body></html>
SpringMvcRequestMappingRelatedItemLineMarkerProvider.request.mapping.task.title=Поиск маппинга запроса {0}
SpringMvcRequestMappingRelatedItemLineMarkerProvider.request.mapping.title=Маппинг запроса {0}
SpringMvcRequestMappingRelatedItemLineMarkerProvider.spring.view=Spring представление
SpringMvcView.designer.properties.show.javadoc=Показать документацию
SpringMvcView.request.method=Метод запроса
SpringMvcVtlGlobalVariableProvider.model.attribute=Атрибут модели
ViewReference.cannot.resolve.mvc.view=Не удаётся разрешить MVC представление ''{0}''
ViewReference.no.view.resolvers.found=Не найдены резолверы представлений
action.DumpSpringMVCModel.text=Дамп модели Spring MVC
action.DumpSpringModulesSorter.text=Дамп отсортированных URL модулей
action.export.openapi.draft=Сгенерировать черновик OpenAPI
cannot.resolve.controller.url=Не удаётся разрешить URL контроллера ''{0}''
cors.mapping.method.unresolved.message=Недопустимый метод ''{0}''
documentation.provider.consumes=Потребляет
documentation.provider.headers=Заголовки
documentation.provider.methods=Методы
documentation.provider.model.attributes=Атрибуты модели
documentation.provider.params=Параметры
documentation.provider.path.variables=Переменные пути
documentation.provider.produces=Производит
live.template.delete.mapping.description=Шаблон Spring MVC '@DeleteMapping'
live.template.get.mapping.description=Шаблон Spring MVC '@GetMapping'
live.template.patch.mapping.description=Шаблон Spring MVC '@PatchMapping'
live.template.post.mapping.description=Шаблон Spring MVC '@PostMapping'
live.template.put.mapping.description=Шаблон Spring MVC '@PutMapping'
live.template.request.mapping.description=Шаблон Spring MVC '@RequestMapping'
logical.spring.controller.endpoints=Эндпоинты
logical.spring.controller.mapping.views=Представления
logical.spring.functional.endpoints=Эндпоинты
mvc.application.context.autodetected=MVC контекст приложения
mvc.framework.name=Spring MVC
mvc.goto.related.item.group.name=Spring MVC
mvc.initializer.context.autodetected=MVC {0} инициализатор servlet контекста
mvc.inspection.group.name=Spring MVC
mvc.inspection.init.binder=Метод @InitBinder с типом возврата не void
mvc.inspection.path.variable=Несоответствие в объявлениях и использовании @PathVariable
mvc.inspection.view.reference=Неразрешённая ссылка на представление
mvc.servlet.context.autodetected=MVC {0} servlet контекст
mvc.tab.title=MVC
request.mapping.gutter.name=Маппинги запросов
request.mapping.gutter.open.in.http.name=Открыть в HTTP клиенте
request.mapping.gutter.views.name=Перейти к связанным представлениям
resource.location.unresolved.message=Не удаётся разрешить расположение ''{0}''
spring.controller.request.param.help.authenticatedPrincipal=Аннотация, используемая для разрешения Authentication.getPrincipal() в аргумент метода.
spring.controller.request.param.help.bindingResult=Для доступа к ошибкам валидации и привязки данных для объекта команды (то есть аргумента @ModelAttribute) или ошибкам валидации аргументов @RequestBody или @RequestPart. Необходимо объявить аргумент Errors или BindingResult сразу после проверяемого аргумента метода.
spring.controller.request.param.help.csrfToken=Предоставляет информацию об ожидаемом CSRF токене.
spring.controller.request.param.help.errors=Для доступа к ошибкам валидации и привязки данных для объекта команды (то есть аргумента @ModelAttribute) или ошибкам валидации аргументов @RequestBody или @RequestPart. Необходимо объявить аргумент Errors или BindingResult сразу после проверяемого аргумента метода.
spring.controller.request.param.help.httpEntity=Для доступа к заголовкам и телу запроса. Тело конвертируется с помощью HttpMessageConverter.
spring.controller.request.param.help.httpMethod=HTTP метод запроса.
spring.controller.request.param.help.httpSession=Обеспечивает наличие сессии. Следовательно, такой аргумент никогда не будет null. Обратите внимание, что доступ к сессии не является потокобезопасным.
spring.controller.request.param.help.inputStream=Для доступа к необработанному телу запроса, предоставляемому Servlet API.
spring.controller.request.param.help.locale=Текущая локаль запроса, определяемая наиболее специфичным доступным LocaleResolver (фактически, настроенным LocaleResolver или LocaleContextResolver).
spring.controller.request.param.help.map=Для доступа к модели, используемой в HTML контроллерах и предоставляемой шаблонам как часть рендеринга представления.
spring.controller.request.param.help.model=Для доступа к модели, используемой в HTML контроллерах и предоставляемой шаблонам как часть рендеринга представления.
spring.controller.request.param.help.modelMap=Для доступа к модели, используемой в HTML контроллерах и предоставляемой шаблонам как часть рендеринга представления.
spring.controller.request.param.help.nativeWebRequest=Общий доступ к параметрам запроса, атрибутам запроса и сессии без прямого использования Servlet API.
spring.controller.request.param.help.oAuth2AuthorizedClient=Реализации этого интерфейса отвечают за общее управление авторизованным(и) клиентом(ами).
spring.controller.request.param.help.outputStream=Для доступа к необработанному телу ответа, предоставляемому Servlet API.
spring.controller.request.param.help.pagination=Объект, содержащий информацию о пагинации.
spring.controller.request.param.help.principal=Текущий аутентифицированный пользователь, возможно конкретный класс реализации Principal, если известен. Обратите внимание, что этот аргумент не разрешается сразу, если он аннотирован, чтобы позволить пользовательскому резолверу разрешить его перед возвратом к стандартному разрешению через HttpServletRequest\#getUserPrincipal. Например, Spring Security Authentication реализует Principal и будет внедрен как таковой через HttpServletRequest\#getUserPrincipal, если только он также не аннотирован @AuthenticationPrincipal, в этом случае он разрешается пользовательским резолвером Spring Security через Authentication\#getPrincipal.
spring.controller.request.param.help.pushBuilder=Servlet 4.0 push builder API для программного проталкивания ресурсов HTTP/2. Обратите внимание, что согласно спецификации Servlet, внедренный экземпляр PushBuilder может быть null, если клиент не поддерживает эту функцию HTTP/2.
spring.controller.request.param.help.reader=Для доступа к необработанному телу запроса, предоставляемому Servlet API.
spring.controller.request.param.help.redirectAttributes=Указывает атрибуты для использования в случае редиректа (то есть для добавления к строке запроса) и flash-атрибуты для временного хранения до запроса после редиректа.
spring.controller.request.param.help.servletRequest=Общий доступ к servlet запросу
spring.controller.request.param.help.servletResponse=Общий доступ к servlet ответу
spring.controller.request.param.help.sessionStatus=Для отметки завершения обработки формы, что запускает очистку атрибутов сессии, объявленных через аннотацию @SessionAttributes на уровне класса.
spring.controller.request.param.help.sort=Опция сортировки для запросов. Необходимо предоставить как минимум список свойств для сортировки, который не должен содержать null или пустые строки. Направление по умолчанию - DEFAULT_DIRECTION.
spring.controller.request.param.help.uriComponentsBuilder=Для подготовки URL относительно хоста, порта, схемы, пути контекста и литеральной части маппинга сервлета текущего запроса.
spring.controller.request.param.help.webRequest=Расширяет интерфейс ServletRequest для предоставления информации о запросе для HTTP сервлетов. Контейнер сервлетов создает объект HttpServletRequest и передает его в качестве аргумента в сервисные методы сервлета (doGet, doPost и т.д.).
spring.controller.request.param.help.webResponse=Расширяет интерфейс ServletResponse для обеспечения HTTP-специфичной функциональности при отправке ответа. Например, имеет методы для доступа к HTTP заголовкам и cookies. Контейнер сервлетов создает объект HttpServletResponse и передает его в качестве аргумента в сервисные методы сервлета (doGet, doPost и т.д.).
spring.controller.request.param.help.writer=Для доступа к необработанному телу ответа, предоставляемому Servlet API.
spring.controller.request.param.help.zoneId=Часовой пояс, связанный с текущим запросом, определяемый LocaleContextResolver.
spring.mvc.controllers.not.found=Контроллеры Spring MVC не найдены
spring.reactive.web.client.endpoints.view.title=Spring Reactive WebClient
spring.reactive.web.test.client.endpoints.view.title=Spring WebTestClient
spring.rest.client.endpoints.view.title=Spring RestClient
spring.rest.operations.endpoints.view.title=Spring RestOperations
spring.test.mock.mvc.endpoints.view.title=Spring MockMvc
spring.test.rest.template.endpoints.view.title=Spring TestRestTemplate