action.rbs.cli.ancestors.description=Показать предков указанного класса или модуля
action.rbs.cli.ancestors.text=Запустить RBS Ancestors
action.rbs.cli.ast.description=Вывести JSON AST загруженного окружения. Можно указать шаблоны для фильтрации объявлений по именам файлов
action.rbs.cli.ast.text=Запустить RBS Ast
action.rbs.cli.constant.description=Разрешить указанную константу в RBS
action.rbs.cli.constant.text=Запустить RBS Constant
action.rbs.cli.list.description=Вывести список всех классов, модулей и интерфейсов с определениями
action.rbs.cli.list.text=Запустить RBS List
action.rbs.cli.method.description=Показать определение метода, указанного через `type_name` и `method_name`
action.rbs.cli.method.text=Запустить RBS Method
action.rbs.cli.methods.description=Показать все методы, определённые в указанном классе или модуле
action.rbs.cli.methods.text=Запустить RBS Methods
action.rbs.cli.parse.description=Разобрать указанные RBS файлы и вывести синтаксические ошибки
action.rbs.cli.parse.text=Запустить RBS Parse
action.rbs.cli.paths.description=Показать пути, используемые для загрузки RBS файлов
action.rbs.cli.paths.text=Запустить RBS Paths
action.rbs.cli.prototype.description=Сгенерировать прототипы RBS файлов. Поддерживаемые генераторы\: rb, rbi и runtime
action.rbs.cli.prototype.text=Запустить RBS Prototype
action.rbs.cli.test.description=Запустить тест с указанными опциями
action.rbs.cli.test.text=Запустить RBS Test
action.rbs.cli.validate.description=Проверить наличие имен типов в RBS файлах и корректность арности применения типов
action.rbs.cli.validate.text=Запустить RBS Validate
action.rbs.cli.vendor.description=Сигнатуры вендоров в директории проекта
action.rbs.cli.vendor.text=Запустить RBS Vendor
action.rbs.create.new.class.file.description=Создать новый RBS класс/файл
action.rbs.create.new.class.file.text=RBS класс/файл
action.rbs.generate.from.ruby.description=Сгенерировать RBS сигнатуры для Ruby файла
action.rbs.generate.from.ruby.popup.text=Сигнатуры типов
action.rbs.generate.from.ruby.text=Сгенерировать сигнатуры типов
action.steep.cli.annotations.description=Проверить аннотации в указанных исходных файлах
action.steep.cli.annotations.text=Запустить Steep Annotations
action.steep.cli.check.description=Запустить проверку типов
action.steep.cli.check.text=Запустить Steep Check
action.steep.cli.init.description=Сгенерировать Steepfile
action.steep.cli.init.text=Запустить Steep Init
action.steep.cli.langserver.text=Запустить Steep Langserver
action.steep.cli.project.text=Запустить Steep Project
action.steep.cli.stats.text=Запустить Steep Stats
action.steep.cli.validate.description=Проверить конфигурацию Steep
action.steep.cli.validate.text=Запустить Steep Validate
action.steep.cli.watch.text=Запустить Steep Watch
filetype.rbs.description=RBS
rbs.action.error.generating.rbs=Произошла ошибка при генерации RBS\: {0}
rbs.action.generate.title=Генерация сигнатур типов
rbs.action.non.zero.exit.code=Ненулевой код возврата RBS\: {0}
rbs.action.output.null=Не удалось выполнить команду RBS prototype
rbs.action.tab.title=Запустить {0}
rbs.actions.create.class.file.dialog.class=Класс
rbs.actions.create.class.file.dialog.file=Файл
rbs.actions.create.class.file.dialog.interface=Интерфейс
rbs.actions.create.class.file.dialog.module=Модуль
rbs.actions.create.class.file.error.invalid.class.name=Недопустимое имя класса
rbs.actions.create.class.file.error.invalid.file.name=Недопустимое имя файла
rbs.actions.create.class.file.error.invalid.interface.name=Недопустимое имя интерфейса
rbs.actions.create.class.file.error.invalid.module.name=Недопустимое имя модуля
rbs.actions.create.class.file.name=Создать RBS класс/файл {0}
rbs.actions.create.class.file.title=Новый RBS класс/файл
rbs.actions.run.anything.group.name=RBS
rbs.actions.run.anything.help.placeholder=rbs <команда>
rbs.annotation.block.with.untyped.parameters=Блок используется с нетипизованными параметрами
rbs.annotation.block.with.untyped.parameters.quickfix.family.name=Удалить блоки
rbs.annotation.block.with.untyped.parameters.quickfix.name=Удалить ''{0}''
rbs.annotation.interface.prepended=Интерфейс не может быть добавлен через prepend
rbs.annotation.interface.prepended.remove.quickfix.family.name=Удалить prepended интерфейсы
rbs.annotation.interface.prepended.remove.quickfix.name=Удалить ''prepend {0}''
rbs.annotation.interface.prepended.replace.extend.quickfix.family.name=Заменить prepended интерфейсы на 'extend'
rbs.annotation.interface.prepended.replace.extend.quickfix.name=Заменить ''prepend {0}'' на ''extend {0}''
rbs.annotation.interface.prepended.replace.include.quickfix.family.name=Заменить prepended интерфейсы на 'include'
rbs.annotation.interface.prepended.replace.include.quickfix.name=Заменить ''prepend {0}'' на ''include {0}''
rbs.annotation.module.included.in.interface=Класс/модуль включен в интерфейс
rbs.annotation.remove.include.statement.quickfix.name=Удалить оператор 'include'
rbs.annotation.remove.statement.fix=Удалить операторы
rbs.annotation.self.type.in.method=Привязка self-типа используется в методе
rbs.annotation.self.type.in.method.remove.quickfix.family.name=Удалить привязки self-типа
rbs.annotation.self.type.in.method.remove.quickfix.name=Удалить ''{0}''
rbs.annotation.self.type.in.proc.with.untyped.parameters=Привязка self-типа используется с нетипизованными параметрами
rbs.annotation.self.type.in.proc.with.untyped.parameters.remove.quickfix.family.name=Удалить привязки self-типа
rbs.annotation.self.type.in.proc.with.untyped.parameters.remove.quickfix.name=Удалить ''{0}''
rbs.annotation.singleton.alias.in.interface.quickfix.family.name=Преобразовать singleton-псевдонимы в псевдонимы экземпляра
rbs.annotation.singleton.alias.in.interface.quickfix.name=Преобразовать в псевдоним экземпляра
rbs.annotation.singleton.in.interface=Определение singleton-метода внутри интерфейса
rbs.annotation.singleton.in.interface.remove.alias.quickfix.name=Удалить singleton-псевдоним
rbs.annotation.singleton.in.interface.remove.quickfix.name=Удалить singleton-метод
rbs.annotation.singleton.method.in.interface.quickfix.family.name=Преобразовать singleton-методы в методы экземпляра
rbs.annotation.singleton.method.in.interface.quickfix.name=Преобразовать в метод экземпляра
rbs.annotation.type.alias.used.as.self.type=Псевдоним типа используется как self-тип
rbs.annotation.type.alias.used.as.self.type.remove.intention.family.name=Удалить недопустимые self-типы
rbs.annotation.type.alias.used.as.self.type.remove.intention.name=Удалить ''{0}''
rbs.annotation.type.contexts.keyword.in.invalid.context=''{0}'' используется в недопустимом контексте
rbs.annotation.type.contexts.keyword.in.invalid.context.replace.quickfix.family.name=Заменить недопустимые использования типа
rbs.annotation.type.contexts.keyword.in.invalid.context.replace.quickfix.name=Заменить ''{0}''
rbs.annotation.type.variable.after.optional.type.variable=Обязательная переменная типа после опциональной
rbs.annotation.type.variable.after.optional.type.variable.quickfix.family.name=Добавить типы по умолчанию
rbs.annotation.type.variable.after.optional.type.variable.quickfix.name=Добавить тип по умолчанию
rbs.annotation.type.variable.depends.on.optional.type.variable=Опциональная переменная типа используется в типе по умолчанию
rbs.annotation.type.variable.depends.on.optional.type.variable.quickfix.family.name=Заменить недопустимые ссылки на переменные типа
rbs.annotation.type.variable.depends.on.optional.type.variable.quickfix.name=Заменить ''{0}''
rbs.annotation.use.alias.mismatched.case.interface=''{0}'' не является допустимым именем интерфейса
rbs.annotation.use.alias.mismatched.case.lowercase=''{0}'' не является допустимым именем псевдонима типа
rbs.annotation.use.alias.mismatched.case.uppercase=''{0}'' не является допустимым именем класса/модуля
rbs.annotation.visibility.modifier.remove.quickfix.family.name=Удалить недопустимые модификаторы видимости
rbs.annotation.visibility.modifier.remove.quickfix.name=Удалить ''{0}''
rbs.annotation.visibility.modifier.used.in.interface=Модификатор видимости использован внутри интерфейса
rbs.annotation.visibility.modifier.used.in.module.method=Модификатор видимости использован в методе модуля
rbs.collection.banner=Встроенный файл сигнатур (загружен с помощью RBS collection)
rbs.collection.location=корень библиотеки
rbs.collection.name=rbs_collection [встроенный]
rbs.collection.name.with.module=rbs_collection ({0}) [встроенный]
rbs.collection.notification.enableCollectionManagement.body=Разрешить загрузку сигнатур типов для гемов в фоновом режиме (проект и его файлы не будут изменены). Для включения этой функции может потребоваться установка последней версии гема 'rbs' в интерпретаторе Ruby.
rbs.collection.notification.enableCollectionManagement.dismiss.action.title=Отклонить
rbs.collection.notification.enableCollectionManagement.enable.action.title=Включить
rbs.collection.notification.enableCollectionManagement.title=Улучшенная поддержка типов
rbs.collection.notification.installGem.body=Разрешить загрузку сигнатур типов для гемов в фоновом режиме путем установки последней версии гема 'rbs' (проект и его файлы не будут изменены)
rbs.collection.notification.installGem.configure.action.title=Настроить…
rbs.collection.notification.installGem.install.action.title=Установить
rbs.collection.notification.installGem.title=Улучшенная поддержка типов
rbs.collection.notificationGroup=Автоматизация RBS collection
rbs.collection.runner.title=Выполняется ''{0}''…
rbs.inlay.hints.choose.declaration.title=Выберите объявление
rbs.inlay.hints.ruby.attribute.type.description=Типы атрибутов (из RBS) рядом с соответствующими объявлениями. Типы отображаются для аксессоров, геттеров и сеттеров.<br/><br/>Удерживайте Ctrl и нажмите на подсказку для перехода к сигнатуре типа.
rbs.inlay.hints.ruby.attribute.type.name=Типы атрибутов
rbs.inlay.hints.ruby.block.parameter.type.description=Типы параметров блока (из RBS) рядом с соответствующими объявлениями. Типы отображаются как для именованных, так и для нумерованных параметров.<br/><br/>Удерживайте Ctrl и нажмите на подсказку для перехода к сигнатуре типа.
rbs.inlay.hints.ruby.block.parameter.type.name=Типы параметров блока
rbs.inlay.hints.ruby.block.self.type.description=Типы self в блоках (из RBS) рядом с соответствующими объявлениями.<br/><br/>Удерживайте Ctrl и нажмите на подсказку для перехода к сигнатуре типа.
rbs.inlay.hints.ruby.block.self.type.name=Типы self в блоках
rbs.inlay.hints.ruby.constant.type.description=Типы констант (из RBS) рядом с соответствующими объявлениями.<br/><br/>Удерживайте Ctrl и нажмите на подсказку для перехода к сигнатуре типа.
rbs.inlay.hints.ruby.constant.type.name=Типы констант
rbs.inlay.hints.ruby.container.type.description=Имена переменных типа (из RBS) рядом с объявлениями классов/модулей.<br/><br/>Удерживайте Ctrl и нажмите на подсказку для перехода к сигнатуре типа.
rbs.inlay.hints.ruby.container.type.name=Переменные типа класса/модуля
rbs.inlay.hints.ruby.global.variable.type.description=Типы глобальных переменных (из RBS) рядом с соответствующими объявлениями.<br/><br/>Удерживайте Ctrl и нажмите на подсказку для перехода к сигнатуре типа.
rbs.inlay.hints.ruby.global.variable.type.name=Типы глобальных переменных
rbs.inlay.hints.ruby.method.parameter.type.description=Типы параметров метода (из RBS) рядом с соответствующими объявлениями.<br/><br/>Удерживайте Ctrl и нажмите на подсказку для перехода к сигнатуре типа.
rbs.inlay.hints.ruby.method.parameter.type.name=Типы параметров метода
rbs.inlay.hints.ruby.method.return.type.description=Типы возвращаемых значений метода (из RBS) рядом с соответствующими объявлениями.<br/><br/>Удерживайте Ctrl и нажмите на подсказку для перехода к сигнатуре типа.
rbs.inlay.hints.ruby.method.return.type.name=Типы возвращаемых значений метода
rbs.inspection.bad.type.argument.type.description=''{0}'' не является подтипом ''{1}''
rbs.inspection.bad.type.argument.type.name=Неверный тип аргумента типа
rbs.inspection.bad.type.argument.type.replace.quickfix.family.name=Заменить неверные аргументы типа
rbs.inspection.bad.type.argument.type.replace.quickfix.name=Заменить ''{0}''
rbs.inspection.bad.type.variable.default.type.description=''{0}'' не является подтипом ''{1}''
rbs.inspection.bad.type.variable.default.type.name=Неверный тип по умолчанию для переменной типа
rbs.inspection.bad.type.variable.default.type.replace.quickfix.family.name=Заменить неверные типы по умолчанию
rbs.inspection.bad.type.variable.default.type.replace.quickfix.name=Заменить ''{0}''
rbs.inspection.conflicting.type.variable.count.add.quickfix.family.name=Добавить отсутствующие переменные типа
rbs.inspection.conflicting.type.variable.count.add.quickfix.name=Добавить{0, choice, 1\# переменную типа|2\# {0} переменных типа}
rbs.inspection.conflicting.type.variable.count.description={0}{1, choice, 0\#не имеет переменных типа|1\#имеет 1 переменную типа|2\#имеет {1} переменных типа}, что конфликтует с другими объявлениями
rbs.inspection.conflicting.type.variable.count.goTo.quickfix.family.name=Перейти к конфликтующему объявлению
rbs.inspection.conflicting.type.variable.count.goTo.quickfix.name.popup.title=Выберите конфликтующее объявление
rbs.inspection.conflicting.type.variable.count.name=Конфликт количества переменных типа
rbs.inspection.conflicting.type.variable.count.remove.quickfix.family.name=Удалить лишние переменные типа
rbs.inspection.conflicting.type.variable.count.remove.quickfix.name=Удалить{0, choice, 1\# переменную типа|2\# {0} переменных типа}
rbs.inspection.conflicting.type.variable.variance.description={0} имеет вариантность, которая конфликтует с {1, choice, 1\#другим объявлением|2\#другими объявлениями}
rbs.inspection.conflicting.type.variable.variance.name=Конфликт вариантности переменной типа
rbs.inspection.cyclic.class.alias.name=Циклическое объявление псевдонима класса
rbs.inspection.cyclic.class.module.alias.name=Циклическое объявление псевдонима класса/модуля
rbs.inspection.cyclic.module.alias.name=Циклическое объявление псевдонима модуля
rbs.inspection.duplicate=Дублирующее объявление
rbs.inspection.duplicate.class.alias=Дублирующее объявление псевдонима класса
rbs.inspection.duplicate.class.alias.container=''{0}'' уже существует как класс
rbs.inspection.duplicate.class.exists=''{0}'' уже существует как класс
rbs.inspection.duplicate.constant=Дублирующее объявление константы
rbs.inspection.duplicate.different.superclass={0} уже объявлен с суперклассом ''{1}''
rbs.inspection.duplicate.global.variable=Дублирующее объявление глобальной переменной
rbs.inspection.duplicate.go.to.alias.quickfix.name=Перейти к объявлению псевдонима
rbs.inspection.duplicate.go.to.class.quickfix.name=Перейти к объявлению класса
rbs.inspection.duplicate.go.to.conflicting.declarations.quickfix.name=Перейти к конфликтующим объявлениям
rbs.inspection.duplicate.go.to.conflicting.declarations.title=Выберите конфликтующее объявление
rbs.inspection.duplicate.go.to.duplicate.included.method.quickfix.name=Перейти к дублирующему включенному методу
rbs.inspection.duplicate.go.to.duplicate.included.method.title=Выберите дублирующий включенный метод
rbs.inspection.duplicate.go.to.duplicate.quickfix.name=Перейти к дублирующему объявлению
rbs.inspection.duplicate.go.to.duplicate.title=Выберите дублирующее объявление
rbs.inspection.duplicate.go.to.module.quickfix.name=Перейти к объявлению модуля
rbs.inspection.duplicate.includes.method=Включает дублирующиеся определения метода ''{0}''
rbs.inspection.duplicate.inclusion.call.remove.quickfix.name=Удалить вызов ''{0}''
rbs.inspection.duplicate.interface=Дублирующее объявление интерфейса
rbs.inspection.duplicate.interface.include={0} уже включен
rbs.inspection.duplicate.keyword.parameter=Дублирующийся именованный параметр
rbs.inspection.duplicate.method=Дублирующее определение метода
rbs.inspection.duplicate.module.alias=Дублирующее объявление псевдонима модуля
rbs.inspection.duplicate.module.alias.container=''{0}'' уже существует как модуль
rbs.inspection.duplicate.module.exists=''{0}'' уже существует как модуль
rbs.inspection.duplicate.opened.class.alias=Невозможно открыть псевдоним класса ''{0}''
rbs.inspection.duplicate.opened.module.alias=Невозможно открыть псевдоним модуля ''{0}''
rbs.inspection.duplicate.remove.class.alias.quickfix.name=Удалить дублирующий псевдоним класса
rbs.inspection.duplicate.remove.conflicting.class.quickfix.name=Удалить конфликтующий класс
rbs.inspection.duplicate.remove.conflicting.module.quickfix.name=Удалить конфликтующий модуль
rbs.inspection.duplicate.remove.constant.quickfix.name=Удалить дублирующую константу
rbs.inspection.duplicate.remove.global.variable.quickfix.name=Удалить дублирующую глобальную переменную
rbs.inspection.duplicate.remove.interface.quickfix.name=Удалить дублирующий интерфейс
rbs.inspection.duplicate.remove.method.quickfix.name=Удалить дублирующий метод
rbs.inspection.duplicate.remove.module.alias.quickfix.name=Удалить дублирующий псевдоним модуля
rbs.inspection.duplicate.remove.quickfix.family.name=Удалить дублирующее объявление
rbs.inspection.duplicate.remove.superclass.quickfix.name=Удалить конфликтующий суперкласс
rbs.inspection.duplicate.remove.type.alias.quickfix.name=Удалить дублирующий псевдоним типа
rbs.inspection.duplicate.type.alias=Дублирующее объявление псевдонима типа
rbs.inspection.group.rbs=RBS
rbs.inspection.group.rbs.code.style.name=Проблемы стиля кода
rbs.inspection.group.rbs.data.flow.name=Поток данных
rbs.inspection.group.rbs.inheritance.name=Проблемы наследования
rbs.inspection.group.rbs.naming.conventions.name=Соглашения об именовании
rbs.inspection.group.rbs.probable.bugs.name=Возможные ошибки
rbs.inspection.group.ruby=Ruby
rbs.inspection.group.ruby.rbs.name=RBS
rbs.inspection.inconsistent.class.alias.name=Модуль ''{0}'' используется как цель псевдонима класса
rbs.inspection.inconsistent.class.module.alias.name=Несогласованный псевдоним класса/модуля
rbs.inspection.inconsistent.class.module.alias.quickfix.name=Перейти к конфликтующим объявлениям
rbs.inspection.inconsistent.module.alias.name=Класс ''{0}'' используется как цель псевдонима модуля
rbs.inspection.incorrect.inclusion.call=Неверный вызов включения
rbs.inspection.incorrect.inclusion.call.extend.description={0} используется в вызове ''extend''
rbs.inspection.incorrect.inclusion.call.extend.remove.quickfix.name=Удалить ''extend {0}''
rbs.inspection.incorrect.inclusion.call.include.description={0} используется в вызове ''include''
rbs.inspection.incorrect.inclusion.call.include.remove.quickfix.name=Удалить ''include {0}''
rbs.inspection.incorrect.inclusion.call.prepend.description={0} используется в вызове ''prepend''
rbs.inspection.incorrect.inclusion.call.prepend.remove.quickfix.name=Удалить ''prepend {0}''
rbs.inspection.incorrect.inclusion.call.remove.quickfix.family.name=Удалить неверные вызовы включения
rbs.inspection.incorrect.type.argument.count.add.description={0} требует {1, choice, 1\#аргумент типа|2\#{1} аргумента типа|3\#{1} аргументов типа}
rbs.inspection.incorrect.type.argument.count.add.quickfix.family.name=Добавить недостающие аргументы типа
rbs.inspection.incorrect.type.argument.count.add.quickfix.name=Добавить {0, choice, 1\#аргумент типа|2\#{0} аргумента типа|3\#{0} аргументов типа}
rbs.inspection.incorrect.type.argument.count.name=Неверное количество аргументов типа
rbs.inspection.incorrect.type.argument.count.remove.all.quickfix.name=Удалить {0, choice, 1\#аргумент типа|2\#аргумента типа|3\#аргументов типа}
rbs.inspection.incorrect.type.argument.count.remove.description=Слишком много аргументов типа
rbs.inspection.incorrect.type.argument.count.remove.quickfix.family.name=Удалить лишние аргументы типа
rbs.inspection.incorrect.type.argument.count.remove.quickfix.name=Удалить лишние {0, choice, 1\#аргумент типа|2\#аргумента типа|3\#аргументов типа}
rbs.inspection.incorrect.type.argument.variance.description={0} {1} используется как {2, choice, 0\#инвариантный|1\#ковариантный|2\#контравариантный} аргумент
rbs.inspection.incorrect.type.argument.variance.name=Неверная вариантность аргумента типа
rbs.inspection.invalid.method.overload.description=Не найдено неперегруженное объявление для {0}
rbs.inspection.invalid.method.overload.name=Неверная перегрузка метода
rbs.inspection.invalid.method.overload.remove.method.quickfix.family.name=Удалить методы
rbs.inspection.invalid.method.overload.remove.method.quickfix.name=Удалить ''{0}''
rbs.inspection.invalid.method.overload.remove.quickfix.family.name=Удалить '...'
rbs.inspection.invalid.method.overload.replace.quickfix.family.name=Заменить на '-> untyped'
rbs.inspection.invalid.type.argument.usage.description={0} {1} используется в {2, choice, 0\#инвариантной|1\#ковариантной|2\#контравариантной} позиции
rbs.inspection.invalid.type.argument.usage.name=Неверное использование аргумента типа
rbs.inspection.literal.class.referenced.description=Использовано ''{0}'' вместо ''{1}''
rbs.inspection.literal.class.referenced.name=Использован литеральный класс
rbs.inspection.literal.class.referenced.replace.quickfix.family.name=Заменить на соответствующие литералы
rbs.inspection.literal.class.referenced.replace.quickfix.name=Заменить на ''{0}''
rbs.inspection.mismatch.edit.typeSignature.family.name=Редактировать сигнатуру типа
rbs.inspection.mismatch.goto.typeSignature.error=Нет сигнатур типа
rbs.inspection.mismatch.goto.typeSignature.family.name=Перейти к сигнатуре типа
rbs.inspection.mismatch.goto.typeSignature.popup.title=Выберите сигнатуру типа
rbs.inspection.missing.type.signature.add.command.name=Добавить сигнатуру типа
rbs.inspection.missing.type.signature.add.create.file.name=Создать RBS файл {0}
rbs.inspection.missing.type.signature.add.create.file.title=Новый RBS файл
rbs.inspection.missing.type.signature.add.disambiguate.title=Выберите класс/модуль
rbs.inspection.missing.type.signature.add.family.name=Добавить сигнатуру типа
rbs.inspection.missing.type.signature.declaration=Отсутствует сигнатура типа
rbs.inspection.missing.type.signature.declaration.attr.description=Отсутствует сигнатура типа для {0, choice, 1\#{1} "{2}"|2\#{1} "{2}" и {3} "{4}"}
rbs.inspection.missing.type.signature.declaration.description=Отсутствует сигнатура типа для ''{0}''
rbs.inspection.module.used.as.superclass.description={0} используется как суперкласс
rbs.inspection.module.used.as.superclass.name=Модуль используется как суперкласс
rbs.inspection.module.used.as.superclass.remove.quickfix.family.name=Удалить неверные суперклассы
rbs.inspection.module.used.as.superclass.remove.quickfix.name=Удалить ''< {0}''
rbs.inspection.simplifiable.boolean.union.description=''{0} | {1}'' можно упростить
rbs.inspection.simplifiable.boolean.union.name=Упрощаемое объединение булевых типов
rbs.inspection.simplifiable.boolean.union.replace.quickfix.family.name=Упростить булевы объединения
rbs.inspection.simplifiable.boolean.union.replace.quickfix.name=Заменить ''{0} | {1}'' на ''bool''
rbs.inspection.unconventional.interface.name.name=Нестандартное имя интерфейса
rbs.inspection.unconventional.name.mismatched.description=''{0}'' не соответствует ''{1}''
rbs.inspection.unconventional.name.too.long.description=''{0}'' слишком длинное; должно быть {1} {1, choice, 1\#символ|2\#символа или меньше}
rbs.inspection.unconventional.name.too.short.description=''{0}'' слишком короткое; должно быть не менее {1} {1, choice, 1\#символа|2\#символов}
rbs.inspection.unconventional.type.alias.name.name=Нестандартное имя псевдонима типа
rbs.inspection.unconventional.type.variable.name.name=Нестандартное имя переменной типа
rbs.inspection.unconventional.use.alias.name.name=Нестандартное имя псевдонима use
rbs.inspection.unnecessary.parentheses.description=Лишние скобки в типе функции
rbs.inspection.unnecessary.parentheses.name=Лишние скобки
rbs.inspection.unnecessary.parentheses.remove.quickfix.name=Удалить лишние скобки
rbs.inspection.unnecessary.qualifier.description=''{0}'' можно сократить
rbs.inspection.unnecessary.qualifier.name=Лишний квалификатор
rbs.inspection.unnecessary.qualifier.replace.quickfix.family.name=Удалить лишние квалификаторы
rbs.inspection.unnecessary.qualifier.replace.quickfix.name=Заменить на ''{0}''
rbs.inspection.unresolved.reference.add.use.clause.quickfix.command=Добавить конструкцию use
rbs.inspection.unresolved.reference.add.use.clause.quickfix.family.name=Добавить конструкцию use
rbs.inspection.unresolved.reference.add.use.clause.quickfix.title=Выберите цель
rbs.inspection.unresolved.reference.description=Не удаётся найти ''{0}''
rbs.inspection.unresolved.reference.name=Неразрешённая ссылка
rbs.inspection.unused.interface.description={0} не используется
rbs.inspection.unused.interface.name=Неиспользуемый интерфейс
rbs.inspection.unused.interface.remove.quickfix.family.name=Удалить неиспользуемые интерфейсы
rbs.inspection.unused.interface.remove.quickfix.name=Удалить ''{0}''
rbs.inspection.unused.type.alias.description={0} не используется
rbs.inspection.unused.type.alias.name=Неиспользуемый псевдоним типа
rbs.inspection.unused.type.alias.remove.quickfix.family.name=Удалить неиспользуемые псевдонимы типов
rbs.inspection.unused.type.alias.remove.quickfix.name=Удалить ''{0}''
rbs.inspection.unused.type.variable.description={0} не используется
rbs.inspection.unused.type.variable.name=Неиспользуемая переменная типа
rbs.inspection.unused.type.variable.remove.quickfix.family.name=Удалить неиспользуемые переменные типа
rbs.inspection.unused.type.variable.remove.quickfix.name=Удалить ''{0}''
rbs.inspection.unused.use.clause.name=Неиспользуемая конструкция use
rbs.inspection.unused.use.clause.optimize.quickfix.family.name=Оптимизовать конструкции use
rbs.inspection.unused.use.clause.shadowed.description=Затененная конструкция use
rbs.inspection.unused.use.clause.unnecessary.alias.description=Лишний псевдоним use
rbs.inspection.unused.use.clause.unnecessary.description=Лишняя конструкция use
rbs.inspection.unused.use.clause.unused.description=Неиспользуемая конструкция use
rbs.intention.ruby.category.rbs=Ruby/RBS
rbs.intention.ruby.edit.typeSignature.command.name=Редактировать сигнатуру типа
rbs.intention.ruby.edit.typeSignature.disambiguate.title=Выберите сигнатуру типа
rbs.intention.ruby.edit.typeSignature.text=Редактировать сигнатуру типа
rbs.language.configurable=RBS
rbs.language.configurable.collection.description=<a href\="https\://github.com/ruby/gem_rbs_collection">RBS коллекция</a> - это управляемая сообществом коллекция сигнатур типов для гемов, которые поставляются без них. Сигнатуры типов будут автоматически загружаться в фоновом режиме, улучшая поддержку типов и анализ кода для всех гемов, используемых в проекте. Эта функция не изменяет проект или его файлы.
rbs.language.configurable.collection.enable=Улучшенная поддержка типов с коллекцией RBS
rbs.language.configurable.name=RBS
rbs.lineMarker.overloaded.declarations=Перегруженный метод RBS
rbs.lineMarker.overloaded.declarations.title=Выберите перегруженное объявление
rbs.lineMarker.overloaded.declarations.tooltip.few=Имеет перегруженные объявления в\:
rbs.lineMarker.overloaded.declarations.tooltip.many=Имеет перегруженные объявления в нескольких файлах
rbs.lineMarker.overloaded.declarations.tooltip.one=Имеет перегруженное объявление в\:
rbs.lineMarker.partial.declarations=Частичное объявление RBS
rbs.lineMarker.partial.declarations.title=Выберите частичное объявление
rbs.lineMarker.partial.declarations.tooltip.few=Имеет частичные объявления в\:
rbs.lineMarker.partial.declarations.tooltip.many=Имеет частичные объявления в нескольких файлах
rbs.lineMarker.partial.declarations.tooltip.one=Имеет частичное объявление в\:
rbs.live.template.presentable.name=RBS
rbs.model.attribute.accessor.longDescription=Аксессор атрибута ''{0}'' для {1}
rbs.model.attribute.accessor.shortDescription=Аксессор атрибута ''{0}''
rbs.model.attribute.reader.longDescription=Геттер атрибута ''{0}'' для {1}
rbs.model.attribute.reader.shortDescription=Геттер атрибута ''{0}''
rbs.model.attribute.writer.longDescription=Сеттер атрибута ''{0}'' для {1}
rbs.model.attribute.writer.shortDescription=Сеттер атрибута ''{0}''
rbs.model.class.longDescription=Класс ''{0}'' в ''{1}''
rbs.model.class.shortDescription=Класс ''{0}''
rbs.model.class.variable.longDescription=Переменная класса ''{0}'' для {1}
rbs.model.class.variable.shortDescription=Переменная класса ''{0}''
rbs.model.constant.longDescription=Константа ''{0}'' в ''{1}''
rbs.model.constant.shortDescription=Константа ''{0}''
rbs.model.descriptions.contravariant=Контравариантный
rbs.model.descriptions.covariant=Ковариантный
rbs.model.descriptions.invariant=Инвариантный
rbs.model.descriptions.private.prefix=Private
rbs.model.global.variable.shortDescription=Глобальная переменная ''{0}''
rbs.model.instance.variable.longDescription=Переменная экземпляра ''{0}'' для {1}
rbs.model.instance.variable.shortDescription=Переменная экземпляра ''{0}''
rbs.model.interface.longDescription=Интерфейс ''{0}'' в ''{1}''
rbs.model.interface.shortDescription=Интерфейс ''{0}''
rbs.model.keyword.shortDescription=Ключевое слово ''{0}''
rbs.model.method.alias.longDescription=Алиас метода ''{0}'' для {1}
rbs.model.method.alias.shortDescription=Алиас метода ''{0}''
rbs.model.method.longDescription=Метод ''{0}'' для {1}
rbs.model.method.shortDescription=Метод ''{0}''
rbs.model.module.longDescription=Модуль ''{0}'' в ''{1}''
rbs.model.module.method.longDescription=Метод модуля ''{0}'' для {1}
rbs.model.module.method.shortDescription=Метод модуля ''{0}''
rbs.model.module.shortDescription=Модуль ''{0}''
rbs.model.parameter.shortDescription=Параметр ''{0}''
rbs.model.singleton.longDescription=Синглтон ''{0}'' в ''{1}''
rbs.model.singleton.shortDescription=Синглтон ''{0}''
rbs.model.type.alias.longDescription=Алиас типа ''{0}'' в ''{1}''
rbs.model.type.alias.shortDescription=Алиас типа ''{0}''
rbs.model.type.variable.longDescription=Переменная типа ''{0}'' для {1}
rbs.model.type.variable.shortDescription=Переменная типа ''{0}''
rbs.model.use.clause.alias.shortDescription=Use алиас ''{0}''
rbs.notificationGroup.fileGeneration=Генерация файлов RBS
rbs.parameter.info.untyped.parameters=<нетипизованные параметры>
rbs.ruby.model.class.longDescription=Класс ''{0}'' в ''{1}''
rbs.ruby.model.class.shortDescription=Класс ''{0}''
rbs.ruby.model.module.longDescription=Модуль ''{0}'' в ''{1}''
rbs.ruby.model.module.shortDescription=Модуль ''{0}''
rbs.ruby.model.singleton.longDescription=Синглтон ''{0}'' в ''{1}''
rbs.ruby.model.singleton.shortDescription=Синглтон ''{0}''
rbs.rubysigs.banner=Встроенный файл сигнатур
rbs.rubysigs.banner.with.versions=Встроенный файл сигнатур (сгенерирован с использованием RBS v{0} и Ruby v{1})
rbs.rubysigs.location=корень библиотеки
rbs.rubysigs.name=rbs [встроенный]
rbs.rubysigs.name.with.version=rbs (v{0}) [встроенный]
rbs.search.presentation.in.container=в {0}
rbs.search.presentation.of.container=/{0}
rbs.search.scope.display.name=Файлы коллекции
rbs.search.usageType.alias.group=Алиас
rbs.search.usageType.declaration.group=Объявление
rbs.search.usageType.extend.include.prepend.call.group=Использование в вызове extend/include/prepend
rbs.search.usageType.nested.constant.access.group=Доступ к вложенной константе
rbs.search.usageType.self.type.clause.group=Выражение self-типа
rbs.search.usageType.superclass.clause.group=Выражение суперкласса
rbs.search.usageType.type.signature.group=Сигнатура типа
rbs.search.usageType.type.variable.default.group=Значение по умолчанию для переменной типа
rbs.search.usageType.type.variable.upper.bound.group=Верхняя граница переменной типа
rbs.search.usageType.use.clause.group=Выражение use
rbs.structure.view.qualified.name={0} в {1}
steep.actions.run.anything.group.name=Steep
steep.actions.run.anything.help.placeholder=steep <command>