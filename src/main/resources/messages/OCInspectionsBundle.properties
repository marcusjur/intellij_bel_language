checkbox.simplify.condition.true=Упростить "condition \=\= true"
checkbox.simplify.condition1.true.condition2=Упростить "condition1 ? true \: condition2"
checkbox.simplify.if.condition1.return.true.return.condition2=Упростить "if (condition1) return true; return condition2;"
checkbox.simplify.if.true.while.false=Упростить "if (true)", "while (false)"
clang.based.inspection.api.notes.issue=Проблема с API Notes
clang.based.inspection.arc.and.properties=ARC и @properties
clang.based.inspection.concepts.issue=Проблема концептов
clang.based.inspection.coroutines.issue=Проблема корутин
clang.based.inspection.dependency.directive.source.minimization.issue=Проблема минимизации исходного кода директив зависимостей
clang.based.inspection.lexical.or.preprocessor.issue=Лексическая или препроцессорная проблема
clang.based.inspection.openmp.issue=Проблема OpenMP
clang.based.inspection.vtable.issue=Проблема VTable ABI
configurable.naming.convention.header.guard.style=Стиль защиты заголовка\:
configurable.naming.convention.several.rules.hint=Если для одного типа сущности существует несколько правил, будет использовано последнее в списке.
dfa.batch.action.subject=Анализ
dfa.batch.action.title=Анализ глобального потока данных
dfa.message.preparing=Подготовка {0}...
inspection.accessors.were.overridden=Переопределённые аксессоры
inspection.arc.issues=Проблемы ARC
inspection.array.index.out.of.bounds.display.name=Выход за границы массива
inspection.assign.in.condition='\=' в условном выражении
inspection.assign.in.condition.with.self='\=' в условном выражении с 'self'
inspection.clangd.general=Ошибки и предупреждения Clangd
inspection.constant.conditions=Константное условие
inspection.constant.function.result.display.name=Константный результат функции
inspection.constant.parameter.display.name=Константный параметр
inspection.context.sensitive.analysis=Контекстно-зависимый анализ
inspection.dangling.pointer.display.name=Висячий указатель
inspection.deprecated.api=Использование устаревшего API
inspection.dfa.group.display.name=Анализ потока данных
inspection.display.name.simplifiable.statement=Упрощаемое выражение
inspection.endless.loop.display.name=Бесконечный цикл
inspection.functions.group.display.name=Функции
inspection.global.unused.analysis=Глобальный анализ неиспользуемого кода
inspection.group.name.general=Общие
inspection.hides.class.scope=Скрытая область видимости класса
inspection.hiding.non.virtual.function=Скрытие невиртуальной функции
inspection.inconsistent.naming=Несогласованное именование
inspection.infinite.recursion.display.name=Бесконечная рекурсия
inspection.kr.unspecified.parameters=Передача аргументов в функцию с неопределёнными параметрами в стиле K&R
inspection.local.value.escapes.scope.display.name=Локальное значение выходит за область видимости
inspection.loop.condition.is.not.updated=Условие цикла не обновляется внутри цикла
inspection.memory.leak.display.name=Утечка памяти
inspection.message.address.local.object.may.escape.function=Адрес локального временного объекта может выйти за пределы функции
inspection.message.address.local.variable.may.escape.function=Адрес {0} может выйти за пределы функции
inspection.message.allocated.memory.leaked=Утечка выделенной памяти
inspection.message.calls.unreachable=Все вызовы {0} недостижимы
inspection.message.condition.always.false=Условие всегда ложно
inspection.message.condition.always.false.when.reached=Условие всегда ложно при достижении
inspection.message.condition.always.true=Условие всегда истинно
inspection.message.condition.always.true.when.reached=Условие всегда истинно при достижении
inspection.message.endless.loop=Бесконечный цикл
inspection.message.error.after.macro.substitution=Ошибка после подстановки макроса\: 
inspection.message.expression.can.be.simplified.to=Выражение можно упростить до ''{0}''
inspection.message.file.too.complex.to.perform.data.flow.analysis=Файл слишком сложен для анализа потока данных
inspection.message.hides.non.virtual.function={0} скрывает невиртуальную функцию из {1}
inspection.message.if.statement.has.identical.branches=Ветви оператора 'if' идентичны
inspection.message.infinite.recursion=Бесконечная рекурсия
inspection.message.invalid.suffix.on.raw.string=Недопустимый суффикс для raw-строки
inspection.message.is.never.used={0} никогда не используется
inspection.message.may.point.to.deallocated.memory={0} может указывать на освобожденную память
inspection.message.may.point.to.invalidated.memory={0} может указывать на недействительную память
inspection.message.may.point.to.out.of.scope.memory={0} может указывать на память вне области видимости
inspection.message.memory.leak=Утечка памяти, выделенной в функции ''{0}''
inspection.message.modern.syntax.can.be.used=Можно использовать современный синтаксис
inspection.message.never.used={0}{1, choice, 0\# присвоено, но никогда не используется|1\# никогда не используется}
inspection.message.non.localized.string=Нелокализованная строка\: {0}
inspection.message.not.initialized.field.usage=Использование неинициализованного {0}
inspection.message.not.released.in.dealloc.method={0} не освобожден в методе ''dealloc''
inspection.message.not.updated.in.loop={0}, используемое в условии цикла, не обновляется в цикле
inspection.message.only.assigned.but.never.accessed={0} только присваивается, но никогда не используется
inspection.message.reference.may.be.choice.null=Указатель может быть null
inspection.message.statement.can.be.simplified=Выражение можно упростить
inspection.message.unreachable.code=Недостижимый код
inspection.message.unterminated.string.literal=Незавершенный строковый литерал
inspection.message.value.never.used=Значение никогда не используется
inspection.message.was.not.declared.in={0} не объявлен в {1}
inspection.method.is.later.in.the.scope=Объявление метода находится позже в области видимости
inspection.missing.return.display.name=Отсутствует return
inspection.modern.syntax=Можно использовать современный синтаксис
inspection.name.unconstrained.variable.type=Неограниченный тип переменной
inspection.naming.convention.edit.settings.link=Изменить настройки стиля кода
inspection.naming.convention.rename.fix=Переименовать в {0}
inspection.naming.convention.rename.header.guard.fix=Переименовать защиту заголовка в {0}
inspection.non.localized.string=Нелокализованная строка
inspection.not.implemented.functions.display.name=Нереализованные функции
inspection.not.implements.protocol=Не реализован протокол
inspection.not.in.hierarchy.message=Не в иерархии сообщений
inspection.not.initialized.field.display.name=Неинициализованное поле
inspection.not.initialized.variable.display.name=Неинициализованная переменная
inspection.not.released.var=Release должен быть в 'dealloc' или его вызовах
inspection.null.dereference.display.name=Разыменование null
inspection.replace.enable_if.with.require=Заменить enable_if на requirement
inspection.sending.dealloc='dealloc' отправлен напрямую
inspection.simplifiable.statement=Упрощаемое выражение
inspection.simplify=Упростить {0}
inspection.simplify.condition=Упростить "condition \=\= true"
inspection.simplify.ternary=Упростить "condition1 ? true \: condition2"
inspection.unreachable.calls.display.name=Недостижимые вызовы функции
inspection.unreachable.code.display.name=Недостижимый код
inspection.unused.class.display.name=Неиспользуемый класс
inspection.unused.concept.display.name=Неиспользуемая концепция
inspection.unused.directive.display.name=Неиспользуемая директива include
inspection.unused.expression.result.display.name=Неиспользуемый результат выражения
inspection.unused.global.declaration.display.name=Неиспользуемое глобальное объявление
inspection.unused.import.statement.display.name=Неиспользуемый оператор import
inspection.unused.include.directive.completely.not.directly=Обнаруживать неиспользуемые напрямую
inspection.unused.include.directive.completely.not.required=Обнаруживать ненужные
inspection.unused.include.directive.completely.unused=Обнаруживать полностью неиспользуемые
inspection.unused.instance.variable.display.name=Неиспользуемая переменная экземпляра
inspection.unused.local.variable.display.name=Неиспользуемая локальная переменная
inspection.unused.localization.display.name=Неиспользуемая локализация
inspection.unused.macro.display.name=Неиспользуемый макрос
inspection.unused.method.display.name=Неиспользуемый метод
inspection.unused.parameter.display.name=Неиспользуемый параметр
inspection.unused.property.display.name=Неиспользуемое свойство
inspection.unused.struct.display.name=Неиспользуемая структура
inspection.unused.template.parameter.display.name=Неиспользуемый параметр шаблона
inspection.unused.type.alias.display.name=Неиспользуемый псевдоним типа
inspection.unused.value.display.name=Неиспользуемое значение
inspection.usage.of.api.unavailable=Использование недоступного API
intention.dialog.message.change.type.as.well=Изменить также тип {0}?
intention.dialog.message.existing.default.values.removed=Существующие значения по умолчанию для параметров {0} будут удалены. Продолжить?
intention.family.name.add.bridge.cast=Добавить мостовое приведение типов
intention.family.name.add.call.to.super.dealloc=Добавить вызов [super dealloc]
intention.family.name.add.return.statement=Добавить оператор return
intention.family.name.change.to.nil=Изменить на 'nil'
intention.family.name.change.type.to.auto=Изменить тип ''{0}'' на ''auto''
intention.family.name.convert.literal.type=Преобразовать тип литерала\: добавить '@'
intention.family.name.delete.method=Удалить метод
intention.family.name.extract.assignment=Извлечь присваивание
intention.family.name.inline.parameter=Встроить параметр
intention.family.name.leave.initializer={0} и оставить инициализатор
intention.family.name.make.default=Сделать {0} по умолчанию
intention.family.name.remove=Удалить {0}
intention.family.name.remove.declaration=Удалить {1, choice, 0\#{0}|1\#объявление|2\#имя}
intention.family.name.remove.directive=Удалить директиву
intention.family.name.remove.extra.initializers=Удалить лишние инициализаторы
intention.family.name.remove.initializer=Удалить инициализатор
intention.family.name.remove.statement=Удалить оператор
intention.family.name.safe.delete=Безопасное удаление
intention.family.name.send.message=Отправить сообщение ''{0}''
intention.family.name.simplify=Упростить {0}
intention.family.name.simplify.choice=Упростить {1, choice, 0\#выражение|1\#{0}}
intention.family.name.simplify.condition=Упростить условие до ''{0}''
intention.family.name.simplify.expression=Упростить выражение
intention.family.name.use.enum.constant=Использовать константу перечисления
intention.import.command.name=Импортовать {0}
intention.import.popup.title=Символ для импорта
intention.name.add=Добавить "{0}"
intention.name.add.call.to.base.constructor=Добавить вызов базового конструктора ''{0}''
intention.name.add.constructor.initializer=Добавить инициализатор конструктора для {0}
intention.name.add.last.parameter=Добавить последний параметр ''{0}'' в {1}
intention.name.add.parameters=Добавить параметры в {0}
intention.name.add.suffix=Добавить суффикс
intention.name.add.type.modifier=Сделать {0} {1}
intention.name.call=Вызвать {0}
intention.name.cast.expression.to=Привести выражение к типу ''{0}''
intention.name.change.format.specifier=Изменить спецификатор формата на ''{0}''
intention.name.change.signature=Изменить сигнатуру {0} на ''{1}''
intention.name.change.superclass=Изменить суперкласс {0} с ''{1}'' на ''{2}''
intention.name.change.type=Изменить {0, choice, 0\#возвращаемый |1\#}тип {1} на ''{2}''{3}
intention.name.change.visibility=Сделать {0} {1}
intention.name.choice.enable.disable={0, choice, 0\#Включить ''|1\#Отключить ''}{1}'' для {2}
intention.name.choice.superclass={1, choice, 0\#{0} |1\#}суперкласс {2}
intention.name.class=класс
intention.name.cpp.class=C++ класс
intention.name.create.new=Создать новый {0}
intention.name.create.new.category=Создать новую категорию для {0} с {1}
intention.name.delete=Удалить {0}
intention.name.import=Импортовать {0}
intention.name.import.from=из {0}
intention.name.import.which={0, choice, 0\#какой|1\#символ} ''{1}''
intention.name.initialize=Инициализовать {0}
intention.name.inline=Встроить {0}
intention.name.leave.initializer={0} и оставить инициализатор
intention.name.make=Сделать {0} {1}
intention.name.make.class.method.instance.method=Сделать ''{0}{1, choice, 0\#'' методом класса|1\#'' методом экземпляра}
intention.name.make.function.const=Сделать {0} {1, choice, 0\#константным|1\#неконстантным}
intention.name.make.function.virtual=Сделать {0}\:\:{1} {2, choice, 0\#чисто виртуальным|1\#виртуальным}
intention.name.make.function.volatile=Сделать {0} {1, choice, 0\#volatile|1\#не-volatile}
intention.name.move.declaration=Переместить объявление {0}{1}
intention.name.predeclare.protocol.class=Предварительно объявить {0, choice, 0\#протокол ''|1\#класс ''|2\#структуру ''}{1}''
intention.name.remove=Удалить {0}
intention.name.remove.last.parameter=Удалить последний параметр ''{0}'' из {1}
intention.name.remove.type.modifier=Сделать {0} не-{1}
intention.name.rename=Переименовать {0}
intention.name.rename.reference=Переименовать ссылку
intention.name.reuse.previous.declaration=Повторно использовать предыдущее объявление {0}
intention.name.safe.delete=Безопасно удалить {0}
intention.name.set.superclass=Установить ''{0}'' как {1}
intention.name.simplify=Упростить {0}
intention.name.static=static
intention.name.use.constant=Использовать константу ''{0}''
intention.suffix.called.from=при вызове из функции ''{0}''
intention.suffix.called.from.global.scope=при вызове из глобальной области видимости
intentions.add.braces.statement=Добавить фигурные скобки к оператору ''{0}''
intentions.add.braces.statement.family=Добавить фигурные скобки к оператору
intentions.add.constructor.initializer.for.field=Добавить инициализатор конструктора для поля
intentions.add.initializer=Добавить инициализаторы
intentions.add.modifier=Добавить ''{0}''
intentions.add.parameter.initWith=Добавить как параметр в 'initWith...'
intentions.add.parameters.to.constructor=Добавить ''{0}'' как параметр в конструктор
intentions.add.parameters.to.constructor.family=Добавить поле как параметр в конструктор
intentions.add.super.constructor.call=Добавить пропущенные вызовы базового конструктора
intentions.add.super.protocol.by.class=Реализовать протокол в классе
intentions.add.super.protocol.by.private.category=Реализовать протокол в приватной категории
intentions.cast.expression=Привести выражение
intentions.change.function.const.action=Изменить модификатор const
intentions.change.function.signature=Изменить сигнатуру функции
intentions.change.function.volatile.action=Изменить модификатор volatile
intentions.change.gcc.attribute.action=Изменить атрибут ''{0}''
intentions.change.method.signature.add.parameters=Добавить параметры
intentions.change.property.attribute.action=Изменить атрибут свойства
intentions.change.superclass=Изменить суперкласс
intentions.change.type=Изменить тип
intentions.change.type.capitalized=Изменить тип
intentions.change.visibility=Изменить видимость
intentions.check.raw.string=Проверить raw-строку
intentions.convert.id.to.instance=Заменить возвращаемый тип 'id' на 'instancetype'
intentions.convert.objc.literal=Переключить на литерал Objective-C
intentions.convert.to.instance.variable=Преобразовать в переменную экземпляра
intentions.convert.to.property=Преобразовать в свойство
intentions.convert.type=Преобразовать тип
intentions.create.implementation=Создать реализацию {0}
intentions.create.interface=Создать интерфейс для {0}
intentions.create.matching.constructor=Создать конструктор, соответствующий базовому классу(ам)
intentions.create.matching.constructor.in=Создать конструктор по умолчанию в {0}
intentions.create.missing.default.switch.case=Создать отсутствующий default case
intentions.create.missing.switch.cases=Создать отсутствующие switch case
intentions.create.new.constructor=Создать новый конструктор ''{0}()''
intentions.create.new.matching.constructor=Создать новый конструктор в {0}, соответствующий базовому классу(ам)
intentions.deMorgan.law=Закон де Моргана
intentions.declare.member.in=Объявить в\: 
intentions.declare.method.in=Объявить метод в {0}
intentions.declare.method.in.interface=Объявить метод в интерфейсе
intentions.declare.method.in.private.category=Объявить метод в приватной категории
intentions.declare.property.as.readwrite=Объявить свойство как 'readwrite' в приватной категории
intentions.extract.category=Извлечь категорию этого класса
intentions.extract.if=Извлечь 'if'
intentions.extract.if.with.text=Извлечь ''if ({0})''
intentions.extract.private.category=Извлечь приватную категорию этого класса
intentions.extract.protocol=Извлечь протокол этого класса
intentions.extract.super.class=Извлечь суперкласс
intentions.extract.super.protocol=Извлечь суперпротокол
intentions.flip.binary.operation=Инвертировать бинарную операцию
intentions.flip.operator=Инвертировать {0}
intentions.flip.operator.to=Инвертировать {0} в {1}
intentions.generate.property=Сгенерировать свойство
intentions.group=C и C++
intentions.group.control.flow=C и C++/Поток управления
intentions.group.declarations=C и C++/Объявления
intentions.group.definition=C и C++/Определения
intentions.group.objc=Objective-C
intentions.group.operators=C и C++/Операторы
intentions.implement.accessor.methods=Реализовать методы доступа
intentions.implement.accessor.methods.for=Реализовать методы доступа для {0}
intentions.implement.method=Реализовать {0}
intentions.implement.required.methods=Реализовать необходимые методы интерфейса ''{0}''
intentions.import.predeclare.symbol=Импортовать/предварительно объявить символ
intentions.insert.cast.use.modern=Использовать операторы приведения типов C++
intentions.introduce.typedef=Добавить typedef
intentions.introduce.typedef.for.type=Добавить typedef для типа {0}
intentions.invert.if.condition=Инвертировать условие 'if'
intentions.merge.if.else=Объединить 'if else'
intentions.merge.nested.ifs=Объединить вложенные 'if'
intentions.move.instance.variables=Переместить переменные экземпляра в реализацию
intentions.move.to.interface=Переместить в интерфейс
intentions.move.to.private.category=Переместить в приватную категорию
intentions.predeclare.function=Предварительно объявить {0}
intentions.release.variables=Освободить переменные
intentions.remove.braces.statement=Удалить фигурные скобки из оператора ''{0}''
intentions.remove.braces.statement.family=Удалить фигурные скобки из оператора
intentions.remove.private.category.message=Удалить пустую приватную категорию?
intentions.remove.private.category.title=Удалить приватную категорию
intentions.remove.subj=Удалить ''{0}''
intentions.remove.suppression=Удалить подавление
intentions.remove.unnecessary.parentheses=Удалить лишние круглые скобки
intentions.rename.reference=Переименовать ссылку
intentions.rename.symbol=Переименовать символ
intentions.replace.and.with.or=Заменить '\\&\\&' на '||'
intentions.replace.if.else.with.ternary=Заменить 'if else' на '?\:'
intentions.replace.or.with.and=Заменить '||' на '\\&\\&'
intentions.replace.ternary.with.if.else=Заменить '?\:' на 'if else'
intentions.replace.type.with.auto=Заменить тип на 'auto'
intentions.reuse.declaration=Повторно использовать объявление
intentions.split.declaration=Разделить на объявление и присваивание
intentions.split.function=Разделить функцию на объявление и определение
intentions.split.function.progress.text=Определение расположения определения…
intentions.split.into.separate.declarations=Разделить на отдельные объявления
intentions.suppress.all.for.file=Подавить все диагностики {0} для файла
intentions.suppress.for=Подавить для {0}
intentions.suppress.for.file=Подавить для файла
intentions.suppress.for.method=Подавить для метода/функции
intentions.suppress.for.statement=Подавить для оператора
intentions.suppress.option.for=Подавить "{0}" для {1}
intentions.surround.with.if.responds=Обернуть в "if ([ respondsToSelector\: ])"
intentions.switch.property.dot.method=Переключить нотацию '.' и метода
intentions.switch.to.dot.notation=Переключить на нотацию '.'
intentions.switch.to.getter.notation=Переключить на нотацию getter-метода
intentions.switch.to.setter.notation=Переключить на нотацию setter-метода
intentions.synthesize.property=Синтезировать свойство
intentions.wrap.with.stringFormat=Обернуть в 'stringWithFormat'
no.suggestions.for.members=Нет предложений для членов {0}
no.suggestions.for.properties.of.class=Нет предложений для свойств класса {0}
progress.text.evaluating.unused.symbols=Анализ неиспользуемых символов
quick.fix.add_return_statement=Добавить оператор return
quick.fix.append.nil.argument=Добавить аргумент "nil"
quick.fix.change.format.specifier=Изменить спецификатор формата
quick.fix.change.pure.specifier=Изменить спецификатор pure на '\= 0'
quick.fix.copy.superclass.from.interface=Скопировать суперкласс из интерфейса
quick.fix.copy.superclass.to.interface=Скопировать суперкласс в интерфейс
quick.fix.insert.keyword=Вставить ''{0}''
quick.fix.make_default=Сделать {0} по умолчанию
quick.fix.optimize.imports=Оптимизовать импорты
quick.fix.optimize.includes=Оптимизовать включения
quick.fix.place.parentheses.around=Заключить в скобки
quick.fix.remove.accessor=Удалить аксессор
quick.fix.remove.arguments=Удалить аргумент(ы)
quick.fix.remove.attribute=Удалить атрибут
quick.fix.remove.declaration=Удалить объявление
quick.fix.remove.extra.declarators=Удалить лишние объявления
quick.fix.remove.from.base.classes.list=Удалить ''{0}'' из списка базовых классов
quick.fix.remove.initializer=Удалить инициализатор
quick.fix.remove.instance.variable.list=Удалить список переменных экземпляра
quick.fix.remove.method.body=Удалить тело метода
quick.fix.remove.property=Удалить свойство
quick.fix.remove.protocols.list=Удалить список протоколов
quick.fix.remove.pure.specifier=Удалить спецификатор pure
quick.fix.remove.redundant.cast=Удалить избыточное приведение типа
quick.fix.remove.statement=Удалить оператор
quick.fix.remove.superclass=Удалить суперкласс
quick.fix.remove.superclass.reference=Удалить ссылку на суперкласс
quick.fix.remove.synthesize.dynamic.statement=Удалить оператор '@synthesize'/'@dynamic'
quick.fix.remove.synthesize.statement=Удалить оператор '@synthesize'
quick.fix.remove.useless.import=Удалить неиспользуемый импорт
quick.fix.remove.useless.include=Удалить неиспользуемый include
quick.fix.remove.user.defined.getter.method=Удалить пользовательский getter-метод
quick.fix.remove.user.defined.setter.method=Удалить пользовательский setter-метод
quick.fix.send.release.message.instead.dealloc=Отправить сообщение "release" вместо "dealloc"
unused.inspection.run.in.headers=Запускать проверку в заголовочных файлах