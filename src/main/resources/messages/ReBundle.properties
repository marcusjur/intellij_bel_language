DbColumnsCheckboxTreeCellRenderer.forAssociation=для связи
DbColumnsCheckboxTreeCellRenderer.from=из
DbColumnsCheckboxTreeCellRenderer.incomingAttribute.tooltip=Ссылка из ''{0}'' через ограничение внешнего ключа - ''{1}''
DbColumnsCheckboxTreeCellRenderer.notNull=не null
DbColumnsCheckboxTreeCellRenderer.to=в
DbColumnsCheckboxTreeCellRenderer.viaJoinTable=через таблицу связи
DisplayName.entityDeclaration=Объявление JPA Entity
DisplayName.reverseEngineering=JPA Reverse Engineering
NameCase.AsIs=Как есть
NameCase.Lower=Нижний регистр
NameCase.Upper=Верхний регистр
RelationPanel.label.id.columns=Id столбцы\:
SettingsPage.accessModifier=Модификатор доступа атрибутов сущности по умолчанию
SettingsPage.accessModifierPrivate=private
SettingsPage.accessModifierProtected=protected
SettingsPage.className=Имя класса
SettingsPage.className.error=Необходимо указать имя класса
SettingsPage.className.notFoundError=Класс с указанным именем не найден
SettingsPage.constants.columnNames=Имя столбца
SettingsPage.constants.entityNames=Имя сущности
SettingsPage.constants.error=Необходимо указать имена классов для всех persistence unit
SettingsPage.constants.tableNames=Имя таблицы
SettingsPage.constantsSeparator=Генерация констант
SettingsPage.generateJpaOnGetter=Генерировать JPA-аннотации на геттер-методах
SettingsPage.generateSerialVersionUID=Генерировать поле Serial Version UID
SettingsPage.generationLanguage=Язык генерации
SettingsPage.indexConstraintNameCase=Регистр имен индексов/ограничений
SettingsPage.innerClassName=Имя внутреннего класса
SettingsPage.interfaceName=Имя интерфейса
SettingsPage.interfaceName.notInterface=Указанный интерфейс не является интерфейсом
SettingsPage.lombok.allArgsConstructor=Генерировать @AllArgsConstructor
SettingsPage.lombok.builder=Генерировать @Builder
SettingsPage.lombok.getterAndSetter=Генерировать @Getter и @Setter
SettingsPage.lombok.noArgsConstructor=Генерировать @NoArgsConstructor
SettingsPage.lombok.onlyExplicitlyIncluded=Генерировать @ToString с onlyExplicitlyIncluded \= true
SettingsPage.lombok.separator=Lombok
SettingsPage.lombok.toString=Генерировать @ToString
SettingsPage.mapReferencesToBasicType=Заменить ORM-ссылки на атрибуты базового типа
SettingsPage.placeToGenerate=Где размещать константы
SettingsPage.putValuesIntoConstants=Генерировать константы для имен новых объектов
SettingsPage.re.naming.strategy.algorithm=Алгоритм
SettingsPage.re.naming.strategy.algorithm.incorrect=Не удаётся скомпилировать пользовательский алгоритм именования
SettingsPage.re.naming.strategy.configs=Конфигурации
SettingsPage.registerTypesOnEntity=Регистрировать пользовательские типы Hibernate на сущности
SettingsPage.templatesSeparator=Шаблоны имен
SettingsPage.unpluralizeTableName=Преобразовывать имя таблицы в единственное число для генерации имени класса
SettingsPage.useBuilderSetters=Генерировать "return this;" в сеттерах атрибутов
SettingsPage.useLazy=Использовать FetchType.LAZY для ассоциаций @OneToOne и @ManyToOne
SettingsPage.useValidationAnnotation=Использовать аннотации валидации (NotNull, Size и т.д...)
action.JpbCreateUJpaEntityFromTable.text=Создать {0} из БД…
action.ReBulkReverseEngineering.text={0} из БД…
action.ReEntityAttributeFromDb.text=Создать {0} из БД…
action.ReNewEntityAttributeFromDb.text=Атрибуты сущности из БД…
action.move.down.text=Переместить вниз
action.move.up.text=Переместить вверх
action.refresh.description=Обновить
action.refresh.text=Обновить
addition.options=Опции
column.name.attribute=Атрибут
column.name.case=Регистр
column.name.class=Класс
column.name.column.reference.name=Имя столбца/ссылки
column.name.mapping.type=Тип маппинга
column.name.name=Имя
column.name.persistence.unit=Persistence unit
column.name.pluralize=Множественное число
column.name.postfix=Постфикс
column.name.prefix=Префикс
column.name.target=Цель
column.name.underscore=Подчеркивание
command.name.create.datatype.objects=Создать объекты типов данных
command.name.create.entity.attributes=Создать атрибуты сущности
comment.saving.strategy=Добавить как
comments=<html>Комментарии к таблицам и столбцам</html>
db.type=Тип БД
java.type=Атрибут/Конвертер/Hibernate тип
label.error=Ошибка\!
mapping.type.editor=Редактор типов маппинга
naming.rules=Правила именования
please.select.table=Пожалуйста, выберите {0}
popup.title.reverse.engineering=Reverse Engineering
prefixes.to.skip.in.column.name=Префиксы для пропуска в имени столбца
prefixes.to.skip.in.column.name.description=Если указаны префиксы для пропуска <b>d_, t_</b> и reverse engineering применяется к столбцам <b>d_first_name</b> и <b>t_email</b>, их префиксы не появятся в соответствующих именах полей сущности, поэтому результирующие имена будут <b>firstName</b> и <b>email</b> вместо <b>dFirstName</b> и <b>tEmail</b>
prefixes.to.skip.in.table.name=Префиксы для пропуска в имени таблицы
prefixes.to.skip.in.table.name.description=Если указаны префиксы для пропуска <b>sys_, p_</b> и reverse engineering применяется к таблицам <b>sys_user</b> и <b>p_product</b>, их префиксы не появятся в соответствующих именах сущностей, поэтому результирующие имена будут <b>User</b> и <b>Product</b> вместо <b>SysUser</b> и <b>PProduct</b>
progress.title.create.entity.attributes=Создание атрибутов сущности…
relation.panel.initRelations=Инициализовать связи сущностей
reserved.keyword.field.suffix=Суффикс поля для зарезервированных слов
reverseEngineering.notifications=Уведомления JPA Reverse Engineering
sql.type=SQL тип
suffixes.to.skip.in.column.name=Суффиксы для пропуска в имени столбца
suffixes.to.skip.in.column.name.description=Если указаны суффиксы для пропуска <b>_d, _t</b> и reverse engineering применяется к столбцам <b>first_name_d</b> и <b>email_t</b>, их префиксы не появятся в соответствующих именах полей сущности, поэтому результирующие имена будут <b>firstName</b> и <b>email</b> вместо <b>firstNameD</b> и <b>emailT</b>
suffixes.to.skip.in.table.name=Суффиксы для пропуска в имени таблицы
suffixes.to.skip.in.table.name.description=Если указаны суффиксы для пропуска <b>_sys, _p</b> и reverse engineering применяется к таблицам <b>user_sys</b> и <b>product_p</b>, их префиксы не появятся в соответствующих именах сущностей, поэтому результирующие имена будут <b>User</b> и <b>Product</b> вместо <b>UserSys</b> и <b>ProductP</b>
target.type=Целевой тип
unmapped.parent.attributes=<html>Некоторые атрибуты родительской сущности сопоставлены с несуществующими столбцами в соответствующей таблице. Если вы хотите сохранить эти атрибуты, вы можете создать их столбцы вручную или автоматически сгенерировать DDL с помощью JPA Buddy. Посмотрите <a href\='https\://youtu.be/a-K-53_8Pcg'>это видео</a>, чтобы увидеть, как это работает.</html>
warning.composite.key.not.supported={0} не поддерживает составные ключи, эта таблица не может быть автоматически и корректно сопоставлена
zero.table.found=<html><p>Не удалось найти таблицы/представления в базе данных, для которых можно сгенерировать сущности. Это может быть связано с одной из следующих причин\:</p><ol><li>Выбрано неверное подключение к БД.</li><li>В базе данных нет таблиц или представлений.</li><li>Таблицы или представления находятся в нестандартной схеме. В этом случае попробуйте настроить подключение к БД, следуя этим <a href\="https\://www.jetbrains.com/help/idea/schemas.html" target\="_blank">инструкциям</a>.</html>