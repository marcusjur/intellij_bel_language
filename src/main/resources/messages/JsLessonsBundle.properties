js.editor.basics.module.description=Освойте основные возможности редактора – начните писать более качественный код и экономить время на типичных задачах с первого дня.
js.editor.basics.module.name=Основы редактора
js.editor.code.editing.comment.delete.unselect.move.up.1=Теперь, когда вы выделили код, вы можете закомментировать/раскомментировать его ({0}), удалить ({1}) или уменьшить выделение ({2}).
js.editor.code.editing.comment.delete.unselect.move.up.2=Еще одно, что вы можете сделать - это переместить этот код вверх или вниз по файлу. Давайте переместим его вверх с помощью {0}.
js.editor.code.editing.duplicate.delete.comment=Наконец, давайте быстро попробуем самые популярные действия со строками, такие как дублирование строки, удаление строки или комментирование. Используйте {0}, чтобы дублировать выделенную строку. Затем нажмите {1} и {2}, чтобы попробовать другие действия со строками.
js.editor.code.editing.multi.caret.1=Далее - мультикурсорное редактирование. Используйте его для экономии времени при одновременном изменении кода в нескольких местах. Поместите курсор внутри первого тега {0} (строка 10). Затем выделите все теги {1} внутри того же элемента tr (строки 10-12)\: нажмите {2} шесть раз, пока не будут выделены все нужные теги.
js.editor.code.editing.multi.caret.2=Давайте заменим {0} на {1} и нажмем {2}, чтобы выйти из режима мультикурсора.
js.editor.code.editing.next=На этом урок закончен. Нажмите кнопку ниже, чтобы начать следующий, или используйте {0}.
js.editor.code.editing.reformat.start=Рассмотрим некоторые советы и приемы, которые помогут вам редактировать код намного быстрее. Для начала, в <ide/> нет необходимости вручную исправлять форматование кода. Переформатируйте код с помощью {0}.
js.editor.code.editing.select.word=Теперь посмотрим, как быстро выделять фрагменты кода в файле. Нажмите {0} несколько раз, чтобы полностью выделить второй элемент tr (строки 14-18).
js.editor.code.editing.tips.and.tricks.title=Советы и приемы редактирования кода
js.editor.code.inspection.checkmark=Если теперь посмотреть в правый верхний угол редактора, вы увидите зеленую галочку ({0}), подтверждающую, что в файле больше нет проблем. Однако есть еще одна мелкая деталь, которую можно оптимизовать, чтобы сделать код короче. Поместите курсор на {1} (строка 3) и нажмите {2}.
js.editor.code.inspection.intro=Во время работы в редакторе <ide/> постоянно анализует ваш код, обнаруживает различные проблемы и предлагает способы их исправления. В открытом файле есть две подсвеченные проблемы в строках 4 и 5. Давайте проверим, что это за проблемы, нажав {0}.
js.editor.code.inspection.make.shorter=Теперь давайте сделаем наше функциональное выражение короче. Выберите быстрое исправление {0} и нажмите {1}.
js.editor.code.inspection.next=На этом урок закончен. Нажмите кнопку ниже, чтобы начать следующий, или используйте {0}.
js.editor.code.inspection.run.intention=Давайте выберем {0} и нажмем {1}.
js.editor.code.inspection.show.intentions.1=Вы также можете использовать {0} для перехода от одной ошибки к другой. Или можете изучить найденные проблемы, наведя на них курсор.
js.editor.code.inspection.show.intentions.2=В этом файле ИСР обнаружила неразрешённую переменную – которая не была определена нигде в коде. Она предлагает создать новую переменную {0} как одно из возможных исправлений, но нам нужно добавить параметр book. Поместите курсор на {1} и нажмите {2}, чтобы увидеть полный список исправлений.
js.editor.code.inspection.title=Инспекции кода
js.editor.completion.add.parameter=Так вы можете просматривать документацию по JavaScript прямо в <ide/>. Теперь добавьте {0} внутри {1}, чтобы продолжить.
js.editor.completion.choose.lookup=<ide/> содержит множество функций, которые помогут вам писать более качественный код и повысить продуктивность. Начнем с автодополнения кода. Оно позволяет ускорить написание кода, дополняя ключевые слова и символы из API языка и зависимостей проекта. Введите {0} и нажмите {1}, чтобы автоматически дополнить {2}.
js.editor.completion.choose.method=Таким образом, автодополнение показывает контекстные предложения по мере ввода. Чтобы добавить одно из этих предложений, можно использовать {0}, как мы только что сделали, или нажать {1}, чтобы заменить существующий элемент. Теперь добавьте {2} после {3}, затем введите {4} и автоматически дополните метод {5} с помощью {0}.
js.editor.completion.console.log.argument=Наконец, давайте завершим оператор {0}. Поместите курсор внутри {1} на строке 8 и добавьте {2}, используя автодополнение кода.
js.editor.completion.next=На этом урок закончен. Чтобы начать следующий, нажмите кнопку ниже или используйте {0}.
js.editor.completion.parameter.info=Всплывающая подсказка ({0}), которая появляется после установки курсора внутри {1}, позволяет быстро просмотреть имена параметров методов и функций. В некоторых случаях может потребоваться просмотреть более подробную документацию. Давайте сделаем это, нажав {2}.
js.editor.completion.title=Автодополнение кода
js.editor.navigation.activate.structure=Инструментальное окно {0} может помочь вам быстрее изучить файл. Оно предоставляет обзор его структуры и позволяет перейти к определённому элементу, просто введя его имя. Начните вводить {1} в любом месте области инструментального окна, нажмите {2}, а затем нажмите {3}, чтобы закрыть панель и перейти к коду.
js.editor.navigation.choose.structure=С помощью этого всплывающего окна вы можете быстро переключаться между недавними файлами и инструментальными окнами ИСР. Одно из этих инструментальных окон может помочь вам в навигации по отдельному файлу. Нажмите на вкладку {0}, чтобы узнать больше.
js.editor.navigation.find.usages=В результате наших действий курсор переместился к {0} (строка 9). Оставим его там и нажмем {1}, чтобы открыть другое инструментальное окно, которое поможет быстро найти использования любого элемента.
js.editor.navigation.go.to.declaration=Обратите внимание на {0} рядом с <strong>Перейти к объявлению или использованиям</strong> – оно показывает использования для определения и наоборот. Давайте закроем всплывающее окно, поместим курсор на {1} (строка 16) и нажмем {0}, чтобы найти его объявление.
js.editor.navigation.hide.tool.window=Теперь вы можете видеть использования giveTreat во всем проекте и библиотеках. Давайте закроем инструментальное окно с помощью {0}.
js.editor.navigation.keymap.reference=Поздравляем\! Вы дошли до конца {0}. Распечатайте <a href\="{1}">справочник по сочетаниям клавиш</a>, чтобы иметь все сочетания под рукой, пока вы осваиваетесь в <ide/>. Нажмите кнопку ниже, чтобы перейти к следующему модулю.
js.editor.navigation.recent.files=Давайте начнем с навигации по проекту. Нажмите {0}, чтобы вызвать всплывающее окно {1}.
js.editor.navigation.search.action=Теперь, когда мы находимся на вкладке {0}, давайте начнем вводить {1} в строке поиска, чтобы найти сочетание клавиш для другой полезной функции навигации.
js.editor.navigation.search.everywhere=Теперь нажмите {0} дважды, чтобы познакомиться с еще одной функцией, которая поможет вам искать быстрее.
js.editor.navigation.search.everywhere.tabs=Это всплывающее окно {0}. Оно позволяет мгновенно находить любое действие, файл, класс или символ и показывает все совпадения в одном месте. Если вы хотите выполнить более конкретный поиск, вы можете нажать {1}, чтобы переключиться с {2} на любую другую вкладку, например {3} или {4}. Или вы можете использовать сочетание клавиш для открытия нужной вкладки. Давайте попробуем последний вариант с помощью {5}.
js.editor.navigation.title=Навигация
js.editor.refactoring.replace=Теперь замените оба вхождения на переменную {0} с именем {1}.
js.editor.refactoring.select.expression=Давайте создадим новую переменную {0}, которая будет содержать {1}. Выберите выражение {1} из списка и нажмите {2}.
js.editor.refactorings.next=Вы только что изучили два способа рефакторинга кода в <ide/>. Распечатайте <a href\="{0}">справочник по сочетаниям клавиш</a>, если предпочитаете использовать сочетания клавиш, или просто продолжайте использовать меню {1}. Нажмите кнопку ниже, чтобы начать следующий урок, или используйте {2}.
js.editor.refactorings.rename=С помощью {0} вам не нужно запоминать все рефакторинги или их сочетания клавиш. Нажмите {1}, чтобы увидеть один из самых популярных рефакторингов в действии.
js.editor.refactorings.rename.apply=Переименуйте параметр {0} в {1} и нажмите {2}. Это действие применит изменения во всех файлах проекта.
js.editor.refactorings.shortcut=Отлично\! Давайте попробуем выполнить рефакторинг кода с помощью сочетания клавиш. Поместите курсор на свойство {0} (строка 4) и нажмите {1}.
js.editor.refactorings.this=<ide/> имеет <a href\=''{0}''>множество рефакторингов</a>, которые могут автоматически реструктурировать существующий код без изменения его поведения во всем проекте. Давайте посмотрим список рефакторингов, доступных для параметра {1}. Нажмите {2} или выберите {3} из главного меню.
js.editor.refactorings.title=Рефакторинг кода
js.getting.started.module.description=Узнайте, как оптимизовать модульное тестование в {0} на примере использования Jest.
js.getting.started.module.name=Начало работы с тестованием
js.readme.description=Этот интерактивный курс поможет вам научиться выполнять типичные задачи, такие как рефакторинг кода или навигация по проектам.\n\nКурс будет наиболее полезен тем, кто только начинает работать с {0}. Однако если вы опытный пользователь {0} и хотите проверить, знаете ли вы все основные сочетания клавиш, мы также рекомендуем вам его пройти.
js.readme.feedback.header=Поделиться отзывом
js.readme.usage.header=Как проходить курс
js.testing.jest.coverage.result=Так вы можете быстро создать отчёт о покрытии кода, показывающий, сколько файлов было покрыто тестами, включая процент строк, которые были покрыты в этих файлах. Теперь давайте закроем отчёт о покрытии с помощью {0}.
js.testing.jest.end=Поздравляем\! Вы дошли до конца этого модуля. Большая часть того, что мы изучили, также применима к другим тест-раннерам, поддерживаемым <ide/> (за исключением покрытия кода и режима наблюдения). Для получения дополнительных советов и приемов по тестованию приложений с помощью Jest, пожалуйста, ознакомьтесь с <a href\="{0}">этой</a> статьей в блоге. Если вы используете другие тест-раннеры, вам может быть полезно изучить нашу <a href\="{1}">веб-справку</a>.
js.testing.jest.fix.test.1=Если теперь навести курсор на {0} в редакторе, вы увидите всплывающее окно с объяснением причины неудачи теста. Оттуда же при необходимости можно отладить тест.
js.testing.jest.fix.test.2=Теперь давайте заменим неправильное значение, используемое для {0}\: в строке 6 замените {1} на {2}.
js.testing.jest.navigate.1=Теперь мы видим инструментальное окно {0} с результатами тестов и трассировкой стека для неудачных тестов из тест-раннера. Помимо простого отслеживания прогресса тестования, здесь можно делать много других вещей. Вы можете перезапустить все ({1}) или только неудачные ({2}) тесты, просмотреть пройденные тесты ({3}) или включить <a href\="{4}">режим наблюдения</a> для автоматического перезапуска тестов при изменениях.
js.testing.jest.navigate.2=Вы также можете быстро найти определённый тест в {0}. Давайте попробуем сейчас\: поместите курсор в любое место в области {0}, введите {1} и нажмите {2}, чтобы перейти к нашему тесту.
js.testing.jest.prepare=С помощью <ide/> все процессы тестования становятся проще. Давайте посмотрим как. Для этого модуля мы будем использовать <a href\="{0}">Jest</a> и один из <a href\="{1}">его примеров проектов</a>, поэтому <strong>убедитесь, что у вас установлены Jest и npm/Yarn</strong> на вашем компьютере (см. <a href\="{2}">эту</a> веб-страницу для получения дополнительной информации). Начнем с создания конфигурации запуска/отладки, которая будет специфична для Jest. В главном меню выберите {3}. Затем нажмите {4}, добавьте конфигурацию {5} с параметрами по умолчанию и нажмите {6}, чтобы сохранить ее.
js.testing.jest.re.run.test.1=Теперь, когда у нас есть правильное значение для ожидаемого результата, мы можем перезапустить наш тест. Видите значок {0} слева от теста в редакторе? Этот значок не только показывает статус недавно запущенных тестов, но и позволяет быстро запускать и отлаживать определённый тест.
js.testing.jest.re.run.test.2=Нажмите на него и выберите {0}.
js.testing.jest.run=Итак, теперь новая конфигурация {0} выбрана по умолчанию. Давайте нажмем кнопку {1} ({2}) рядом с ней.
js.testing.jest.success.run.coverage.1=Отличная работа\! Наш тест успешно пройден.
js.testing.jest.success.run.coverage.2=Давайте посмотрим на еще один удобный инструмент. Нажмите на значок {0}, расположенный рядом с меню конфигураций запуска/отладки.
js.testing.jest.title=Основы тестования в {0}