swift.code.generations.module.description=Создание из использования, переопределение/реализация и применение быстрых исправлений.
swift.code.generations.module.name=Генерация кода
swift.codegeneration.cfu.create.class=Теперь мы можем использовать тот же способ для создания объявления класса. Нажмите {0}, выберите <strong>Создать тип ''ИСР''</strong>, затем нажмите {1}. Обратите внимание, что вы можете автоматически создать его вложенным в текущий класс или в новом файле.
swift.codegeneration.cfu.create.empty.init=Наконец, добавьте пустой инициализатор тем же действием.
swift.codegeneration.cfu.create.init=Отлично\! Давайте повторим то же действие для генерации инициализатора класса {0}. Нажмите {1}, выберите <strong>Создать инициализатор</strong>, затем нажмите {2}.
swift.codegeneration.cfu.create.local=В <ide/> нажмите {0} на неразрешённой сущности, чтобы создать различные кодовые структуры на основе их использования. Нажмите {1}, выберите <strong>Создать локальную переменную ''label''</strong>, затем нажмите {2}.
swift.codegeneration.cfu.help.link=Генерация методов и свойств из использования
swift.codegeneration.cfu.name=Создать из использования
swift.codegeneration.cfu.nice=Отлично\! Обратите внимание, как генерируются параметры и их имена.
swift.codegeneration.cfu.repeat=Повторите то же действие для создания функции {0}.
swift.codegeneration.generate.description=Наконец, сгенерируйте {0}, используя действие {1} → <strong>description</strong>.
swift.codegeneration.generate.hash=Используйте {2} → <strong>equals и hash</strong> для генерации {0} и {1}.
swift.codegeneration.generate.help.link=Генерация кода
swift.codegeneration.generate.init=Нажмите {0}, затем выберите <strong>Инициализатор</strong> во всплывающем окне <strong>Сгенерировать</strong>. Выберите свойства для включения в сигнатуру инициализатора и нажмите {1}.
swift.codegeneration.generate.intro=Вы можете использовать действие <strong>Сгенерировать</strong> для генерации {0}, {1}, {2}, {3} свойств и инициализаторов.
swift.codegeneration.generate.name=Сгенерировать
swift.codegeneration.overrideimplement.help.link.1=Переопределение методов суперкласса
swift.codegeneration.overrideimplement.help.link.2=Реализация методов интерфейса или абстрактного класса
swift.codegeneration.overrideimplement.implement=Нажмите {0} → {1} и добавьте заглушки для всех необходимых методов в {2}.
swift.codegeneration.overrideimplement.intro=Вы можете использовать действие <strong>Переопределить/Реализовать</strong> ({0}/{1}) для переопределения любого метода родительского класса или реализации любого протокола.
swift.codegeneration.overrideimplement.name=Переопределить/Реализовать
swift.codegeneration.overrideimplement.override=Теперь давайте попробуем переопределить несколько методов одновременно. Нажмите {0} и начните вводить {1}. Список методов и свойств для переопределения должен быть отфильтрован до двух методов. Нажмите {2} → {3}, чтобы переопределить их.
swift.codegeneration.quickfix.error.handling=Намерения обработки ошибок позволяют добавить {0} там, где это необходимо. Нажмите {1} → {2} и выберите быстрое исправление.
swift.codegeneration.quickfix.explicit.type=Чтобы добавить или удалить явный тип для некоторых переменных, просто нажмите {0} и выберите <strong>Добавить/удалить явный тип</strong>. Попробуйте это с переменной {1}.
swift.codegeneration.quickfix.fixit=Нажмите {0}, затем выберите <strong>Применить Fix-it</strong>, чтобы заменить неиспользуемую переменную на {1}.
swift.codegeneration.quickfix.go.next.error=Нажмите {0}, чтобы перейти к следующей ошибке.
swift.codegeneration.quickfix.go.next.warning=Нажмите {0}, чтобы перейти к следующему предупреждению.
swift.codegeneration.quickfix.help.link.1=Действия намерений
swift.codegeneration.quickfix.help.link.2=Получение результатов и исправление проблем
swift.codegeneration.quickfix.intro=<ide/> показывает те же {0} для вашего Swift-кода, что и Xcode.
swift.codegeneration.quickfix.name=Быстрые исправления и намерения
swift.codegeneration.quickfix.redundant=Вы также можете удалить избыточный атрибут {0}. Нажмите <shortcut>⇧⌥⏎</shortcut>.
swift.codegeneration.quickfix.sourcekit.fixit=Как видите, в этом коде есть несколько проблем. Давайте исправим некоторые из них. Выберите <strong>Swift→Проверка SourceKit</strong>, затем нажмите кнопку <strong>Применить Fix-it</strong> справа. Это исправит все проблемы в группе.
swift.codegeneration.quickfix.sourcekit.inspection=AppCode также интегрирует SourceKit как отдельную проверку. Это означает, что вы можете запустить её по всему файлу и исправить все проблемы одновременно, когда возможно несколько исправлений. Нажмите {0}.
swift.codegeneration.quickfix.typo.in.string=Обратите внимание, что все использования переменной переименовываются автоматически. Теперь попробуйте исправить строку {1} с помощью "{0}".
swift.codegeneration.quickfix.typo.in.var=Теперь нажмите {0}, чтобы вернуться в окно редактора, поместите курсор на неправильно написанное имя переменной и нажмите {1}. Выберите <strong>Опечатка\: переименовать в…</strong>, выберите правильный вариант и нажмите {2}.
swift.editor.comment=Комментирование
swift.editor.comment.block=Нажмите {0} дважды, чтобы выбрать {1}, затем используйте {2}, чтобы закомментировать его как блок.
swift.editor.comment.help.link=Документирование кода
swift.editor.comment.intro=Используйте {0}, чтобы закомментировать любую строку.
swift.editor.comment.several.lines=Выберите несколько строк с помощью {0} и закомментируйте их с помощью {1}.
swift.editor.comment.uncomment=Раскомментируйте закомментированные строки той же комбинацией клавиш {0}.
swift.editor.completion.basic=По умолчанию <ide/> выполняет автодополнение мгновенно. Начните вводить {0} там, где находится курсор, затем нажмите {1}, чтобы выбрать функцию {2}.
swift.editor.completion.basic.shortcut=Вы всегда можете вызвать базовое автодополнение, нажав {0}.
swift.editor.completion.go.next=Отлично\! Нажмите кнопку ниже, чтобы начать следующий урок, или используйте {0}.
swift.editor.completion.help.link=Автодополнение кода
swift.editor.completion.name=Автодополнение
swift.editor.completion.show=Теперь нажмите {0}, чтобы показать варианты автодополнения.
swift.editor.completion.smart=Умное автодополнение типов фильтрует список предложений, оставляя только типы, применимые в текущем контексте. Нажмите {0}, чтобы увидеть список подходящих предложений. Нажмите {1}, чтобы выбрать первое.
swift.editor.completion.tab=Выберите запись {0} и нажмите {1} (вместо {2}). Это заменит слово под курсором, а не просто вставит его.
swift.editor.completion.tab.method=Теперь вызовите {0} и {1}, легко заменив {2} с помощью {3}.
swift.editor.delete.action=Удалите текущую строку с помощью {0}.
swift.editor.delete.help.link=Строки кода
swift.editor.delete.name=Удаление
swift.editor.delete.undo=Чтобы восстановить удалённую строку, нажмите {0}.
swift.editor.duplicate.line=Дублируйте любую строку с помощью {0}.
swift.editor.duplicate.name=Дублирование
swift.editor.duplicate.several.lines=Вы можете выполнить то же действие с несколькими строками. Выберите две или более строки и дублируйте их с помощью {0}.
swift.editor.folding.block=Наконец, используйте {0}, чтобы свернуть операторы управления потоком.
swift.editor.folding.collapse=Иногда нужно свернуть часть кода для лучшей читаемости. Попробуйте свернуть код с помощью {0}.
swift.editor.folding.collapse.all=Чтобы свернуть все области в файле, используйте {0}.
swift.editor.folding.collapse.statement.any=В <ide/> есть способ свернуть любую последовательность операторов или объявлений. Попробуйте свернуть выделенную область с помощью {0}.
swift.editor.folding.expand=Чтобы развернуть область кода, нажмите {0}.
swift.editor.folding.expand.all=Аналогично, нажмите {0}, чтобы развернуть все доступные области.
swift.editor.folding.expand.statement=Теперь нажмите {0}, чтобы развернуть оператор.
swift.editor.folding.help.link=Сворачивание кода
swift.editor.folding.name=Сворачивание
swift.editor.format.help.link=Переформатование и перекомпоновка кода
swift.editor.format.name=Форматование кода
swift.editor.format.reformat=<ide/> может помочь исправить форматование кода одним действием. Используйте {0}, чтобы переформатовать выбранный код.
swift.editor.format.reformat.whole.file=Чтобы переформатовать весь исходный файл, используйте {0} без выбора строк. Нажмите {1}, затем {2}.
swift.editor.module.description=Узнайте, как выбирать, комментировать, удалять, дублировать и перемещать строки, форматовать код и многое другое.
swift.editor.module.name=Редактор
swift.editor.move.help.link=Перемещение операторов
swift.editor.move.line.down=Перестановка строк обычно требует двух действий\: вырезать и вставить. Но в <ide/> достаточно одного действия, так как {0} перемещает текущую строку вниз. Переместите текущую строку в конец функции {1}.
swift.editor.move.line.up=Аналогично, чтобы поднять строку вверх, используйте {0}. Переместите объявление {1} перед настройками.
swift.editor.move.name=Перемещение
swift.editor.popups.close.param.info=Нажмите {0}, чтобы закрыть всплывающее окно.
swift.editor.popups.doc=Нажмите {0}, чтобы увидеть документацию для символа под курсором.
swift.editor.popups.help.link=Быстрые всплывающие окна
swift.editor.popups.impl=Нажмите {0}, чтобы увидеть определение символа под курсором.
swift.editor.popups.name=Быстрые всплывающие окна
swift.editor.popups.param.info=Нажмите {0}, чтобы увидеть сигнатуру инициализатора.
swift.editor.selection.all=Теперь используйте {0}, чтобы мгновенно выбрать весь файл.
swift.editor.selection.expand=Нажмите {0}, чтобы расширить выделение до следующего блока кода.
swift.editor.selection.expand.more=Попробуйте увеличить выделение с помощью {0}, пока не будет выбран весь файл.
swift.editor.selection.help.link=Выбор структур кода
swift.editor.selection.name=Выделение
swift.editor.selection.shrink={0} уменьшает текущее выделение. Попробуйте нажать это.
swift.editor.selection.word=Поместите курсор перед любым словом. Нажмите {0}, чтобы переместить курсор к следующему слову и выделить всё между ними.
swift.editor.selections.column=Используйте "{0}" для переключения режима выделения столбцов, затем используйте клавиатуру ({3}), чтобы поместить курсоры на всех строках от {1} до {2}.
swift.editor.selections.help.link=Множественные курсоры и выделения
swift.editor.selections.name=Множественное выделение
swift.editor.selections.next=Нажмите {0}, чтобы выбрать символ под курсором.
swift.editor.selections.next.again=Нажмите {0} снова, чтобы выбрать следующее совпадение этого символа.
swift.editor.selections.reformat=Нажмите {0}, затем используйте {1} для переформатования кода, и готово\!
swift.editor.selections.replace=Введите {0}, чтобы заменить все совпадения {1} на {2}, затем нажмите {3}.
swift.editor.selections.select.all=Нажмите {0}, чтобы выбрать все совпадения в файле.
swift.editor.selections.select.sample=Теперь введите {0} и выберите все имена тестов, содержащие {1}.
swift.editor.selections.select.sample.toggle=Нажмите {0}, чтобы переключить тесты, затем нажмите {1} снова, чтобы выйти из режима выделения столбцов.
swift.editor.selections.unselect=Нажмите {0}, чтобы отменить выбор предыдущего совпадения.
swift.navigation.code.class=Давайте перейдем к классу {0}. Нажмите {1}, введите {2}, затем нажмите {3}.
swift.navigation.code.declaration=Другое важное действие в серии <strong>Перейти к...</strong> - это <strong>Перейти к объявлению</strong>. Поместите курсор на {0} и нажмите {1}, чтобы перейти к его объявлению.
swift.navigation.code.file=Отлично\! Теперь откройте файл {0}\: нажмите {1}, введите {2}, затем нажмите {3}.
swift.navigation.code.fuzzy=Каждый диалог <strong>Перейти к...</strong> поддерживает нечеткий поиск, поэтому можно найти класс, файл или символ, введя только часть его имени.
swift.navigation.code.go.back=Давайте вернемся к {0} с помощью {1}.
swift.navigation.code.help.link=Навигация по коду
swift.navigation.code.implementation=Если метод или класс имеет несколько реализаций, {0} приведет вас к первой. Попробуйте использовать {1}, чтобы увидеть все определения {2}.
swift.navigation.code.intro=При работе с проектом часто нужно открывать и редактировать определённые классы, файлы или символы. Самый быстрый способ - использовать основную навигационную тройку\: <strong>Перейти к классу/файлу/символу</strong>.
swift.navigation.code.name=Навигация по коду
swift.navigation.code.non.project.files=Если нужно включить стандартную библиотеку и другие непроектные файлы, символы или классы, просто дважды нажмите комбинацию клавиш.
swift.navigation.code.recent=Наконец, есть два очень полезных и часто используемых навигационных действия, которые помогают быстро переключаться между недавними файлами и окнами инструментов. Первое - это всплывающее окно <strong>Недавние файлы</strong>. Откройте его с помощью {0} и используйте клавиши со стрелками для выбора нужного.
swift.navigation.code.super=<strong>Перейти к родительскому определению</strong> переведет вас к объявлению родительского класса. Нажмите {0}, чтобы перейти к классу {1}.
swift.navigation.code.super.again=Теперь нажмите {0} снова, чтобы перейти к объявлению протокола {1}.
swift.navigation.code.switcher=Второе - это <strong>Переключатель</strong>, который выглядит похоже, но исчезает сразу после выбора. Удерживая <shortcut>⌃</shortcut>, нажмите {0}, затем нажмите еще раз для переключения между файлами или окнами инструментов. Отпустите <shortcut>⌃</shortcut> после выбора нужного.
swift.navigation.code.symbol=Перейдите прямо к объявлению {0} в классе {1}. Нажмите {2}, введите {3}, затем нажмите {4}.
swift.navigation.module.description=Окна, представления, навигация по коду, переход к источнику, объявлению/реализации, структуре файла и т.д.
swift.navigation.module.name=Навигация
swift.navigation.precise.comment.combo=Теперь нажмите {0} - {1} - {2}, чтобы закомментировать каждую из этих строк.
swift.navigation.precise.first.error=Используйте {0}, чтобы вернуться к первой ошибке.
swift.navigation.precise.first.warning=Теперь нажмите {0} снова - это должно указать на первое предупреждение в файле.
swift.navigation.precise.fix.warning=Нажмите {0}, затем используйте {1}, чтобы исправить первое предупреждение.
swift.navigation.precise.help.link=Навигация между ошибками и предупреждениями
swift.navigation.precise.intro=Несколько сочетаний клавиш для навигации по файлам кода могут значительно повысить эффективность разработки. Давайте быстро рассмотрим их.
swift.navigation.precise.jump.last.changes=Предположим, у вас есть длинный файл, и вы не помните, какие изменения были внесены и где. Нажмите {0}, чтобы перейти к последним изменениям в файле.
swift.navigation.precise.jump.line=Наконец, когда вам нужно перейти к определённой строке или столбцу в коде, нажмите {0}.
swift.navigation.precise.name=Точная навигация
swift.navigation.precise.next.error=В этом файле есть несколько предупреждений и ошибок. Нажмите {0} для перехода к первой ошибке.
swift.navigation.precise.next.error.again=Теперь используйте ту же комбинацию клавиш еще раз для перехода к следующей ошибке.
swift.navigation.precise.next.method=Нажмите {0} для быстрого перехода к следующему методу в текущем файле.
swift.navigation.precise.prev.method=Используйте {0} для перехода к предыдущему методу.
swift.navigation.search.action=Наконец, попробуйте использовать <strong>Найти действие</strong>({0}) для быстрого поиска и выполнения действий ИСР. Например, введите ''plugins'' чтобы открыть <strong>Настройки | Плагины</strong>.
swift.navigation.search.everything=Что если нужно искать символы, имена файлов или даже текст в настройках ИСР и пунктах меню? Нажмите <shortcut>⇧ дважды</shortcut> чтобы открыть диалог <strong>Поиск везде</strong>.
swift.navigation.search.find.usages.method=Теперь найдем все использования метода {0}. Снова нажмите {1} → {2}.
swift.navigation.search.find.usages.proto=Тот же рабочий процесс применим к любой другой структуре кода. Нажмите {0} → {1} чтобы найти все использования протокола {2} в этом проекте.
swift.navigation.search.find.usages.var=Не очень полезно, не так ли? В реальном коде мы можем захотеть искать переменную {0} без включения имен классов, методов или любых других структур кода. Попробуйте нажать {1}, затем {2}.
swift.navigation.search.find.usages.var.result=Теперь AppCode показывает только фактические использования переменной {0}.
swift.navigation.search.help.link.1=Поиск и замена в файле
swift.navigation.search.help.link.2=Поиск и замена в проекте
swift.navigation.search.intro=Поиск в AppCode отличается. У нас есть специальные возможности для поиска текста и отдельные для поиска кода. Это потому что код - это не просто текст, он имеет определённую структуру, образованную структурами кода.
swift.navigation.search.name=Поиск
swift.navigation.search.rule=Есть простое правило - определите символ, который нужно найти, а не фрагмент текста. <strong>Поиск использований</strong> работает с любой структурой кода в контексте проекта и найдет все её использования во всей кодовой базе.
swift.navigation.search.text.search=Конечно, иногда вы можете не знать, что ищете, и хотите найти как можно больше совпадений, выполнив поиск текста. В этом случае используйте {0} для поиска в текущем файле или {1} для поиска во всем проекте.
swift.navigation.search.var=В этом примере файла есть несколько структур кода, содержащих слово {0}. Текстовый курсор находится на переменной с именем {1}. Нажмите {2} чтобы найти все текстовые совпадения слова {3}.
swift.navigation.todo.activate=Хотите узнать, сколько TODO в вашем коде? В <ide/> есть специальное окно инструментов <strong>TODO</strong>. Нажмите {0} чтобы активировать его.
swift.navigation.todo.all.bookmarks=Используйте комбинацию клавиш {0} для просмотра всех закладок.
swift.navigation.todo.bookmark=Теперь нажмите {0}. Эта комбинация клавиш устанавливает закладку в коде. Закладки сохраняются в каталоге проекта и полезны, когда нужно направить коллегу к определённому месту в коде.
swift.navigation.todo.change.bookmark=Вы можете изменить имя закладки. Выберите закладку, нажмите {0}, введите новое имя и нажмите {1}.
swift.navigation.todo.custom=Вы можете определить собственные пользовательские фильтры <strong>TODO</strong>. Используйте {0} →<strong>Редактировать фильтры</strong> чтобы открыть диалог фильтров TODO и добавить фильтры с помощью регулярных выражений.
swift.navigation.todo.go.back=Нажмите {0} чтобы вернуться в редактор.
swift.navigation.todo.help.link.1=TODO комментарии
swift.navigation.todo.help.link.2=Избранное
swift.navigation.todo.name=TODO и закладки
swift.navigation.windows.breakpoints=Диалог <strong>Точки останова</strong> работает как навигатор <strong>Breakpoints</strong> в Xcode - он показывает список всех точек останова в проекте. Используйте {0} для его активации.
swift.navigation.windows.build=Вызовите {0} для сборки проекта.
swift.navigation.windows.build.messages=Окно инструментов <strong>Сообщения сборки</strong> показывает вывод компилятора, где вы можете фильтровать сообщения сборки по типу (см. кнопку <strong>Фильтровать сообщения</strong>({0}) слева).
swift.navigation.windows.debug=Окно инструментов <strong>Отладка</strong>({0}) похоже на навигатор <strong>Debug</strong> в Xcode. Оно показывает все watches и локальные переменные справа и список потоков слева.
swift.navigation.windows.dismiss.structure.popup=Используйте {0} чтобы закрыть это всплывающее окно или нажмите ⏎ для перехода к месту в коде.
swift.navigation.windows.files=<strong>Files</strong> view - это другой полезный режим <strong>Project</strong> view в <ide/>. Он показывает все файлы в каталоге, где находится {0} или {1}. Используйте этот вид для легкого открытия и просмотра любых файлов, не включенных в проект.
swift.navigation.windows.files.activate=Нажмите {0} чтобы активировать вид <strong>Files</strong>.
swift.navigation.windows.find=Диалог <strong>Найти в файлах</strong>({0}) предоставляет те же возможности, что и навигатор <strong>Find</strong> в Xcode. Попробуйте его сейчас для полнотекстового поиска.
swift.navigation.windows.go.to.file=Переключимся обратно с окна симулятора в ИСР и перейдем к {0} через {1}.
swift.navigation.windows.help.link=Обзор пользовательского интерфейса
swift.navigation.windows.init.git=Инициализуйте GIT репозиторий через {0}→<strong>Создать Git-репозиторий</strong>. Теперь активируйте окно инструментов <strong>СКВ</strong> комбинацией клавиш {1}.
swift.navigation.windows.intro=В <ide/> есть множество видов навигации. Знание того, какой вид вызывать в конкретной ситуации, поможет более эффективно использовать ИСР.
swift.navigation.windows.jump.to.source=Используйте клавиши ↑ и ↓ для выбора любой структуры кода здесь и нажмите {0} для перехода к месту в коде.
swift.navigation.windows.name=Основные окна и виды
swift.navigation.windows.project=Вид <strong>Project</strong> похож на Project navigator в Xcode. Он показывает все проекты в определённом workspace и все их файлы и группы. Нажмите ({0}) чтобы открыть вид <strong>Project</strong>.
swift.navigation.windows.project.settings=Нажмите на иконку "{0}" в меню опций Project view и выберите <strong>Tree Appearance | Xcode Order</strong> чтобы установить тот же порядок файлов, что и в Xcode (эта опция включается автоматически, если вы выбрали поведение Xcode при настройке <ide/>).
swift.navigation.windows.project.settings.more=Другие возможности включают <strong>Open Files with Single Click</strong> и <strong>Always Select Opened File</strong>. Open Files with Single Click автоматически открывает код файла при его выборе. Always Select Opened File автоматически устанавливает фокус на имени файла в виде <strong>Project</strong>, когда область редактора в фокусе.
swift.navigation.windows.project2=По умолчанию вид <strong>Project</strong> в <ide/> показывает файлы и папки в том порядке, в котором они хранятся в файловой системе.
swift.navigation.windows.return.to.editor=Нажмите {0} чтобы вернуться в окно редактора.
swift.navigation.windows.run=Теперь запустим наш проект в симуляторе и посмотрим на окно инструментов <strong>Run</strong>. Нажмите {0}.
swift.navigation.windows.run.window=Это окно инструментов показывает консоль, где вы можете видеть вывод приложения или вывод <strong>Test Runner</strong>, если запущена конфигурация <strong>Test</strong>. Вы всегда можете активировать его через ({0}).
swift.navigation.windows.stop=Нажмите {0} чтобы остановить приложение.
swift.navigation.windows.stop.debug=Нажмите {0} чтобы остановить приложение.
swift.navigation.windows.structure=Вид <strong>Structure</strong> и всплывающее окно <strong>Structure</strong> показывают структуру определённого файла и все {0}, {1} и комментарии {2} или {3} в коде. Они работают аналогично навигатору <strong>Symbol</strong> в Xcode.
swift.navigation.windows.structure.activate=Нажмите {0} чтобы активировать вид <strong>Structure</strong>.
swift.navigation.windows.structure.popup=Теперь активируйте всплывающее окно <strong>Structure</strong> через {0}.
swift.navigation.windows.toggle.break=Используйте {0} чтобы установить точку останова на строке 11, затем нажмите {1}.
swift.navigation.windows.vcs.window=Окно инструментов <strong>СКВ</strong> предоставляет все необходимое для работы с системой контроля версий, включая вид <strong>Changes</strong>, <strong>СКВ Log</strong> и другие.
swift.rdt.debug.eval=Используйте {1} чтобы выбрать {0}, затем используйте <strong>Evaluate Expression</strong>({2} → {3}).
swift.rdt.debug.eval.again=Введите точку, выберите некоторые свойства и нажмите {0} для вычисления без переключения в консоль LLDB.
swift.rdt.debug.help.link.1=Отладка кода
swift.rdt.debug.help.link.2=Отладка в AppCode
swift.rdt.debug.intro=Теперь давайте узнаем, как отлаживать ваш код.
swift.rdt.debug.name=Отладка
swift.rdt.debug.prepare=Нажмите {1} для перехода к {0}.
swift.rdt.debug.run.cursor=Теперь поместите текстовый курсор на строку 21 и выполните <strong>Run to Cursor</strong> через "{0}".
swift.rdt.debug.step.into=Нажмите {0} для шага внутрь, затем {1} для шага через.
swift.rdt.debug.step.over.next.line=Шаг через следующую строку.
swift.rdt.debug.stop=Нажмите {0} чтобы остановить отладку приложения.
swift.rdt.debug.toggle.break=Используйте {0} чтобы установить точку останова на строке 11, затем нажмите {1}.
swift.rdt.run.actions=<ide/> предоставляет два разных действия для запуска и отладки проекта (поскольку отладка обычно медленнее). Нажмите {0} чтобы запустить ваше приложение.
swift.rdt.run.another=Отлично\! Чтобы выбрать другую конфигурацию запуска или симулятор для текущей конфигурации и быстро запустить ваше приложение, нажмите {0}, выберите целевую конфигурацию или симулятор и нажмите {1}.
swift.rdt.run.final=Нажмите {0} чтобы остановить ваше приложение.
swift.rdt.run.help.link=Запуск приложения
swift.rdt.run.name=Запуск
swift.rdt.run.stop=Нажмите {0} чтобы остановить ваше приложение.
swift.rdt.test.additional=Вы можете сортировать тесты по длительности ({0}) или по алфавиту ({1}) используя специальные иконки в окне инструментов <strong>Test Runner</strong>. Нажмите {2} чтобы снова запустить все тесты и отсортировать их по длительности.
swift.rdt.test.debug.single=Теперь давайте отладим тест. Используйте "{0}" чтобы установить точку останова на строке и "{1}" чтобы отладить тест.
swift.rdt.test.delete.failed=Используйте {1} чтобы удалить {0}.
swift.rdt.test.failing=Теперь есть один неудачный тест. Используйте комбинацию клавиш {0} чтобы снова запустить все тесты.
swift.rdt.test.filter.failed=Нажмите на иконку "{0}" чтобы отфильтровать только неудачные тесты.
swift.rdt.test.go.back=Нажмите {1} чтобы вернуться к {0}.
swift.rdt.test.help.link.1=Создание тестов
swift.rdt.test.help.link.2=Модульное тестование в AppCode
swift.rdt.test.history=Встроенная история тестов автоматически сохраняет результаты последних тестовых прогонов и также загружает их в окно Test Runner. Нажмите на иконку "{0}" и выберите элемент из списка, чтобы загрузить предыдущий тестовый прогон.
swift.rdt.test.intro=<ide/> поддерживает множество тестовых фреймворков, включая XCTest, Quick, Kiwi, Catch, Boost.Test и Google Test. Давайте рассмотрим все общие возможности, доступные при тестовании приложения.
swift.rdt.test.intro.tests=<ide/> автоматически определяет область тестования на основе положения текстового курсора. Когда курсор находится где-то в тестовом файле, вы можете выполнить все тесты в этом файле. То же самое применимо к отдельным тестам. Чтобы запустить отдельный тест, поместите текстовый курсор внутрь тестового метода.
swift.rdt.test.more=Вот и все\! Для некоторых фреймворков (например, <strong>Quick</strong>) <ide/> предоставляет дополнительно улучшенное представление результатов тестов. Для обзора всех тестовых фреймворков, поддерживаемых <ide/>, посмотрите <a href\="https\://www.youtube.com/watch?v\=DXvx6xNG_jc">это видео</a>.
swift.rdt.test.name=Тестование
swift.rdt.test.prepare=Используйте {1} для перехода к {0}.
swift.rdt.test.rerun.failed=Теперь нажмите {0} чтобы перезапустить только неудачные тесты.
swift.rdt.test.resume=Нажмите {0} чтобы продолжить выполнение.
swift.rdt.test.show=Теперь давайте покажем тесты в древовидном представлении. Нажмите на иконку "{0}".
swift.rdt.test.single=Используйте ту же комбинацию клавиш {0} чтобы запустить отдельный тест.
swift.rdt.test.stop.debug=Нажмите {0} чтобы остановить отладку.
swift.rdt.test.suite=Нажмите {0} чтобы запустить все тесты в тестовом наборе.
swift.refactoring.change.signature.exec=Нажмите {0} чтобы изменить имя {1} на {2}.
swift.refactoring.change.signature.exec.again=Снова нажмите {0}. Нажмите на строку с параметром {1} и измените его на {2} или добавьте внутреннее имя параметра.
swift.refactoring.change.signature.final=Наконец, снова вызовите <strong>Change Signature</strong>, используйте кнопки {0}/{1} или комбинации клавиш <shortcut>⌥↑</shortcut>/<shortcut>⌥↓</shortcut> \n для изменения порядка параметров.
swift.refactoring.change.signature.help.link=Изменение сигнатуры
swift.refactoring.change.signature.intro=<strong>Change Signature</strong> - это рефакторинг, который позволяет одновременно изменять имена методов и функций, редактировать внутренние и внешние имена параметров, изменять их порядок, а также изменять видимость методов и функций.
swift.refactoring.change.signature.name=Изменение сигнатуры
swift.refactoring.extract.closure.exec=Нажмите {0}, затем выберите <strong>Extract Closure…</strong>.
swift.refactoring.extract.closure.help.link=Извлечение замыкания
swift.refactoring.extract.closure.intro=Вы можете использовать <strong>Extract Closure</strong> для инкапсуляции выделенного кода в новое замыкание с настраиваемыми параметрами и типом возвращаемого значения. Это работает аналогично рефакторингу "Extract Method".
swift.refactoring.extract.closure.name=Извлечение замыкания
swift.refactoring.extract.function.change.params=При извлечении функции в <ide/> вы можете изменить её сигнатуру. Нажмите на параметр в секции <strong>Parameters</strong> и используйте иконки {0}/{1} для изменения порядка параметров. Нажмите на строку параметра для изменения его имени.
swift.refactoring.extract.function.exec.again=Теперь нажмите {0} и попробуйте изменить сигнатуру извлеченной функции.
swift.refactoring.extract.function.help.link=Извлечение функции
swift.refactoring.extract.function.intro=<strong>Extract Function</strong> - это рефакторинг, который позволяет инкапсулировать выделенный код в новую функцию с настраиваемыми параметрами и типом возвращаемого значения. Давайте извлечем несколько строк кода в новую функцию {0}. Нажмите {1} -> {2}.
swift.refactoring.extract.function.name=Извлечение функции
swift.refactoring.extract.function.undo=Нажмите {0} чтобы отменить изменения.
swift.refactoring.extract.variable.description=<strong>Extract Variable</strong> не требует выбора конкретного фрагмента кода для извлечения. Просто поместите текстовый курсор на выражение и выберите нужное выражение.
swift.refactoring.extract.variable.exec=Нажмите {0} чтобы извлечь константу {1} в переменную или поле {2}.
swift.refactoring.extract.variable.exec.again=Теперь нажмите {0} и выберите его из списка, чтобы извлечь {1} в переменную {2}.
swift.refactoring.extract.variable.help.link=Извлечение переменной
swift.refactoring.extract.variable.name=Извлечение переменной
swift.refactoring.rename.any=Вы можете поместить текстовый курсор на символ и использовать рефакторинг <strong>Rename</strong> для переименования чего угодно.
swift.refactoring.rename.check=Нажмите {0}. Как видите, рефакторинг <strong>Rename</strong> работает глобально и даже переименовывает совпадения в файлах .xib и .storyboard.
swift.refactoring.rename.class=Повторите то же самое и переименуйте тип {0} в какое-нибудь новое значение.
swift.refactoring.rename.go.to.file=Нажмите {1} для перехода к {0}.
swift.refactoring.rename.help.link=Рефакторинг "Переименование"
swift.refactoring.rename.name=Переименование
swift.refactoring.rename.var=Давайте начнем с чего-то простого, например переименования поля {0} в {1}. Нажмите {2}, введите новое имя и нажмите {3}.
swift.refactorings.module.description=Переименование, извлечение переменных/методов и другие рефакторинги.
swift.refactorings.module.name=Рефакторинг
swift.run.debug.test.module.description=Узнайте, как запускать, отлаживать и тестовать ваше приложение.
swift.run.debug.test.module.name=Запуск, отладка, тестование