go.add.method.to.interface.generate=Нажмите {0} дважды, чтобы завершить редактирование и сгенерировать методы.
go.add.method.to.interface.implement=Можно сделать и обратное. Например, давайте добавим объявление метода {0} в объявление интерфейса и сгенерируем необходимые реализации для структур.\nНажмите {1} и выберите {2}. Затем введите {3}, нажмите {4} дважды и введите {5}.
go.add.method.to.interface.name=Добавление и удаление реализаций методов
go.add.method.to.interface.remove=Вы можете объявлять новые методы и удалять ненужные из объявления интерфейса.\nМетод {0} выглядит странно для структур {1} и {2}. Нажмите {3} и выберите {4}, чтобы удалить его объявление и все его реализации.
go.apply.fix=Выберите {0} и нажмите {1}.
go.basic.and.smart.type.completion.difference.basic=Чтобы вызвать базовое автодополнение, вы также можете нажать {0}.\nНажмите {0}, просмотрите список предложений и выберите {1}.
go.basic.and.smart.type.completion.difference.smart=Нам нужно вернуть указатель, но базовое автодополнение не предложило указателей. В этом случае может помочь умное автодополнение кода с учетом типов. Оно фильтрует список предложений и показывает только типы, применимые в текущем контексте.\nВызовите умное автодополнение, нажав {0}, выберите {1} из списка и нажмите {2}, чтобы заменить текущее значение.
go.basic.and.smart.type.completion.goto.next.error=Выбранное предложение подсвечено как ошибка в файле, нажмите {0}, чтобы узнать причину.
go.basic.and.smart.type.completion.name=Базовое и умное автодополнение типов
go.basic.and.smart.type.completion.type.and.choose=По умолчанию <ide/> дополняет ваш код мгновенно. Начните вводить {0} прямо там, где находится курсор, и вы увидите всплывающий список с подходящими предложениями. Выберите {0} из списка, нажав {1}.
go.basic.completion.invoke.completion=Обратите внимание, что <ide/> автоматически добавляет новый импорт. Теперь активируйте базовое автодополнение, нажав {0}, выберите {1} и нажмите {2}.
go.basic.completion.lesson.name=Базовое автодополнение
go.choose.name=Нажмите {0}, чтобы завершить рефакторинг.
go.code.completion.module.name=Автодополнение кода
go.comment.navigation.lesson.name=Объявления в комментариях
go.comment.navigation.task=Наш пакет {0} не такой большой, и мы можем легко в нем ориентироваться. Но некоторые пакеты могут быть огромными, с сотнями строк кода и комментариев.\nВ ИСР вы можете перейти к объявлениям из комментариев, если эти объявления находятся в том же пакете. Имена таких методов, функций и структур в комментариях окрашены немного по-другому. Как функция {1} в разделе комментариев в строке 32.\nЧтобы перейти к объявлению функции из этого комментария, поместите курсор на имя функции в комментарии и нажмите {2}.
go.comments.comment.block=Вы можете закомментировать блок кода. Например, давайте закомментируем выделенный блок, нажмите {0}.
go.comments.comment.one.line=Закомментируйте любую строку с помощью {0}.
go.comments.lesson.name=Добавление и удаление комментариев
go.comments.uncomment.block=Чтобы раскомментировать блок кода, нажмите {0} снова.
go.comments.uncomment.line=Раскомментируйте закомментированную строку той же комбинацией клавиш {0}.
go.completion.for.functions.choose.item=Выберите мигающую функцию {0} из списка и нажмите {1}. Когда вы видите список предложений, вы можете начать вводить текст, чтобы уменьшить количество результатов.
go.completion.for.functions.press.twice=Теперь введите точку ({0}) и нажмите {1} <strong>дважды</strong>. В этом случае ИСР найдет все функции, которые принимают строку в качестве первого аргумента. Обратите внимание, что точка делает это похожим на метод, хотя это не так.
go.debug.function.calls.add.arguments.for.evaluation=В скобках введите {0}. В поле должно отображаться {1}.
go.debug.function.calls.click.evaluate=Нажмите {0} или нажмите {1}. После этого вы можете закрыть диалог.
go.debug.function.calls.enter.expression.to.evaluate=В поле {0} начните вводить {1}, выберите {2} из списка предложений.
go.debug.function.calls.evaluate.expression=Вызовите действие {0}, нажав {1}.
go.debug.function.calls.lesson.name=Отладка вызовов функций
go.debug.function.calls.mac.note=Имейте в виду, что ваша операционная система может запросить пароль для запуска сервера отладки.
go.debug.function.calls.run.to.cursor=Курсор сейчас находится в конце строки 15. Нажмите {0}, чтобы увидеть, как работает действие {1}.
go.debug.function.calls.step.over=Попробуйте перешагнуть через конструкцию {0}, используя {1}.
go.debug.function.calls.toggle.breakpoint=В режиме отладки вы можете передавать различные значения в функцию и видеть, что функция возвращает. Подробнее о функции Вычисление выражения читайте в <a href\="{0}">документации</a>.\n{1}Чтобы начать отладку, нужно создать точку останова. Нажмите {2}, чтобы установить/снять точку останова.
go.debug.function.calls.version.warning=<strong>Примечание</strong>\: для этой функции необходимо установить Go 1.11 или выше.
go.debug.function.context.menu=Существуют разные способы отладки кода. Один из них - с помощью контекстного меню.\nЩёлкните правой кнопкой мыши по области в редакторе и выберите подсвеченный пункт меню {0}. Обратите внимание, точная формулировка может отличаться\: это может быть {1} в контексте функции {2}, или {3} в других контекстах.
go.debug.function.more.menu=Нажмите кнопку {0} в окне инструментов {1}.
go.debug.run.sample=Выберите пункт меню {0} или попробуйте {1}.
go.debug.stop.debug=Нажмите {0}, чтобы остановить отладку и завершить урок.
go.dump.goroutines.click.button.DlvFilterGoroutinesAction=На открытой вкладке {0} нажмите кнопку {1}.
go.dump.goroutines.click.button.more=Из выпадающего списка выберите {0}.
go.dump.goroutines.dump.tab=Вкладка {0} показывает список горутин вашего приложения. В нашем приложении их несколько. Но в вашем реальном приложении их может быть больше. В <ide/> вы можете применить фильтр для поиска определённой горутины и изучить отфильтрованные результаты.
go.dump.goroutines.filter.goroutines=В поле поиска {0} введите {1}, чтобы отфильтровать список. Этот фильтр оставляет только стеки выполнения с горутинами, которые имеют {1} в своем имени.
go.dump.goroutines.name=Дамп горутин
go.dump.goroutines.toggle.breakpoint=В Go параллельные задачи называются горутинами. Для создания горутины используется оператор {0} перед вызовом функции или метода.\nВы можете создать дамп всех горутин, которые использует ваша программа, применить фильтр для поиска определённой горутины и изучить отфильтрованные результаты.\nДля создания дампа горутин нужно начать отладку. Но сначала нужно создать точку останова. Нажмите {1}, чтобы установить/снять точку останова.{2}
go.extract.inline.variables.extract.task=Нажмите {0}, чтобы извлечь переменную, выберите строковое выражение, введите новое имя и нажмите {1}, чтобы завершить рефакторинг.
go.extract.inline.variables.inline.task=В противоположность рефакторингу {0}, {1} помогает удалить избыточную переменную. Нажмите {2}, чтобы встроить переменную в её единственное использование.
go.extract.inline.variables.lesson.name=Извлечение и встраивание переменных
go.extract.methods.with.returns.complete.refactoring=Введите {0} и нажмите {1}.
go.extract.methods.with.returns.intro=С помощью рефакторинга {0} вы можете взять фрагмент кода, переместить его в отдельный метод и заменить старый код вызовом нового метода. Если код завершается оператором return, он извлекается как есть. Подробнее о рефакторинге {0} читайте в статье <a href\="{1}">Извлечение функций и методов</a>.
go.extract.methods.with.returns.invoke.refactoring=Обратите внимание, что курсор находится перед конструкцией {0}, которую можно извлечь. Нажмите {1}.
go.extract.methods.with.returns.lesson.name=Извлечение методов
go.feature.trainer.specify.sdk.to.continue.learning.title=Укажите Go SDK для продолжения обучения
go.feature.trainer.too.old.go.sdk.notification.text=Для управления зависимостями с помощью Go модулей требуется Go SDK версии <b>{1}</b> или выше. Текущая версия вашего Go SDK - <b>{0}</b>.
go.feature.trainer.too.old.go.sdk.notification.title=Обновите Go SDK до версии <b>{0}</b> или выше
go.fmt.lesson.name=Форматование кода с помощью go fmt
go.fmt.task=Если вы предпочитаете форматовать код с помощью {0}, вы можете нажать {1}, чтобы запустить его.
go.formatting.clear.selection=Чтобы очистить выделение, нажмите {0}.
go.formatting.lesson.name=Форматование кода встроенным форматтером
go.formatting.reformat.selection=<ide/> может помочь вам с форматованием кода. Нажмите {0}, чтобы переформатовать выбранный блок кода.
go.formatting.whole.file=Чтобы переформатовать весь исходный файл, используйте {0}, когда не выбрано ни одной строки.
go.generics.change.casing=Прежде чем генерировать тестовый файл, давайте исправим наш стиль кода. В официальной документации Go имена параметров типов пишутся заглавными буквами, параметр {0} в нашем коде написан строчными буквами.\nЧтобы исправить регистр, мы можем использовать быстрое исправление. Для этого нажмите {1} и выберите {2}.
go.generics.click.function=Нажмите {0}, затем во всплывающем окне {1} выберите {2}.
go.generics.fix.type=Следующая проблема в нашем коде заключается в том, что тип содержит сам себя, вы получите ошибку {0}. Чтобы избежать этого, вы должны включить указатель на тип, а не сам тип. ИСР имеет быстрое исправление для этой ситуации.\nНажмите {1} и выберите {2}.
go.generics.implement.methods.name=Дженерики\: реализация отсутствующих методов
go.generics.inspections.change.interface.to.any=Прежде чем идти дальше, давайте отрефакторим еще одну вещь. Мы используем пустой интерфейс, который можно заменить на {0}.\nНажмите {1} и выберите {2}.
go.generics.inspections.delete.type.parameters=Функция {0} имеет квадратные скобки для использования параметров типов, но внутри этих скобок мы видим пустой список параметров. Чтобы исправить эту ошибку, нажмите {1} и выберите {2}.
go.generics.inspections.title=Инспекции для параметров типов
go.generics.inspections.union.interfaces.with.methods=Согласно <a href\="{0}">команде Go</a>, вы не можете использовать интерфейсы с методами в объединении. Поэтому {1} не может использоваться как элемент объединения.\nУдалите выбранную группу, которая начинается с {1} и заканчивается вертикальной чертой и пробелом после нее.
go.generics.inspections.unused.type.parameter=Параметры типов отображаются серым цветом, потому что мы нигде их не используем в нашем коде. Давайте исправим это, заменив тип {0} в разделе параметров на {1}.
go.generics.right.click.function=Мы избавились от всех ошибок в файле и можем попробовать сгенерировать тест для функции {0}.\nЩёлкните правой кнопкой мыши по функции {0}.
go.generics.running.code.click.link=Теперь нажмите на полученную ссылку, чтобы открыть ваш код в браузере.\nЧтобы запустить код с параметрами типов, просто нажмите кнопку {0}.
go.generics.running.code.missing.go118.download.or.local=Вы можете попробовать найти Go {0} с помощью выпадающего списка, если вы устанавливали его ранее. Или нажмите кнопку {1} и выберите, хотите ли вы загрузить необходимую версию SDK ({2}) или перейти к локальной копии на вашем жестком диске ({3}).\nИспользуя любой упомянутый вариант, выберите любую версию выше Go {0} и нажмите {4} во всех диалогах, чтобы применить новый SDK.
go.generics.running.code.missing.go118.downloading=<ide/> сейчас загружает и распаковывает SDK Go. Когда этот шаг будет завершен, ИСР проиндексирует эти файлы для использования в помощи по коду.
go.generics.running.code.missing.go118.indexing=Сейчас <ide/> индексирует файлы SDK. Пожалуйста, подождите, пока они будут обработаны. После этого вы сможете использовать этот SDK Go.
go.generics.running.code.missing.go118.quickfix=В настоящее время вы используете Go {0}. Для использования дженериков в этом уроке вам нужно установить или переключиться на Go 1.18 или выше.\nВы можете сделать это, нажав {1} и выбрав {2}.
go.generics.running.code.name=Запуск кода
go.generics.running.code.playground=Другой способ запустить ваш код - использовать {0}.\nЧтобы попробовать эту функцию, нажмите {1}. Если появится диалог подтверждения, нажмите {2}, чтобы сделать файл публичным. В правом нижнем углу редактора появится всплывающее окно со ссылкой на страницу в {0}.
go.generics.test.generation.module=Генерация тестов для параметров типов
go.goto.next.error=Чтобы перейти к следующей подсвеченной ошибке в файле, нажмите {0}.
go.goto.next.warning=Чтобы перейти к следующему подсвеченному предупреждению в файле, нажмите {0}.
go.navigation.module.description=Перемещайтесь по вашей кодовой базе
go.navigation.module.name=Навигация
go.onboarding.apply.action=Выберите действие {0} и нажмите {1}.
go.onboarding.apply.intention=Выберите {0} и нажмите {1}.
go.onboarding.balloon.about.debug.panel=Окно инструментов {0} предоставляет панель с различными действиями отладки. Вы можете пройти урок {1} позже, чтобы попробовать их.
go.onboarding.balloon.click.here=Нажмите здесь, чтобы установить точку останова
go.onboarding.balloon.open.file=Дважды щёлкните, чтобы открыть {0}
go.onboarding.balloon.open.learn.toolbar=Переключитесь на окно инструментов {0}, чтобы продолжить урок
go.onboarding.balloon.project.directory=Дважды щёлкните по директории проекта, чтобы развернуть её и просмотреть файлы проекта
go.onboarding.balloon.project.view=Нажмите, чтобы открыть представление <strong>Проект</strong>
go.onboarding.balloon.start.debugging=Нажмите на иконку, чтобы начать отладку
go.onboarding.balloon.stop.debugging=Нажмите на иконку, чтобы остановить отладку
go.onboarding.case.changed=Регистр был изменен.
go.onboarding.change.ui.settings=Для этого урока <ide/> изменит некоторые настройки интерфейса на значения по умолчанию. Ваши настройки будут восстановлены после завершения или выхода из урока.
go.onboarding.click.run.button=Нажмите подсвеченную кнопку запуска {0}, чтобы показать варианты запуска.
go.onboarding.click.run.button.balloon=Нажмите, чтобы показать варианты запуска
go.onboarding.close.debug.tool.window=Чтобы закрыть окно инструментов {0}, нажмите {1}.
go.onboarding.context.menu=Существуют разные способы запуска кода. Один из них - с помощью кнопки запуска {0} рядом с функцией {1}.
go.onboarding.epilog=Поздравляем\! Вы завершили ознакомительный тур. Теперь вы можете\:\n  - <callback id\="{0}">Закрыть</callback> учебный проект{1}\n  - <callback id\="{2}">Показать</callback> больше уроков
go.onboarding.feedback.system.found.sdks=Найденные SDK\:
go.onboarding.feedback.system.no.sdks=нет
go.onboarding.feedback.system.used.sdk=Используемый SDK\:
go.onboarding.indexing.description=При первом открытии проекта <ide/> сканирует Go SDK и сам проект для сбора информации, необходимой для помощи при написании кода. Дождитесь завершения индексации, чтобы продолжить.
go.onboarding.invoke.completion.tip=<strong>Совет</strong>\: вы можете нажать {0}, чтобы показать элементы автодополнения в любом месте кода.
go.onboarding.invoke.intention.for.code=Намерения также экономят время и упрощают кодование. Давайте используем намерение для быстрого преобразования функции {0} в экспортуемую. Нажмите {1}.
go.onboarding.invoke.intention.for.code.balloon=Нажмите {0}, чтобы показать все доступные намерения
go.onboarding.invoke.intention.for.warning.1=Вы только что исправили баг, но этот код можно сделать ещё лучше. <ide/> подсвечивает и добавляет жёлтую лампочку к строкам кода, которые можно улучшить.
go.onboarding.invoke.intention.for.warning.2=Нажмите {0}, чтобы просмотреть предупреждения и применить быстрое исправление.
go.onboarding.invoke.intention.for.warning.balloon=Нажмите {0}, чтобы показать все доступные быстрые исправления
go.onboarding.invoke.search.everywhere.1=При работе в <ide/> вам может понадобиться поиск файлов в проекте, символов, типов или даже действий ИСР. В этом уроке давайте найдем действие {0}, чтобы сделать строку {1} строчной.
go.onboarding.invoke.search.everywhere.2=Нажмите {0} дважды, чтобы открыть диалог "{1}".
go.onboarding.lesson.name=Знакомство с {0}
go.onboarding.module.description=Краткий обзор основных функций в {0}
go.onboarding.module.name=Ознакомительный тур
go.onboarding.project.view.description=<strong>Проект</strong> - одно из основных окон инструментов. Оно содержит каталог проекта, пакеты SDK и временные файлы. Нажмите на кнопку с полосками для предпросмотра демо-проекта. Также можно открыть его, нажав {0}.
go.onboarding.return.to.welcome=\ и вернуться на экран приветствия
go.onboarding.run.sample=Выберите "{0}" или попробуйте "{1}".
go.onboarding.run.widget.balloon=С помощью этого виджета можно выполнять популярные действия запуска для выбранной конфигурации
go.onboarding.search.everywhere.description=Как видите, выделенный текст {0} был автоматически скопирован в строку ввода. Давайте введем {1} вместо {0}.
go.onboarding.select.fix=Примените первый элемент\: {0}. С этим исправлением лишние скобки будут удалены.
go.onboarding.select.item=<ide/> автоматически показывает варианты автодополнения при вводе. Выберите элемент "{0}" с помощью стрелок на клавиатуре и нажмите {1}.
go.onboarding.start.debugging=Нажмите на значок "{0}", чтобы начать процесс отладки.
go.onboarding.start.typing=Теперь начните вводить {0}, чтобы показать варианты автодополнения.
go.onboarding.start.typing.balloon=Начните вводить {0}, чтобы показать варианты автодополнения
go.onboarding.stop.debugging=Давайте остановим отладку. Нажмите на значок "{0}".
go.onboarding.temporary.configuration.description=<ide/> только что создала временную конфигурацию запуска. Вы можете найти её в "{0}". С помощью этого виджета можно выполнять популярные действия запуска для выбранной конфигурации, такие как запуск {1} и отладка {2}. Другие действия, такие как профилирование {3} и запуск с покрытием {4}, можно показать, нажав на {5}.
go.onboarding.toggle.breakpoint.1=Вы можете заметить, что вместо ожидаемого значения {0} метод {1} возвращает {2}. Давайте остановимся на операторе return для отладки проблемного кода.
go.onboarding.toggle.breakpoint.2=Нажмите на область гаттера внутри выделенной области, чтобы установить точку останова.
go.onboarding.type.division=После обнаружения проблемы в коде давайте исправим её. Разделите полученную сумму на длину значений. Скрипт урока уже вставил {0}.
go.playground.module.name=Запуск кода в Go Playground
go.playground.note=<strong>Примечание</strong>\: для этого урока требуется подключение к серверу Go playground.
go.playground.paste.url=В поле "{0}" вставьте URL, нажав {1}, и нажмите "{2}".
go.playground.run.code.in.playground=Нажмите кнопку "{0}" на панели инструментов, чтобы запустить код с помощью сервера Go Playground.
go.playground.run.code.locally=Нажмите кнопку "{0}" на панели инструментов, чтобы запустить код на вашем компьютере.
go.playground.run.copy.link=Вы можете импортовать код из файлов и ссылок Go Playground. Скопируйте выбранную ссылку, нажав {0}.
go.playground.select.open.in.playground=Щёлкните правой кнопкой мыши по выбранному коду и перейдите в "{0} | {1}".\n<ide/> импортует этот код во временный файл.
go.playground.select.run.locally=Давайте запустим этот код локально. Для этого установите флажок "{0}" на панели инструментов.
go.playground.select.url=В диалоге "{0}" выберите переключатель "{1}".
go.postfix.completion.better.variable.names.in.templates.description=<ide/> может помочь с именами для переменных, которые генерируются с помощью постфиксных шаблонов {0} и {1}. Например, среди этих предложений вы можете встретить\: {2} или {3} для индексов, или {4} для {5}.\nВведите {6} и выберите постфиксный шаблон {7} из списка автодополнения.
go.postfix.completion.lesson.name=Постфиксное автодополнение
go.postfix.completion.task=С помощью постфиксных шаблонов вы можете преобразовать уже введенное выражение в другое на основе постфикса после точки, типа выражения и его контекста.\nНаш срез алфавита перепутан. Чтобы правильно отсортировать срез строк, мы можем применить функцию {0} из пакета {1} к срезу.\nМы уже ввели переменную, содержащую срез. Не перемещаясь туда-сюда, давайте применим постфиксный шаблон {1}. Введите точку ({2}) после переменной {3}, чтобы увидеть список предложений постфиксного автодополнения. Выберите {1} из списка или введите в редакторе, затем нажмите {4}, чтобы завершить оператор.
go.press.and.apply.fix=Нажмите {0} и выберите {1}.
go.refactoring.inline.dialog=В открывшемся диалоге нажмите "{0}".
go.refactoring.menu.extract.method=Теперь давайте извлечем метод, который вычисляет расстояние между двумя точками. Нажмите {0} и выберите "{1}" из списка или нажмите {2}, чтобы вызвать это действие напрямую.
go.refactoring.menu.inline.refactoring=Чтобы встроить метод, нажмите {0} и выберите "{1}".
go.refactoring.menu.introduce.parameter.eng=Предположим, вам нужно извлечь {0} в константу. {1} может сделать именно это. В меню рефакторинга выберите "{1}" из списка и нажмите {2}.
go.refactoring.menu.lesson.name=Меню рефакторинга
go.refactoring.menu.select.math.sqrt=Выберите мигающее выражение, чтобы извлечь весь метод в вашем коде, и нажмите {0}.
go.refactoring.menu.show.refactoring.list=<ide/> предоставляет различные рефакторинги. Многие из них имеют свои собственные сочетания клавиш, но вы всегда можете нажать {0}, чтобы увидеть список всех доступных рефакторингов в текущем контексте.
go.refactoring.menu.start.refactoring=Выберите "{0}", чтобы заменить все вхождения {1} в вашем коде.
go.refactorings.module.description=Рефакторинг помогает сделать ваш код надежным, лаконичным и легким в обслуживании
go.refactorings.module.name=Рефакторинг
go.rename.apply.intention=Введите новое имя для этого поля. Например, введите {0}, затем сохраните результат, нажав {1}.
go.rename.invoke.intentions=Вы можете переименовать что угодно, поместив курсор на символ и используя рефакторинг {0}. Поместите курсор на поле {1} в любом месте кода, затем нажмите {2}.
go.rename.lesson.name=Переименование
go.running.code.context.menu=Существуют разные способы запуска кода. Один из них - с помощью контекстного меню.\nПопробуйте вызвать контекстное меню, щелкнув правой кнопкой мыши по области в редакторе, где находится ваш код.
go.running.code.run.sample=Нажмите "{0}", чтобы запустить код. Вывод вашего приложения отображается в окне инструментов "{1}".
go.search.everywhere.goto.type=Отлично\! Однако иногда нужно найти только типы или искать только в определённых директориях. Используйте "{0}" для поиска типов.
go.search.everywhere.quick.documentation=Нажмите {0}, чтобы просмотреть документацию для выбранного типа.
go.search.everywhere.type.popup.closed.warning.message=Нажмите {0}, чтобы снова открыть окно поиска.
go.search.everywhere.type.type.name=Предположим, вам нужно найти тип с названием {0}. Введите начальные буквы слов поиска – {1}. Пока не переходите к найденному типу.
go.search.everywhere.use.all.places=Соответствующий тип в демо-проекте найден. Однако вы можете найти другие типы, не включенные в проект. Давайте переключим фильтр "{0}" на "{1}", чтобы показать соответствующие типы из Go SDK.
go.smart.type.completion.lesson.name=Умное автодополнение типов
go.smart.type.completion.task=Умное автодополнение типов фильтрует список предложений, включая только те типы, которые применимы в текущем контексте. Нажмите {0}, чтобы увидеть список подходящих предложений. Выберите первое, нажав {1}.
go.statement.completion.complete.condition=Добавьте условие внутри скобок {0} и нажмите {1}, чтобы перейти в оператор {2}.
go.statement.completion.complete.finish.body=Введите строку кода\: {0}, затем нажмите {1} для завершения оператора и применения форматования.
go.statement.completion.complete.for=Нажмите {0}, чтобы завершить оператор {1}.
go.statement.completion.complete.if=Введите {0}, затем нажмите {1} для генерации оператора.
go.statement.completion.help.link=Автодополнение операторов
go.statement.completion.lesson.name=Автодополнение операторов
go.support.for.table.tests.call.context.menu=В <ide/> вы можете запустить все тесты в функции или только некоторые из них.\nНапример, нажмите на значок запуска на полях рядом с функцией {0} и выберите "{1}". Это запустит все тесты в этой функции.
go.support.for.table.tests.name=Поддержка табличных тестов
go.support.for.table.tests.run.subtest=Вы можете запускать отдельные подтесты тем же способом. Нажмите на значок на полях рядом с подтестом {0} и выберите "{1}".\nВ настоящее время этот подход имеет несколько ограничений, о которых вы можете прочитать в <a href\="{2}">документации GoLand</a>.
go.support.fuzz.testing.check.failing=Упс, фаззинг-тестование не прошло\! Чтобы узнать причину, прокрутите вывод в окне инструмента "{0}" и нажмите на ссылку, ведущую в директорию {1}.
go.support.fuzz.testing.run=Фаззинг-тестование - это способ автоматизации тестов путем непрерывной подачи различных входных данных. Давайте запустим наш фаззинг-тест, чтобы проверить нашу функцию на различных сгенерированных данных.\nЧтобы запустить фаззинг-тестование, нажмите на мигающий значок на полях и выберите "{0}".
go.support.fuzz.testing.title=Фаззинг-тестование
go.to.internal.directory=Начиная с {0} 2021.2, вы можете переходить к интерфейсам, хранящимся в папке {1}.\nНажмите {2}, чтобы перейти к реализации интерфейса {3}.
go.to.internal.directory.hover.over.tab=Кстати, чтобы увидеть расположение файла, вы можете навести указатель мыши на вкладку в редакторе. Например, наведите указатель на вкладку "{0}".
go.to.internal.directory.name=Навигация и форматование кода
go.to.internal.directory.reformat.gofmt.on.save=Файл {0} нуждается в переформатовании кода. Нажмите {1}, чтобы переформатовать файл.\nКроме того, по умолчанию <ide/> запускает инструмент {2} после встроенного форматовщика <ide/>. Эта настройка конфигурируется опцией "{3}" на вкладке "{4}" в {5}.
go.type.parameters.description=Функции, которые могут помочь вам работать с дженериками
go.type.parameters.module.name=Дженерики (параметры типа)
go.view.hierarchies.choose.any.implementation=Выберите любую реализацию и нажмите {0} или кликните по ней.
go.view.hierarchies.goto.implementation=Нажмите {0}, чтобы найти реализации {1}.
go.view.hierarchies.hide.find.tool.window=Нажмите {0}, чтобы скрыть окно инструмента "{1}".
go.view.hierarchies.hide.method.hierarchy=Давайте скроем "{0}" тоже, нажмите {1} снова.
go.view.hierarchies.invoke.implementations.again=Объявление базового метода имеет свой собственный значок на полях {0}. Нажмите на него или снова нажмите {1}.
go.view.hierarchies.lesson.name=Просмотр иерархий
go.view.hierarchies.navigate.to.base=Вы можете перейти к базовому методу из производного. Нажмите {0} или кликните на значок "{1}" на полях редактора.
go.view.hierarchies.open.in.find.tool.window=Для больших иерархий вы можете искать реализации в окне инструмента "{0}". Нажмите "{1}".
go.view.hierarchies.open.method.hierarchy=Вы можете исследовать всю иерархию для этого метода. Нажмите {0}.
go.view.hierarchies.open.type.hierarchy=Чтобы просмотреть подтипы, нажмите {0}.
go.what.s.new.module.description=Ознакомьтесь с основными улучшениями GoLand 2024.2
go.what.s.new.module.name=Основные улучшения GoLand 2024.2
go.working.with.json.add.key.to.tags=Для добавления тегов XML и ASN1 можно также использовать действие намерения.\nСнова вызовите действия намерения, нажав {0}, затем выберите {1} и введите {2}.
go.working.with.json.change.style=Вы можете применить другой стиль кода для имен полей в тегах. Например, изменить его на camelCase.\nНажмите {0}, нажмите "{1}", затем выберите "{2}".
go.working.with.json.copy=<ide/> имеет несколько инструментов, которые помогут вам эффективнее работать с JSON кодом.\nСкопируйте выбранный JSON, нажав {0}.
go.working.with.json.introduce.type=Давайте извлечем встроенную структуру {0}.\nНажмите {1} и выберите "{2}".
go.working.with.json.name=Работа с JSON
go.working.with.json.name.struct=При необходимости измените имя структуры и нажмите {0} для завершения редактирования. ИСР автоматически исправит форматование.
go.working.with.json.replace=Нажмите {0}, чтобы заменить секцию комментария.\n<ide/> автоматически преобразует скопированную часть JSON в тип структуры.
go.working.with.json.update.value.in.tags=То же самое касается пакетного обновления значений тегов. Допустим, мы хотим добавить {0} к каждому тегу в текущей структуре.\nНажмите {1}, выберите {2} и введите {3}.\nТакже можно выбрать {0} из списка предложений. <ide/> знает о наиболее популярных значениях для тегов JSON, XML и ASN1.
go.working.with.parameters.invoke.intentions.1=Курсор находится на первом параметре метода {0}. Нажмите {1} для вызова действий намерения.
go.working.with.parameters.invoke.intentions.2=Посмотрите на метод {0} в редакторе. Курсор находится на первом параметре. Нажмите {1} для вызова действий намерения.
go.working.with.parameters.invoke.intentions.3=Если параметры необходимы методу для реализации интерфейса, их небезопасно удалять. Нажмите {0}, чтобы увидеть список возможных вариантов.
go.working.with.parameters.lesson.name=Контекстные действия
go.working.with.parameters.press.action.again=Теперь нажмите {0} снова.
go.working.with.parameters.remove.parameters=<ide/> подсвечивает только имена неиспользуемых параметров, если их типы используются для реализации спецификации метода. В этом случае вы можете либо переименовать этот параметр в {0}, либо полностью удалить его имя.
go.working.with.parameters.signature.combined=Обратите внимание, как объединились типы сигнатуры.
go.working.with.parameters.signature.expanded=Чтобы вернуть сигнатуру в исходное состояние, выберите {0}.
go.working.with.parameters.single.type=Если в сигнатуре функции или метода есть несколько параметров одного типа, вы можете использовать либо краткую спецификацию типа для этих параметров ({0}), либо отдельную спецификацию типа для каждого параметра ({1}).
go.working.with.parameters.that.are.not.used=<ide/> может обнаружить параметры в сигнатуре, которые не используются в теле метода или функции. Поскольку они не используются, вы можете удалить их с помощью быстрого исправления {0}.
toggle.case.part=регистр