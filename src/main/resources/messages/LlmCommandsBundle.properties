associated.contexts.key=Связанные контексты
associated.dependent.contexts.key=Использующие
db.provider.generate.entity.by.table=Сгенерировать сущность персистентности
db.provider.prompt.generate.entity.class.corresponding.to.table=Необходимо сгенерировать класс сущности персистентности Jakarta EE для таблицы базы данных '{{'{0}'}}'
directives.you.must.consider=Необходимо учесть
directives.you.must.use=Необходимо использовать
domains.llm.function.controller.description=Вернуть контроллер по имени
domains.llm.function.entity.description=Вернуть сущность по имени
domains.llm.function.repository.description=Вернуть репозиторий по имени
domains.llm.function.service.description=Вернуть сервис по имени
domains.llm.function.table.description=Вернуть таблицу по имени
entity.provider.generate.database.table.init.script.from.entity.class=Сгенерировать скрипт инициализации таблицы базы данных
entity.provider.generate.repository.by.entity=Сгенерировать Spring Data репозиторий
entity.provider.prompt.generate.init.sql.script=Необходимо сгенерировать начальный SQL-скрипт для сущности ''{0}'' с типом ID ''{1}''
entity.provider.prompt.generate.spring.data.repository.for.entity=Необходимо сгенерировать Spring Data репозиторий для сущности '{{'{0}'}}' с типом ID '{{'{1}'}}'.Репозиторий должен иметь методы поиска по свойствам сущности. Генерировать в пакете '{{'{2}'}}'
repositories.provider.generate.controller.by.repository=Сгенерировать Spring Controller
repositories.provider.generate.spring.service.from.repository=Сгенерировать Spring Service
repositories.provider.prompt.crud.spring.service.for.repository.0.class.and.1.as.entity=Необходимо сгенерировать CRUD Spring Service для класса репозитория '{{'{0}'}}' и сущности '{{'{1}'}}'
repositories.provider.prompt.generate.controller.for.repository=Необходимо сгенерировать CRUD Spring Controller для класса репозитория '{{'{0}'}}' и класса сущности '{{'{1}'}}'.Генерировать в пакете '{{'{2}'}}'