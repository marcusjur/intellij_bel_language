add.annotation.value.intention.family.name=Добавить 'value\='
add.annotation.value.intention.name=Добавить 'value\='
change.to.c.style.comment.intention.family.name=Заменить на C-style комментарий
change.to.c.style.comment.intention.name=Заменить на C-style комментарий
change.to.end.of.line.comment.intention.family.name=Заменить на однострочный комментарий
change.to.end.of.line.comment.intention.name=Заменить на однострочный комментарий
convert.closure.to.method.intention.family.name=Преобразовать свойство в метод
convert.closure.to.method.intention.name=Преобразовать в метод
convert.concatenation.to.gstring.intention.family.name=Преобразовать конкатенацию строк в GString
convert.concatenation.to.gstring.intention.name=Преобразовать в GString
convert.from.geese.braces.intention.family.name=Форматовать фигурные скобки на отдельных строках
convert.from.geese.braces.intention.name=Форматовать фигурные скобки на отдельных строках
convert.g.string.to.string.intention.family.name=Преобразовать GString в String
convert.g.string.to.string.intention.name=Преобразовать в String
convert.integer.to.binary.intention.family.name=Преобразовать в двоичный
convert.integer.to.binary.intention.name=Преобразовать в двоичный
convert.integer.to.decimal.intention.family.name=Преобразовать в десятичный
convert.integer.to.decimal.intention.name=Преобразовать в десятичный
convert.integer.to.hex.intention.family.name=Преобразовать в шестнадцатеричный
convert.integer.to.hex.intention.name=Преобразовать в шестнадцатеричный
convert.integer.to.octal.intention.family.name=Преобразовать в восьмеричный
convert.integer.to.octal.intention.name=Преобразовать в восьмеричный
convert.java.style.array.intention.family.name=Преобразовать создание массива из Java-стиля в Groovy-синтаксис
convert.java.style.array.intention.name=Преобразовать создание массива в Java-стиле
convert.junit.assertion.to.assert.statement.intention.family.name=Преобразовать JUnit assertion в assert-выражение
convert.junit.assertion.to.assert.statement.intention.name=Преобразовать JUnit assertion в assert-выражение
convert.map.to.class.intention.family.name=Преобразовать нативный map Groovy в экземпляры класса
convert.map.to.class.intention.name=Преобразовать в класс
convert.method.to.closure.intention.family.name=Преобразовать метод в свойство типа замыкания
convert.method.to.closure.intention.name=Преобразовать в свойство-замыкание
convert.multiline.string.to.single.line.intention.family.name=Преобразовать многострочную строку в однострочную
convert.multiline.string.to.single.line.intention.name=Преобразовать в однострочный литерал
convert.parameter.to.map.entry.intention.family.name=Преобразовать параметры метода или замыкания в элементы map
convert.parameter.to.map.entry.intention.name=Преобразовать параметр в элемент map
convert.simple.getter.to.property.intention.family.name=Преобразовать простой геттер в свойство
convert.simple.getter.to.property.intention.name=Преобразовать в свойство
convert.string.to.g.string.intention.family.name=Преобразовать String в GString
convert.string.to.g.string.intention.name=Преобразовать в GString
convert.string.to.multiline.intention.family.name=Преобразовать литерал в многострочный литерал
convert.string.to.multiline.intention.name=Преобразовать в многострочный
convert.to.dollar.slash.regex.intention.family.name=Преобразовать строковый литерал в строку $/
convert.to.dollar.slash.regex.intention.name=Преобразовать в строку $/ 
convert.to.geese.braces.intention.family.name=Форматовать закрывающие скобки замыкания в одну строку
convert.to.geese.braces.intention.name=Форматовать фигурные скобки в одну строку
convert.to.regex.intention.family.name=Преобразовать строковый литерал в регулярное выражение
convert.to.regex.intention.name=Преобразовать в регулярное выражение
create.parameter.for.field.intention.family.name=Добавить параметр конструктора для поля
create.parameter.for.field.intention.name=Добавить параметр конструктора для поля
demorgans.intention.name1=Заменить '\\&\\&' на '||'
demorgans.intention.name2=Заменить '||' на '\\&\\&'
demorgans.law.intention.family.name=Закон де Моргана
each.to.for.intention.family.name=Заменить each на for-in
each.to.for.intention.name=Заменить на for-in
expand.boolean.intention.family.name=Развернуть булево выражение
expand.boolean.intention.name=Развернуть булево выражение в if-else
flip.comparison.intention.family.name=Инвертировать операнды сравнения
flip.comparison.intention.name=Инвертировать ''{0}'' в ''{1}''
flip.conditional.intention.family.name=Инвертировать условное выражение
flip.conditional.intention.name=Инвертировать '?\:'
flip.conjunction.intention.family.name=Инвертировать операнды конъюнкции
flip.if.intention.family.name=Инвертировать if-выражения
flip.if.intention.name=Инвертировать if-выражения
flip.smth.intention.name=Инвертировать ''{0}''
for.to.each.intention.family.name=Заменить for-in на each
for.to.each.intention.name=Заменить на ".each"
gr.alias.import.intention.family.name=Импорт с псевдонимом для статически импортованного члена
gr.alias.import.intention.name=Импорт с псевдонимом
gr.break.string.on.line.breaks.intention.family.name=Разбить строку по '\\n'
gr.break.string.on.line.breaks.intention.name=Разбить строку по '\\n'
gr.convert.string.to.char.intention.family.name=Привести к char
gr.convert.string.to.char.intention.name=Привести к char
gr.convert.type.cast.to.safe.cast.intention.family.name=Преобразовать выражение приведения типа в безопасное приведение
gr.convert.type.cast.to.safe.cast.intention.name=Преобразовать в безопасное приведение типа
gr.copy.string.concatenation.content.intention.family.name=Копировать текст конкатенации строк в буфер обмена
gr.copy.string.literal.content.intention.text=Копировать текст строкового литерала в буфер обмена
gr.create.missing.switch.branches.intention.family.name=Создать отсутствующие ветки 'switch'
gr.create.missing.switch.branches.intention.name=Создать отсутствующие ветки 'switch'
gr.introduce.local.variable.intention.family.name=Создать локальную переменную
gr.introduce.local.variable.intention.name=Создать локальную переменную
gr.make.member.private.intention.family.name=Сделать 'private'
gr.make.member.private.intention.name=Сделать 'private'
gr.make.member.protected.intention.family.name=Сделать 'protected'
gr.make.member.protected.intention.name=Сделать 'protected'
gr.make.member.public.intention.family.name=Сделать 'public'
gr.make.member.public.intention.name=Сделать 'public'
gr.redundant.else.intention.family.name=Удалить избыточное ключевое слово 'else'
gr.redundant.else.intention.name=Удалить избыточное ключевое слово 'else'
gr.remove.annotation.intention.family.name=Удалить аннотацию
gr.remove.annotation.intention.name=Удалить
gr.remove.explicit.type.declaration.intention.family.name=Удалить явное объявление типа
gr.remove.explicit.type.declaration.intention.name=Удалить явный тип
gr.set.strong.type.intention.family.name=Объявить явный тип
gr.set.strong.type.intention.name=Объявить явный тип
gr.sort.map.keys.intention.family.name=Отсортировать элементы отображения по алфавиту
gr.sort.map.keys.intention.name=Отсортировать по алфавиту
gr.split.declaration.intention.family.name=Разделить объявление переменной
import.on.demand.intention.family.name=Добавить static import по требованию
import.on.demand.intention.name=Добавить импорт по требованию
import.static.intention.family.name=Добавить static import для одного члена
import.static.intention.name=Добавить static import
indexed.expression.conversion.intention.family.name=Преобразовать форму [] в метод индексации
indexed.expression.conversion.intention.name=Преобразовать доступ [] в форму метода
indexing.method.conversion.intention.family.name=Преобразовать метод индексации в форму []
indexing.method.conversion.intention.name=Преобразовать в форму []
invert.if.intention.family.name=Инвертировать условие 'if'
invert.if.intention.name=Инвертировать условие 'if'
make.closure.call.explicit.intention.family.name=Сделать вызов замыкания явным
make.closure.call.explicit.intention.name=Сделать вызов замыкания явным
make.closure.call.implicit.intention.family.name=Сделать вызов замыкания неявным
make.closure.call.implicit.intention.name=Сделать вызов замыкания неявным
merge.else.if.intention.family.name=Объединить else if
merge.else.if.intention.name=Объединить else-if
merge.if.and.intention.family.name=Объединить вложенные if в условие с and
merge.if.and.intention.name=Объединить условия if
move.class.to.new.file.intention.family.name=Переместить класс в отдельный файл
move.class.to.new.file.intention.name=Переместить в отдельный файл
negate.comparison.intention.family.name=Инвертировать сравнение
negate.comparison.intention.name=Инвертировать ''{0}'' в ''{1}''
remove.parentheses.from.method.call.intention.family.name=Удалить лишние скобки из вызова метода
remove.parentheses.from.method.call.intention.name=Удалить лишние скобки
remove.redundant.class.property.intention.family.name=Удалить избыточное .class
remove.redundant.class.property.intention.name=Удалить избыточное .class
remove.unnecessary.braces.in.g.string.intention.family.name=Удалить лишние фигурные скобки в GString
remove.unnecessary.braces.in.g.string.intention.name=Удалить лишние фигурные скобки в GString
remove.unnecessary.escape.characters.intention.family.name=Удалить лишние экранирующие символы
remove.unnecessary.escape.characters.intention.name=Удалить лишние экранирующие символы
remove.unnecessary.return.intention.family.name=Удалить лишнее ключевое слово 'return'
remove.unnecessary.return.intention.name=Удалить ключевое слово 'return'
rename.class.to.0=Переименовать класс в ''{0}''
rename.class.to.file.name.intention.family.name=Переименовать класс по соответствующему имени файла
rename.file.with.class.intention.family.name=Переименовать файл по соответствующему имени класса
rename.file.with.class.intention.name=Переименовать файл по имени класса
replace.abstract.class.instance.by.map.intention.family.name=Заменить анонимный класс на динамическую инстанциацию
replace.abstract.class.instance.by.map.intention.name=Заменить на динамическую инстанциацию
replace.if.with.ternary.intention.family.name=Заменить оператор if на тернарный оператор
replace.if.with.ternary.intention.name=Заменить на ?\:
replace.qualified.reference.with.import.intention.family.name=Заменить полное имя на импорт
replace.qualified.reference.with.import.intention.name=Заменить на импорт
replace.ternary.with.if.else.intention.family.name=Заменить '?\:' на if else
replace.ternary.with.if.else.intention.name=Заменить '?\:' на if else
simplify.ternary.operator.intention.family.name=Упростить условное выражение
simplify.ternary.operator.intention.name=Упростить условное выражение
split.else.if.intention.family.name=Разделить else if
split.else.if.intention.name=Разделить else-if
split.if.intention.family.name=Разделить на 2 оператора 'if'
split.if.intention.name=Разделить на 2 оператора 'if'
split.into.declaration.and.assignment=Разделить на объявление и присваивание
split.into.separate.declaration=Разделить на отдельное объявление