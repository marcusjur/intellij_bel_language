choose.python.sdk.to.start.learning.header=Патрабуецца інтэрпрэтатар Python
no.interpreter.in.learning.project=Не ўдалося наладзіць інтэрпрэтатар, паспрабуйце зрабіць гэта <callback id\="{0}">ўручную</callback>.
no.interpreter.in.user.project=Інтэрпрэтатар Python не знойдзены, <callback id\="{0}">адкрыйце</callback> дэманстрацыйны праект Python, каб аўтаматычна наладзіць інтэрпрэтатар, або націсніце <callback id\="{1}">тут</callback>, каб наладзіць яго ўручную.
python.3.required.warning.message=Каб выканаць гэты падручнік, <callback id\="{0}">наладзьце інтэрпрэтатар</callback> на аснове Python 3.
python.debug.workflow.help.link=Частка 1: Адладка кода Python
python.debug.workflow.rerun=Давайце перазапусцім нашу праграму. Проста націсніце {0} яшчэ раз або выкарыстоўвайце {1}.
python.editor.coding.assistance.fix.error=Давайце выправім гэтую памылку. Націсніце {0} і абярыце {1} або {2} <strong>→ матэматыка</strong>
python.editor.coding.assistance.press.to.fix=Націсніце {0}, каб замяніць картэж спісам.
python.f.string.completion.complete.it=Дапоўніце выраз {0}. Проста націсніце {1}, каб прымяніць першы элемент.
python.f.string.completion.help.link=Фа-струннае завяршэнне
python.f.string.completion.invoke.manually=Вы можаце выклікаць аўтазапаўненне ўручную з дапамогай {0}.
python.f.string.completion.lesson.name=Фа-струннае завяршэнне
python.f.string.completion.result.message=Вы бачыце, што пасля аўтазапаўнення звычайны радок Python быў заменены на f-радок.
python.f.string.completion.type.prefix=<ide/> падтрымлівае аўтаматычнае пераўтварэнне f-радка. Проста пачніце ўводзіць {0}.
python.in.place.refactoring.add.parameter=Давайце дадамо аргумент да гэтага метаду. Мы размесцім курсор рэдактара адразу пасля першага параметру. Цяпер увядзіце коску і назву параметра\: {0}.
python.in.place.refactoring.finish.rename=Націсніце {0}, каб завяршыць перайменаванне.
python.in.place.refactoring.help.rename.link=Перайменаванне кода на месцы
python.in.place.refactoring.help.signature.link=Змена подпісы на месцы
python.in.place.refactoring.invoke.intention.for.parameter=<ide/> чакае, што вы збіраецеся змяніць подпіс метаду. Вы можаце заўважыць гэта па тым самым значку {0} на палях. Калі вы скончыце ўводзіць назву новага параметра, выклічце намеры, націснуўшы {1}.
python.in.place.refactoring.invoke.intentions=<ide/> мяркуе, што вы збіраецеся перайменаваць зменную. Вы можаце заўважыць гэта па значку {0} на палях. Выклік намераў з {1}, калі вы скончыце ўводзіць новае імя.
python.in.place.refactoring.lesson.name=Рэфактарынгі на месцы
python.in.place.refactoring.remark.about.application.scope=Заўвага\: рэфактарынгі на месцы можна выклікаць толькі ў пункце вызначэння, у той час як непасрэдны выклік перайменавання або змены подпісу можа быць выкліканы як з вызначэння, так і з выкарыстання.
python.in.place.refactoring.set.default.value=Цяпер вам трэба ўвесці значэнне, якое будзе ўстаўляцца ў якасці аргумента пры кожным выкліку. Для гэтага прыкладу вы можаце выбраць {0}. Затым націсніце {1}, каб працягнуць.
python.in.place.refactoring.signature.preview=<ide/> паказвае кароткі папярэдні прагляд подпісу. Каб працягнуць, націсніце {0}.
python.in.place.refactoring.start.type.new.name=Давайце разгледзім альтэрнатыўны падыход да выканання рэфактарынгу. Дапусцім, мы хочам перайменаваць лакальную зменную {0} у {1}. Проста пачніце ўводзіць новае імя.
python.in.place.refactoring.update.callers=Націсніце {0}, каб абнавіць метады выкліку.
python.onboarding.apply.action=Выберыце дзеянне {0} і націсніце {1}.
python.onboarding.apply.intention=Выберыце {0} і націсніце {1}.
python.onboarding.balloon.about.debug.panel=Акно інструментаў {0} змяшчае панэль інструментаў з рознымі дзеяннямі адладкі. Вы можаце прайсці ўрок {1} пазней, каб паспрабаваць іх.
python.onboarding.balloon.click.here=Націсніце тут, каб усталяваць кропку прыпынку
python.onboarding.balloon.open.file=Пстрыкніце двойчы, каб адкрыць {0}
python.onboarding.balloon.open.learn.toolbar=Пераключыцеся ў акно інструмента {0}, каб працягнуць урок
python.onboarding.balloon.project.directory=Разгарніце каталог праекта, каб праглядзець файлы
python.onboarding.balloon.project.view=Націсніце, каб адкрыць <strong>акно праекта</strong>
python.onboarding.balloon.start.debugging=Націсніце на значок, каб пачаць адладку
python.onboarding.balloon.stop.debugging=Націсніце на значок, каб спыніць адладку
python.onboarding.case.changed=Рэестр зменены.
python.onboarding.change.ui.settings=Для гэтага падручніка PyCharm зменіць некаторыя налады інтэрфейсу на значэнні па змаўчанні. Вашы налады будуць адноўлены, калі вы скончыце або выйдзеце з урока.
python.onboarding.choose.values.item=Выберыце {0} і націсніце {1}.
python.onboarding.complete.template=Націсніце {0}.
python.onboarding.epilog=Віншуем\! Вы завяршылі азнаямленчы тур. Цяпер вы можаце\:\n - <callback id\="{0}">Закрыць</callback> адукацыйны праект{1}\n - <callback id\="{2}">Паказаць</callback> больш урокаў
python.onboarding.feedback.system.found.interpreters=Знойдзеныя інтэрпрэтатары\:
python.onboarding.feedback.system.no.interpreters=няма
python.onboarding.feedback.system.start.interpreter=Запуск інтэрпрэтатара\:
python.onboarding.feedback.system.used.interpreter=Выкарыстаны інтэрпрэтатар\:
python.onboarding.indexing.description=Калі вы ўпершыню адкрываеце праект, <ide/> скануе Python SDK і сам праект, каб сабраць інфармацыю, неабходную для дапамогі ў кодаванні. Каб працягнуць, дачакайцеся завяршэння індэксацыі.
python.onboarding.interpreter.description=PyCharm ужо наладзіў інтэрпрэтатар Python для гэтага курса. Вы можаце змяніць яго або стварыць іншы для сваіх праектаў. Самы просты спосаб зрабіць гэта - выкарыстоўваць селектар інтэрпрэтатара Python у радку стану.
python.onboarding.interpreter.tip=<strong>Падказка\:</strong> тут вы можаце вывучыць налады вашага інтэрпрэтатара Python
python.onboarding.invoke.completion=Зараз давайце пачнем уводзіць {0} у дужках {1}. <ide/> аўтаматычна паказвае параметры аўтазапаўнення падчас уводу. Вы таксама можаце націснуць {2} і працягваць уводзіць, каб скараціць спіс.
python.onboarding.invoke.completion.balloon=Пачніце ўводзіць {0}, каб паказаць усе даступныя параметры аўтазапаўнення
python.onboarding.invoke.intention.for.code=Намеры таксама эканомяць час і палягчаюць кадзіраванне. Давайце выкарыстаем намер, каб хутка дадаць тып вяртання для {0}. Націсніце {1}.
python.onboarding.invoke.intention.for.code.balloon=Націсніце {0}, каб паказаць даступныя намеры
python.onboarding.invoke.intention.for.warning.1=Вы толькі што выправілі памылку, але гэты код можна зрабіць яшчэ лепшым. PyCharm вылучае і дадае жоўтую лямпачку да радкоў кода, якія можна палепшыць.
python.onboarding.invoke.intention.for.warning.2=Націсніце {0}, каб праглядзець папярэджанні і прымяніць хуткае выпраўленне.
python.onboarding.invoke.intention.for.warning.balloon=Націсніце {0}, каб паказаць даступныя хуткія выпраўленні
python.onboarding.invoke.search.everywhere.1=Падчас працы ў <ide/> вам можа спатрэбіцца шукаць файлы ў праекце, сімвалы, класы ці нават дзеянні WBS. У гэтым падручніку давайце знойдзем дзеянне {0}, каб зрабіць радок {1} ніжнім рэгістрам.
python.onboarding.invoke.search.everywhere.2=Націсніце {0} двойчы, каб адкрыць дыялогавае акно {1}.
python.onboarding.lesson.name=Прадстаўляем PyCharm
python.onboarding.module.description=Кароткі агляд асноўных функцый у {0}.
python.onboarding.module.name=Навучальны тур
python.onboarding.project.view.description=<strong>Акно праекта</strong> - адно з асноўных вокнаў інструментаў. Ён змяшчае каталог праекта, знешнія бібліятэкі SDK і часовыя файлы. Націсніце на кнопку з палоскамі, каб праглядзець змесціва дэманстрацыйнага праекта. Вы таксама можаце адкрыць яго, націснуўшы {0}.
python.onboarding.run.options.professional=Іншыя дзеянні, такія як прафіляванне {0} і запуск з пакрыццём {1}, можна паказаць, націснуўшы {2}.
python.onboarding.run.sample=Зараз давайце запусцім бягучы файл, націсніце {0} або {1}.
python.onboarding.run.sample.balloon=Давайце запусцім бягучы файл, націсніце {0} або {1}.
python.onboarding.search.everywhere.description=Як бачыце, вылучаны тэкст {0} быў аўтаматычна скапіраваны ў радок уводу. Давайце ўвядзем {1} замест {0}.
python.onboarding.select.fix=Прымяніць першы пункт\: {0}. З гэтым выпраўленнем ваш код будзе выглядаць чысцей.
python.onboarding.start.debugging=Націсніце на значок {0}, каб пачаць працэс адладкі.
python.onboarding.stop.debugging=Давайце спынім адладку. Націсніце на значок {0}.
python.onboarding.temporary.configuration.description=Вы адкрылі дэма-прыклад. Зараз запусцім\! У вылучаным {0} вы можаце ўбачыць папулярныя дзеянні пры запуску для выбранай канфігурацыі. Напрыклад, вы можаце запусціць код на {1} або адладзіць яго на {2}.
python.onboarding.toggle.breakpoint.1=Вы можаце заўважыць, што замест чаканага значэння {0} метад {1} вяртае {2}. Давайце засяродзімся на аператары return для адладкі праблемнага кода.
python.onboarding.toggle.breakpoint.2=Націсніце на поле ў выдзеленай вобласці, каб усталяваць кропку прыпынку.
python.onboarding.type.division=Вызначыўшы праблему ў кодзе, давайце выправім яе. Падзяліце атрыманую суму на даўжыню значэнняў. У сцэнарый урока ўжо ўстаўлена {0}.
python.postfix.completion.complete=Выберыце {0} са спісу і націсніце {1}, каб завяршыць выраз.
python.postfix.completion.type=Увядзіце {0} пасля дужак, каб убачыць спіс прапаноў.
python.quick.fix.refactoring.choose.change.signature=Выберыце хуткае выпраўленне {0}.
python.quick.fix.refactoring.close.completion.list=На дадзены момант мы не хочам выкарыстоўваць аўтазапаўненне. Закрыць спіс ({0}).
python.quick.fix.refactoring.finish.refactoring=Націсніце {0} (ці націсніце {1}), каб завяршыць рэфактарынгі.
python.quick.fix.refactoring.help.link=Змена подпісу
python.quick.fix.refactoring.invoke.intentions=Як вы маглі заўважыць, <ide/> паказвае тут папярэджанне. Давайце выклічам намеры, націснуўшы {0}.
python.quick.fix.refactoring.lesson.name=Хуткі рэфактарынгу
python.quick.fix.refactoring.select.new.parameter=Давайце ўсталюем значэнне па змаўчанні для новага параметра. Націсніце на новы радок параметраў. Вы таксама можаце пераключыць фокус на параметр, націснуўшы {0}, а затым {1}.
python.quick.fix.refactoring.set.default.value=Вы можаце перамяшчацца паміж палямі і сцяжкамі з дапамогай {0}. Калі сцяг адзначаны, <ide/> альбо ўбудоўвае значэнне па змаўчанні ў іншыя выклікі, альбо ўсталёўвае яго ў якасці значэння па змаўчанні для новага параметра. Папярэдні прагляд подпісу дапаможа вам зразумець розніцу. Цяпер усталюйце значэнне па змаўчанні 0.
python.quick.fix.refactoring.type.new.argument=Некаторыя рэфактарынгі можна зрабіць як хуткія выпраўленні. Дапусцім, мы хочам дадаць параметр у метад {0} і перадаць яму зменную {1}. Увядзём {2} пасля першага аргумента.
python.rename.exclude.item=Падобна на тое, што {0} трэба выключыць з рэфактарынгу перайменавання. Выберыце яго і націсніце {1}.
python.rename.expand.dynamic.references=У простых выпадках {0} проста выканае рэфактарынгу перайменавання без пацверджання. Аднак у гэтым прыкладзе <ide/> выяўляе два выклікі метаду {0} для аб'ектаў з невядомымі тыпамі. Разгарнуць элемент {1}.
python.rename.find.window.closed.warning=Націсніце {0}, каб зноў адкрыць акно пошуку.
python.rename.finish.refactoring=Завяршыце перайменаванне з дапамогай кнопкі {0}.
python.rename.press.rename=Націсніце {0} і перайменуйце поле {1} (напрыклад, {2}).
python.run.configuration.help.link=Дапамога пры запуску кода
python.run.configuration.lets.run=Давайце выканаем наш просты прыклад з выкарыстаннем {0}.
python.smart.completion.finish.completion=Цяпер проста выберыце {0}, каб завяршыць гэты падручнік.
python.smart.completion.help.link=Завяршэнне з улікам тыпу
python.smart.completion.try.basic.completion=Паспрабуйце выкарыстоўваць базавае аўтазапаўненне, націснуўшы {0}.
python.smart.completion.use.smart.completion=На жаль, <ide/> не мае непасрэднай інфармацыі пра тып {0}. Але часам ён можа прапаноўваць аўтазапаўненне на аснове кантэксту\! Выкарыстоўвайце {1} для выкліку разумнага аўтазапаўнення.
python.tab.completion.lesson.name=Завяршэнне табуляцыі
python.tab.completion.select.item=Выберыце {0} з дапамогай клавіш са стрэлкамі або проста пачніце друкаваць.
python.tab.completion.start.completion=Дапусцім, вы хочаце замяніць {0} на {1}. Выклік аўтазапаўнення, націснуўшы {2}.
python.tab.completion.use.tab.completion=Калі вы націснеце {0}, {1} будзе ўстаўлена перад {2}. Замест гэтага націсніце {3}, каб замяніць {2} на {1}.
toggle.case.part=рэгістр