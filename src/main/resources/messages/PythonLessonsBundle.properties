choose.python.sdk.to.start.learning.header=Требуется интерпретатор Python
no.interpreter.in.learning.project=Не удалось настроить интерпретатор, попробуйте сделать это <callback id\="{0}">вручную</callback>.
no.interpreter.in.user.project=Не удаётся найти интерпретатор Python, <callback id\="{0}">откройте</callback> демо-проект Python для автоматической настройки интерпретатора или нажмите <callback id\="{1}">здесь</callback> для ручной настройки.
python.3.required.warning.message=Для завершения этого урока <callback id\="{0}">настройте интерпретатор</callback> на основе Python 3.
python.debug.workflow.help.link=Часть 1. Отладка Python-кода
python.debug.workflow.rerun=Давайте перезапустим нашу программу. Просто нажмите {0} снова или используйте {1}.
python.editor.coding.assistance.fix.error=Давайте исправим эту ошибку. Нажмите {0} и выберите {1} или {2} <strong>→ math</strong>
python.editor.coding.assistance.press.to.fix=Нажмите {0}, чтобы заменить кортеж на список.
python.f.string.completion.complete.it=Завершите выражение с помощью {0}. Просто нажмите {1}, чтобы применить первый пункт.
python.f.string.completion.help.link=Автодополнение F-строк
python.f.string.completion.invoke.manually=Вы можете вызвать автодополнение вручную с помощью {0}.
python.f.string.completion.lesson.name=Автодополнение F-строк
python.f.string.completion.result.message=Вы можете видеть, что после автодополнения простая строка Python была заменена на f-строку.
python.f.string.completion.type.prefix=<ide/> поддерживает автоматическое преобразование f-строк. Просто начните вводить {0}.
python.in.place.refactoring.add.parameter=Давайте добавим аргумент к этому методу. Мы поместим курсор редактора сразу после первого параметра. Теперь введите запятую и имя параметра\: {0}.
python.in.place.refactoring.finish.rename=Нажмите {0}, чтобы завершить переименование.
python.in.place.refactoring.help.rename.link=Переименование кода на месте
python.in.place.refactoring.help.signature.link=Изменение сигнатуры на месте
python.in.place.refactoring.invoke.intention.for.parameter=<ide/> ожидает, что вы собираетесь изменить сигнатуру метода. Вы можете заметить это по тому же значку {0} на полях. Когда закончите вводить имя нового параметра, вызовите намерения, нажав {1}.
python.in.place.refactoring.invoke.intentions=<ide/> предполагает, что вы собираетесь переименовать переменную. Вы можете заметить это по значку {0} на полях. Вызовите намерения с помощью {1}, когда закончите вводить новое имя.
python.in.place.refactoring.lesson.name=Рефакторинг на месте
python.in.place.refactoring.remark.about.application.scope=Примечание\: Рефакторинг на месте может применяться только в точке определения, в то время как прямой вызов рефакторингов переименования или изменения сигнатуры может быть вызван как из определения, так и из использования.
python.in.place.refactoring.set.default.value=Теперь нужно ввести значение, которое будет вставлено как аргумент в каждый вызов. Для этого примера можно выбрать {0}. Затем нажмите {1}, чтобы продолжить.
python.in.place.refactoring.signature.preview=<ide/> показывает вам краткий предпросмотр сигнатуры. Нажмите {0}, чтобы продолжить.
python.in.place.refactoring.start.type.new.name=Давайте рассмотрим альтернативный подход к выполнению рефакторинга. Предположим, мы хотим переименовать локальную переменную {0} в {1}. Просто начните вводить новое имя.
python.in.place.refactoring.update.callers=Нажмите {0}, чтобы обновить вызывающие методы.
python.onboarding.apply.action=Выберите действие {0} и нажмите {1}.
python.onboarding.apply.intention=Выберите {0} и нажмите {1}.
python.onboarding.balloon.about.debug.panel=Окно инструментов {0} предоставляет панель инструментов с различными действиями отладки. Вы можете пройти урок {1} позже, чтобы попробовать их.
python.onboarding.balloon.click.here=Нажмите здесь, чтобы установить точку останова
python.onboarding.balloon.open.file=Дважды щёлкните, чтобы открыть {0}
python.onboarding.balloon.open.learn.toolbar=Переключитесь на окно инструментов {0}, чтобы продолжить урок
python.onboarding.balloon.project.directory=Разверните каталог проекта для просмотра файлов
python.onboarding.balloon.project.view=Нажмите, чтобы открыть <strong>окно проекта</strong>
python.onboarding.balloon.start.debugging=Нажмите на значок, чтобы начать отладку
python.onboarding.balloon.stop.debugging=Нажмите на значок, чтобы остановить отладку
python.onboarding.case.changed=Регистр изменен.
python.onboarding.change.ui.settings=Для этого урока PyCharm изменит некоторые настройки интерфейса на значения по умолчанию. Ваши настройки будут восстановлены после завершения или выхода из урока.
python.onboarding.choose.values.item=Выберите {0} и нажмите {1}.
python.onboarding.complete.template=Нажмите {0}.
python.onboarding.epilog=Поздравляем\! Вы завершили ознакомительный тур. Теперь вы можете\:\n  - <callback id\="{0}">Закрыть</callback> учебный проект{1}\n  - <callback id\="{2}">Показать</callback> больше уроков
python.onboarding.feedback.system.found.interpreters=Найденные интерпретаторы\:
python.onboarding.feedback.system.no.interpreters=нет
python.onboarding.feedback.system.start.interpreter=Запустить интерпретатор\:
python.onboarding.feedback.system.used.interpreter=Используемый интерпретатор\:
python.onboarding.indexing.description=При первом открытии проекта <ide/> сканирует Python SDK и сам проект для сбора информации, необходимой для помощи при кодовании. Для продолжения дождитесь завершения индексации.
python.onboarding.interpreter.description=PyCharm уже настроил интерпретатор Python для этого курса. Вы можете изменить его или создать другой для своих проектов. Самый простой способ сделать это - использовать селектор интерпретатора Python в строке состояния.
python.onboarding.interpreter.tip=<strong>Подсказка\:</strong> здесь вы можете изучить настройки вашего интерпретатора Python
python.onboarding.invoke.completion=Теперь давайте начнем вводить {0} внутри скобок {1}. <ide/> показывает варианты автодополнения автоматически при вводе. Также можно нажать {2} и продолжить ввод для сокращения списка.
python.onboarding.invoke.completion.balloon=Начните вводить {0}, чтобы показать все доступные варианты автодополнения
python.onboarding.invoke.intention.for.code=Намерения также экономят время и упрощают кодование. Давайте используем намерение для быстрого добавления типа возвращаемого значения для {0}. Нажмите {1}.
python.onboarding.invoke.intention.for.code.balloon=Нажмите {0}, чтобы показать доступные намерения
python.onboarding.invoke.intention.for.warning.1=Вы только что исправили ошибку, но этот код можно сделать еще лучше. PyCharm подсвечивает и добавляет желтую лампочку к строкам кода, которые можно улучшить.
python.onboarding.invoke.intention.for.warning.2=Нажмите {0}, чтобы просмотреть предупреждения и применить быстрое исправление.
python.onboarding.invoke.intention.for.warning.balloon=Нажмите {0}, чтобы показать доступные быстрые исправления
python.onboarding.invoke.search.everywhere.1=При работе в <ide/> вам может понадобиться поиск файлов в проекте, символов, классов или даже действий ИСР. В этом уроке давайте найдем действие {0}, чтобы сделать строку {1} строчными буквами.
python.onboarding.invoke.search.everywhere.2=Нажмите {0} дважды, чтобы открыть диалог {1}.
python.onboarding.lesson.name=Знакомство с PyCharm
python.onboarding.module.description=Краткий обзор основных функций в {0}.
python.onboarding.module.name=Ознакомительный тур
python.onboarding.project.view.description=<strong>Окно проекта</strong> - одно из основных инструментальных окон. Оно содержит каталог проекта, внешние библиотеки SDK и временные файлы. Нажмите на кнопку с полосками для предпросмотра содержимого демо-проекта. Также можно открыть его, нажав {0}.
python.onboarding.run.options.professional=Другие действия, такие как профилирование {0} и запуск с покрытием {1}, можно показать, нажав на {2}.
python.onboarding.run.sample=Сейчас давайте запустим текущий файл, нажмите {0} или нажмите {1}.
python.onboarding.run.sample.balloon=Давайте запустим текущий файл, нажмите {0} или нажмите {1}.
python.onboarding.search.everywhere.description=Как видите, выделенный текст {0} был автоматически скопирован в строку ввода. Давайте введем {1} вместо {0}.
python.onboarding.select.fix=Примените первый пункт\: {0}. С этим исправлением ваш код будет выглядеть аккуратнее.
python.onboarding.start.debugging=Нажмите значок {0}, чтобы начать процесс отладки.
python.onboarding.stop.debugging=Давайте остановим отладку. Нажмите значок {0}.
python.onboarding.temporary.configuration.description=Вы открыли демо-пример. Теперь давайте его запустим\! В выделенном {0} вы можете увидеть популярные действия запуска для выбранной конфигурации. Например, вы можете запустить код {1} или отладить его {2}.
python.onboarding.toggle.breakpoint.1=Вы можете заметить, что вместо ожидаемого значения {0} метод {1} возвращает {2}. Давайте остановимся на операторе return для отладки проблемного кода.
python.onboarding.toggle.breakpoint.2=Нажмите на поле в выделенной области, чтобы установить точку останова.
python.onboarding.type.division=После обнаружения проблемы в коде давайте исправим её. Разделите полученную сумму на длину значений. Скрипт урока уже вставил {0}.
python.postfix.completion.complete=Выберите {0} из списка и нажмите {1}, чтобы завершить выражение.
python.postfix.completion.type=Введите {0} после скобки, чтобы увидеть список предложений.
python.quick.fix.refactoring.choose.change.signature=Выберите быстрое исправление {0}.
python.quick.fix.refactoring.close.completion.list=Сейчас мы не хотим применять автодополнение. Закройте список ({0}).
python.quick.fix.refactoring.finish.refactoring=Нажмите {0} (или нажмите {1}), чтобы завершить рефакторинг.
python.quick.fix.refactoring.help.link=Изменение сигнатуры
python.quick.fix.refactoring.invoke.intentions=Как вы могли заметить, <ide/> показывает здесь предупреждение. Давайте вызовем намерения, нажав {0}.
python.quick.fix.refactoring.lesson.name=Быстрый рефакторинг
python.quick.fix.refactoring.select.new.parameter=Давайте установим значение по умолчанию для нового параметра. Нажмите на строку нового параметра. Также можно переключить фокус на параметр, нажав {0}, а затем {1}.
python.quick.fix.refactoring.set.default.value=Вы можете перемещаться между полями и флажком с помощью {0}. Когда флажок установлен, <ide/> либо встраивает значение по умолчанию в другие вызовы, либо устанавливает его как значение по умолчанию для нового параметра. Предпросмотр сигнатуры поможет понять разницу. Теперь установите значение по умолчанию равным 0.
python.quick.fix.refactoring.type.new.argument=Некоторые рефакторинги можно выполнить как быстрые исправления. Предположим, мы хотим добавить параметр к методу {0} и передать ему переменную {1}. Давайте введем {2} после первого аргумента.
python.rename.exclude.item=Похоже, что {0} следует исключить из рефакторинга переименования. Выберите его и нажмите {1}.
python.rename.expand.dynamic.references=В простых случаях {0} просто выполнит рефакторинг переименования без подтверждения. Однако в этом примере <ide/> обнаруживает два вызова метода {0} для объектов с неизвестными типами. Разверните пункт {1}.
python.rename.find.window.closed.warning=Нажмите {0}, чтобы снова открыть окно поиска.
python.rename.finish.refactoring=Завершите рефакторинг переименования кнопкой {0}.
python.rename.press.rename=Нажмите {0} и переименуйте поле {1} (например, в {2}).
python.run.configuration.help.link=Помощь при запуске кода
python.run.configuration.lets.run=Давайте запустим наш простой пример с помощью {0}.
python.smart.completion.finish.completion=Теперь просто выберите пункт {0}, чтобы завершить этот урок.
python.smart.completion.help.link=Автодополнение с учетом типов
python.smart.completion.try.basic.completion=Попробуйте использовать базовое автодополнение, нажав {0}.
python.smart.completion.use.smart.completion=К сожалению, у <ide/> нет прямой информации о типе {0}. Но иногда он может предложить автодополнение по контексту\! Используйте {1} для вызова умного автодополнения.
python.tab.completion.lesson.name=Tab-автодополнение
python.tab.completion.select.item=Выберите пункт {0}, используя клавиши со стрелками, или просто начните его вводить.
python.tab.completion.start.completion=Предположим, вы хотите заменить {0} на {1}. Вызовите автодополнение, нажав {2}.
python.tab.completion.use.tab.completion=Если вы нажмете {0}, будет вставлено {1} перед {2}. Вместо этого нажмите {3}, чтобы заменить {2} на {1}.
toggle.case.part=регистр