js.debugger.before.describe.tool.window=При нажатии {0} произошло два действия. Во-первых, файл был запущен с помощью Node.js и открылось окно инструмента {1}, показывающее результаты выполнения кода. Во-вторых, <ide/> создала временную конфигурацию запуска/отладки для запуска файла таким образом. Теперь скройте окно инструмента с помощью {2}, чтобы лучше рассмотреть конфигурацию запуска/отладки.
js.debugger.before.edit=Что делать, если нужно настроить параметры этой новой конфигурации запуска/отладки или использовать другие настройки? Снова откройте меню {0} и нажмите "{1}".
js.debugger.before.intro.1=<ide/> позволяет запускать и отлаживать различные JavaScript приложения там, где вы пишете код.
js.debugger.before.intro.2=В этом модуле мы рассмотрим некоторые шаги, которые полезны при отладке любого кода. Мы будем использовать очень простое <a href\=''{0}''>Node.js</a> приложение, которое должно сравнивать два числа и возвращать {1} или {2}. Прежде чем продолжить, убедитесь, что Node.js <a href\=''{3}''>установлен</a> на вашем компьютере (для новой установки потребуется перезапустить <ide/>). Когда будете готовы продолжить, нажмите {4}.
js.debugger.before.manage.1=Здесь можно управлять конфигурациями запуска/отладки. Уделите время изучению доступных опций и закройте окно, когда будете готовы продолжить.
js.debugger.before.manage.2=Уделите время изучению доступных опций и закройте окно, когда будете готовы продолжить.
js.debugger.before.next=На этом урок завершен. Чтобы начать следующий урок, нажмите кнопку ниже или используйте {0}.
js.debugger.before.save.1=Таким образом, эти конфигурации служат точками входа для запуска/отладки приложений. Они могут быть временными или постоянными. Основное различие в том, что временные конфигурации автоматически удаляются при достижении лимита в 5 конфигураций по умолчанию.
js.debugger.before.save.2=Давайте посмотрим, как преобразовать временную конфигурацию в постоянную. Откройте выпадающее меню {0} в правом верхнем углу и выберите {1}.
js.debugger.before.title=Перед отладкой\: конфигурации запуска/отладки
js.debugger.module.description=Узнайте, как пошагово выполнять программы и находить проблемы, не выходя из ИСР.
js.debugger.module.name={0} Отладчик 101
js.debugger.part.1.gutter=Сравниваемые числа {0} и {1} не равны, поэтому при запуске кода должно вернуться {2}. Давайте выясним, почему возвращается {3}. На строке 1 кликните в области между \#1 и кодом (пустое пространство) для установки точки останова.
js.debugger.part.1.next=Вкладка {0} показывает все файлы, загруженные в текущий запущенный процесс. Двойной клик позволяет просмотреть содержимое любого файла. Чтобы перейти ко второй части урока, нажмите кнопку ниже или используйте {1}.
js.debugger.part.1.scripts.tab=Вкладка {0} показывает сообщения, записанные приложением, такие как ошибки. При отладке Node.js приложений <ide/> также показывает вкладку {1}, где можно выполнять фрагменты JavaScript кода и видеть консольные сообщения. Переключитесь на вкладку {2}, чтобы продолжить.
js.debugger.part.1.set.breakpoint=Мы можем использовать точки останова для приостановки выполнения приложения. Красный кружок в области отступа - это точка останова в <ide/>. Повторный клик удалит ее. Вы также можете кликнуть правой кнопкой мыши для настройки её поведения, например задать условие. Нажмите кнопку {0} в правом верхнем углу (или нажмите {1}), чтобы продолжить.
js.debugger.part.1.start.1=Теперь, когда у нас есть конфигурация запуска/отладки, давайте посмотрим, как использовать встроенный отладчик.
js.debugger.part.1.start.2=Сначала запустим код еще раз, чтобы проверить, что возвращается, так как в предыдущем уроке мы на этом не фокусировались. Нажмите кнопку {0} рядом с выпадающим списком конфигураций для запуска текущей выбранной конфигурации.
js.debugger.part.1.title=Отладка кода. Часть I
js.debugger.part.1.tool.window.1=Давайте изучим окно инструмента "{0}". Слева находятся иконки для остановки/перезапуска конфигурации и управления точками останова. Вверху несколько вкладок и набор иконок для пошагового выполнения кода.
js.debugger.part.1.tool.window.2=Мы находимся на вкладке "{0}", где выполняется большая часть работы. Справа все {1} сгруппированы по областям видимости со своими значениями. Представление "{2}" показывает стек вызовов. Если присмотреться, можно увидеть состояние приложения в каждой точке пути выполнения. Теперь переключитесь на вкладку "{3}".
js.debugger.part.2.buttons.1=Чтобы узнать больше о пошаговом выполнении программы, посмотрите <a href\="{0}">нашу онлайн справку</a>.
js.debugger.part.2.buttons.2=Теперь, что если мы хотим проверить значение выражения? <ide/> позволяет быстро сделать это с помощью функции {0}. Нажмите {1}, чтобы продолжить.
js.debugger.part.2.end=Поздравляем\! Вы завершили {0} и узнали некоторые базовые методы отладки различных приложений. При желании можете запустить код еще раз, чтобы убедиться, что теперь все работает правильно. Для более глубокого изучения отладки конкретных типов приложений, посмотрите нашу <a href\=''{1}''>веб-справку</a> и <a href\=''{2}''>блог-посты</a>.
js.debugger.part.2.evaluate.1=Добавьте {0} как выражение и нажмите {1}. Посмотрите на результат\: он равен {2}. Вот где проблема. Чтобы функция улавливала разные числа, нужно немного изменить выражение, чтобы результат был равен {3}.
js.debugger.part.2.evaluate.2=Теперь закройте всплывающее окно и исправьте проблему, которую мы нашли в коде. На строке 2 в {0} замените {1} на {2}.
js.debugger.part.2.step.into.1=<strong>Важно</strong>\: убедитесь, что на строке 1 есть точка останова, отладчик запущен ({0}) и открыт на вкладке {1}, прежде чем двигаться дальше.
js.debugger.part.2.step.into.2=Давайте продолжим поиск бага в коде и узнаем некоторые другие полезные вещи при отладке в <ide/>. Чтобы лучше понять, как выполняется код, мы могли бы добавить больше точек останова и использовать кнопку {0} ({1}) для перехода между ними, но есть способ быстрее. Давайте нажмем {2} и используем {3} ({4}) для входа в следующую строку выполнения.
js.debugger.part.2.stop=Наконец, давайте узнаем, как остановить отладчик, когда он больше не нужен. Сначала кликните на добавленную точку останова, чтобы удалить ее. Затем используйте {0} ({1}), чтобы остановить отладчик, и нажмите {2}, чтобы закрыть его окно инструментов.
js.debugger.part.2.title=Отладка кода. Часть II