inspection.extension.class.should.not.be.open.text=Класс расширения не должен быть open
inspection.light.service.must.not.be.open.message=Легковесный сервис не может быть open
inspection.use.platform.process.await.exit.display.name=Используйте 'com.intellij.util.io.ProcessKt.awaitExit()'
inspections.an.explicit.method.should.be.used.to.retrieve.an.application.service.message=Предоставьте явный метод 'getInstance()' для доступа к сервису приложения вместо свойства
inspections.application.service.as.static.immutable.property.with.backing.field.message=Сервис приложения не должен быть объявлен как static неизменяемое свойство с backing field
inspections.companion.object.in.extension=Companion object в расширении
inspections.companion.object.in.extension.message=Companion object в реализации ИСР расширения может содержать только логгеры и константы
inspections.create.object.and.move.prohibited.declarations.fix.text=Создать object и переместить запрещенные объявления
inspections.empty.companion.object.in.extension.message=Расширение не должно содержать пустой companion object
inspections.forbidden.method.in.suspend.context=Запрещенный метод в контексте suspend
inspections.forbidden.method.in.suspend.context.check.canceled.fix.text=Заменить 'ProgressManager.checkCanceled' на корутино-дружественный 'checkCancelled'
inspections.forbidden.method.in.suspend.context.check.canceled.text=Не вызывайте 'ProgressManager.checkCanceled' в контексте suspend. Используйте верхнеуровневую функцию 'checkCancelled'
inspections.forbidden.method.in.suspend.context.default.modality.state.text='defaultModalityState()' не работает в контексте suspend. Используйте 'contextModality()', если это действительно необходимо
inspections.forbidden.method.in.suspend.context.invoke.and.wait.fix.text=Заменить вызов 'invokeAndWait' на 'withContext(Dispatchers.EDT) {}'
inspections.forbidden.method.in.suspend.context.invoke.and.wait.text='invokeAndWait' может блокировать текущую корутину. Используйте вместо этого 'Dispatchers.EDT'
inspections.forbidden.method.in.suspend.context.invoke.later.fix.launch.text=Заменить 'invokeLater' на 'launch(Dispatchers.EDT)'
inspections.forbidden.method.in.suspend.context.invoke.later.fix.with.context.text=(может изменить семантику) Заменить вызов 'invokeLater' на 'withContext(Dispatchers.EDT) {}'
inspections.forbidden.method.in.suspend.context.invoke.later.text='invokeLater' неидиоматичен в контексте suspend. Используйте вместо этого 'Dispatchers.EDT'
inspections.forbidden.method.in.suspend.context.navigate.to.suspend.context=Перейти к контексту suspend
inspections.forbidden.method.in.suspend.context.text=Метод ''{0}'' аннотирован @RequiresBlockingContext. Он не предназначен для вызова в suspend функциях
inspections.move.prohibited.declarations.to.top.level.fix.text=Переместить запрещенные объявления на верхний уровень
inspections.plugin.extension.registers.kotlin.object=Класс расширения является Kotlin object
inspections.plugin.kotlin.object.registered.as.extension=Kotlin object зарегистрирован как расширение
inspections.remove.empty.companion.object.fix.text=Удалить пустой companion object