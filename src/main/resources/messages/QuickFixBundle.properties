access.static.field.via.class.reference.text=Уточнить доступ к static ''{0}'' через ссылку на класс ''{1}''
access.static.method.via.class.reference.text=Уточнить вызов static ''{0}'' через ссылку на класс ''{1}''
access.static.via.class.reference.family=Уточнить доступ к static члену через ссылку на класс
access.static.via.class.reference.title=Уточнить доступ к static члену через ссылку на класс
add.0.to.classpath=Добавить ''{0}'' в classpath
add.annotation.attribute.name=Добавить ''{0}\=''
add.annotation.attribute.name.family.name=Добавить имя атрибута аннотации
add.catch.clause.family=Добавить исключение в блок catch
add.catch.clause.text=Добавить блок(и) 'catch'
add.class.to.extends.list=Сделать ''{0}'' наследником ''{1}''
add.compiler.option.fix.name=Добавить ''{0}'' в параметры компилятора модуля
add.constructor.parameter.name=Добавить параметр конструктора
add.constructor.parameters=Добавить параметры конструктора
add.default.branch.to.variable.initializing.switch.fix.name=Добавить ветку ''default'' в оператор ''switch'', инициализующий ''{0}''
add.default.constructor.family=Добавить конструктор по умолчанию
add.default.constructor.text=Добавить конструктор {0} без аргументов в {1}
add.docTag.to.custom.tags=Добавить ''@{0}'' в пользовательские теги
add.docTag.to.custom.tags.preview=Добавляет этот тег в список пользовательских тегов, которые будут игнорироваться этой проверкой.
add.exception.from.field.initializer.to.constructor.throws.family.text=Добавить исключение в сигнатуру конструкторов класса
add.exception.from.field.initializer.to.constructor.throws.text=Добавить исключение в сигнатуру {0, choice, 0\#конструктора по умолчанию|1\#конструктора|2\#конструкторов} класса
add.exception.to.existing.catch.chooser.title=Выбрать блок Catch
add.exception.to.existing.catch.family=Добавить исключение в существующий блок Catch
add.exception.to.existing.catch.generic=Добавить исключение в существующий блок catch
add.exception.to.existing.catch.no.replacement=Добавить ''{1}'' в catch с ''{0}''
add.exception.to.existing.catch.replacement=Заменить ''{0}'' на более общий ''{1}''
add.exception.to.throws.family=Добавить исключение в сигнатуру метода
add.exception.to.throws.header=Добавить {0, choice, 0\#исключение|2\#исключения} в сигнатуру метода
add.exception.to.throws.hierarchy=Изменить все методы в иерархии
add.exception.to.throws.only.this=Изменить только этот метод
add.exception.to.throws.text=Добавить {0, choice, 0\#исключение|2\#исключения} в сигнатуру метода
add.finally.block.family=Добавить блок 'finally'
add.import=Добавить импорт
add.interface.to.implements.list=Реализовать в ''{0}'' интерфейс ''{1}''
add.library.copy.files.to.radio.button=Копировать файлы библиотеки ''{0}'' в  [&C]
add.library.description.choose.folder=Выберите каталог, куда будет скопирована библиотека
add.library.error.cannot.copy=Невозможно скопировать ''{0}'' в ''{1}''\n({2})
add.library.error.not.found=Файл библиотеки ''{0}'' не существует
add.library.title.choose.folder=Выбрать каталог
add.library.title.dialog=Добавить библиотеку ''{0}'' в проект
add.library.use.bundled.library.radio.button=Использовать ''{0}'' из дистрибутива {1}  [&U]
add.method.body.text=Добавить тело метода
add.method.family=Добавить метод
add.method.qualifier.fix.family=Добавить квалификатор метода
add.method.qualifier.fix.text=Добавить квалификатор ''{0}'' к методу
add.method.text=Добавить метод ''{0}'' в класс ''{1}''
add.missing.annotation.parameters.fix=Добавить отсутствующие параметры аннотации - {0}
add.missing.annotation.single.parameter.fix=Добавить отсутствующий параметр аннотации ''{0}''
add.missing.nested.patterns.fix.text=Добавить отсутствующ{0, choice, 1\#ий|2\#ие} вложенн{0, choice, 1\#ый шаблон|2\#ые шаблоны}
add.missing.str.processor=Добавить процессор 'STR.'
add.modifier.fix=Сделать ''{0}'' {1}
add.modifier.fix.family=Сделать {0}
add.new.array.family=Добавить отсутствующее выражение new
add.new.array.text=Добавить ''new {0}[]''
add.parameter.from.usage.text=Добавить ''{0}'' как {1,number,ordinal} {2} в {3} ''{4}''
add.qualifier=Добавить квалификатор
add.qualifier.original.class.chooser.title=Исходный класс
add.return.statement.text=Добавить оператор 'return'
add.runtime.exception.to.throws.family=Добавить runtime исключение в сигнатуру метода
add.runtime.exception.to.throws.header=Добавить Runtime исключение в сигнатуру метода
add.runtime.exception.to.throws.text=Добавить ''{0}'' в сигнатуру метода
add.type.arguments.single.argument.text=Добавить явные аргументы типа
add.type.arguments.text=Добавить явные аргументы типа к {0, choice, 1\#1-му|2\#2-му|3\#3-му|4\#{0,number}-му} аргументу
add.typecast.cast.text=Привести {1} к ''{0}''
add.typecast.convert.text=Преобразовать {1} в ''{0}''
add.typecast.family=Добавить приведение типа
add.typecast.text=Привести к ''{0}''
adjust.method.accepting.functional.expression.fix.family.name=Скорректировать метод, принимающий функциональное выражение
adjust.method.accepting.functional.expression.fix.text=Заменить ''{0}()'' на ''{1}()''
adjust.package.family=Скорректировать имя пакета
adjust.package.text=Установить имя пакета ''{0}''
annotations.fix=Аннотации
anonymous.class.presentation=Анонимный класс, производный от {0}
bring.variable.to.scope.family=Ввести переменную в область видимости
bring.variable.to.scope.text=Ввести ''{0}'' в область видимости
cannot.change.field.exception=Невозможно изменить тип поля ''{0}''.\nПричина\: {1}
cannot.create.java.file.error.text=Невозможно создать {0}.java в {1}\: {2}
cannot.create.java.file.error.title=Ошибка создания файла
cannot.create.java.package.error.text=Невозможно создать {0} в {1}\: {2}
cannot.create.java.package.error.title=Ошибка создания пакета
change.class.signature.family=Изменить сигнатуру класса
change.class.signature.text=Изменить сигнатуру ''{0}'' для соответствия ''{1}''
change.extends.list.family=Расширить класс от
change.method.parameters.family=Изменить параметры метода
change.method.parameters.text=Изменить параметры метода на ''{0}''
change.method.signature.from.usage.family=Изменить сигнатуру метода из использования
change.method.signature.from.usage.text=Изменить сигнатуру ''{0}'' на ''{1}({2})''
change.new.operator.type.family=Изменить тип оператора new
change.new.operator.type.text=Изменить ''{0}'' на ''new {1}{2}''
change.parameter.class.family=Изменить класс параметра
change.parameter.from.usage.text=Изменить {0,number,ordinal} {1} {2} ''{3}'' с ''{4}'' на ''{5}''
change.to.append.family=Исправить StringBuilder append
change.to.append.text=Изменить на ''{0}''
change.type.family=Изменить тип
change.type.text=Изменить тип на ''{0}''
choose.class.to.move.popup.title=Выберите класс для перемещения
choose.constructors.to.add.parameter.to=Выберите конструкторы для добавления параметра
choose.default.value.parameters.popup.title=Выберите параметры значения по умолчанию
choose.fields.to.generate.constructor.parameters.for=Выберите поля для генерации параметров конструктора
class.initializer.presentation={0} инициализатор класса
class.to.import.chooser.title=Класс для импорта
collection.addall.can.be.replaced.with.constructor.fix.description=Вызов '\#ref()' может быть заменен вызовом параметризованного конструктора
collection.addall.can.be.replaced.with.constructor.fix.family.name=Заменить вызов 'addAll()/putAll()' вызовом параметризованного конструктора
collection.addall.can.be.replaced.with.constructor.fix.name=Заменить вызов ''{0}()'' вызовом параметризованного конструктора
collection.addall.can.be.replaced.with.constructor.fix.options.dialog.title=Добавить класс для проверки
collection.addall.can.be.replaced.with.constructor.fix.options.label=Классы для проверки\:
collection.to.array.family.name=Применить преобразование '.toArray()'
collection.to.array.text=Применить преобразование ''.toArray({0})''
convert.primitive.to.boxed.type=Преобразовать примитивный тип в обёрнутый
convert.to.string.family=Исправить символьный литерал
convert.to.string.text=Преобразовать в строковый литерал
convert.variable.to.field.in.anonymous.class.fix.name=Переместить ''{0}'' в анонимный объект
create.accessor.for.unused.field.family=Создать аксессор для неиспользуемого поля
create.annotation.family=Добавить аннотацию к объявлению
create.annotation.text=Аннотировать как @{0}
create.block=Создать блок
create.class.from.new.family=Создать класс из оператора new
create.class.from.usage.family=Создать класс из использования
create.class.from.usage.text=Создать {0} ''{1}''
create.constant.from.usage.family=Создать константу из использования
create.constructor.body.command=Создать тело конструктора
create.constructor.family=Создать конструктор
create.constructor.from.new.family=Создать конструктор из оператора new
create.constructor.from.new.text=Создать конструктор
create.constructor.from.super.call.family=Создать конструктор из вызова super()
create.constructor.from.this.call.family=Создать конструктор из вызова this()
create.constructor.matching.super=Создать конструктор, соответствующий super
create.constructor.text=Создать конструктор в ''{0}''
create.element.in.class=Создать {0} ''{1}'' в ''{2}''
create.field.from.usage.family=Создать поле из использования
create.field.text=Создать поле {0}
create.getter=Создать Getter
create.getter.and.setter.for.field=Создать getter и setter для ''{0}''
create.getter.for.field=Создать getter для ''{0}''
create.inner.class.from.usage.text=Создать внутренний {0} ''{1}''
create.local.from.instanceof.usage.family=Создать локальную переменную из использования instanceof
create.local.from.instanceof.usage.text=Вставить объявление ''({0}){1}''
create.local.from.usage.family=Создать локальную переменную из использования
create.member.from.usage.family=Создать член класса из использования
create.method.body=Создать тело метода
create.method.from.usage.family=Создать метод из использования
create.method.from.usage.text=Создать метод ''{0}''
create.parameter.from.usage.family=Создать параметр из использования
create.property.from.usage.family=Создать свойство из использования
create.property.from.usage.full.text=Создать свойство ''{0}'' в ''{1}''
create.property.from.usage.text=Создать свойство ''{0}''
create.property.text=Создать свойство {0}
create.read.only.property.from.usage.full.text=Создать свойство только для чтения ''{0}'' в ''{1}''
create.read.only.property.from.usage.text=Создать свойство только для чтения ''{0}''
create.service=Создать сервис
create.service.implementation=Создать реализацию сервиса
create.service.implementation.fix.family.name=Создать класс реализации сервиса
create.service.implementation.fix.name=Создать класс ''{0}''
create.service.interface.fix.family.name=Создать сервис
create.service.interface.fix.name=Создать сервис ''{0}''
create.setter=Создать Setter
create.setter.for.field=Создать setter для ''{0}''
create.type.parameter.from.usage.chooser.title=Место добавления параметра типа
create.type.parameter.from.usage.family=Создать параметр типа из использования
create.type.parameter.from.usage.text=Создать параметр типа ''{0}''
create.write.only.property.from.usage.full.text=Создать свойство только для записи ''{0}'' в ''{1}''
create.write.only.property.from.usage.text=Создать свойство только для записи ''{0}''
defer.final.assignment.with.temp.family=Отложить финальное присваивание с временной переменной
defer.final.assignment.with.temp.text=Отложить присваивание ''{0}'' с помощью временной переменной
delete.body.text=Удалить тело метода
delete.catch.family=Удалить catch
delete.catch.text=Удалить catch для ''{0}''
delete.reference.fix.text=Удалить ссылку
delete.return.fix.family=Удалить return
delete.return.fix.side.effects.text=Удалить return {0} и извлечь побочные эффекты
delete.return.fix.text=Удалить return {0}
delete.unreachable.statement.fix.text=Удалить недостижимый оператор
enable.optimize.imports.on.the.fly=Включить 'Настройки | Редактор | Общие | Автоимпорт | Оптимизовать импорты на лету'
exchange.extends.implements.keyword=Заменить ''{0} {2}'' на ''{1} {2}''
extend.sealed.name=Сделать ''{0}'' {1, choice, 1\#расширяющим|2\#реализующим} ''{2}''
extend.sealed.title=Сделать ''{0}'' {1, choice, 1\#расширяющим|2\#реализующим} ''{2}'' и
extract.side.effects=Извлечь {0, choice, 1\#побочный эффект|2\#побочные эффекты}
extract.side.effects.convert.to.if=Извлечь побочные эффекты как оператор 'if'
extract.side.effects.family.name=Удалить оператор с извлечением побочных эффектов
field.to.import.chooser.title=Поле для импорта
fix.add.special.annotation.family=Добавить в специальные аннотации
fix.add.special.annotation.text=Добавить ''{0}'' в список специальных аннотаций
fix.add.write.annotation.description=Добавить ''@{0}'' в список аннотаций, помечающих неявно записываемые поля.<p>Этот список можно редактировать в настройках проверки "Неиспользуемые объявления" в разделе "Точки входа | Аннотации"
fix.add.write.annotation.text=Считать поля с аннотацией ''@{0}'' неявно записываемыми
fix.argument.family=Исправить аргументы
fix.expression.role.argument=аргумент
fix.expression.role.expression=выражение
fix.expression.role.lambda.return=возвращаемое значение lambda
fix.expression.role.literal=литерал
fix.expression.role.nth.argument={0, choice, 1\#1-й|2\#2-й|3\#3-й|4\#{0,number}-й} аргумент
fix.expression.role.qualifier=квалификатор
fix.javadoc.family=Исправить Javadoc
fix.modifiers.family=Исправить модификаторы
fix.parameter.type.family=Исправить тип параметра
fix.parameter.type.text=Сделать так, чтобы ''{0}'' принимал параметр типа ''{1}'' здесь
fix.receiver.parameter.name.family=Исправить имя параметра-получателя
fix.receiver.parameter.type.family=Исправить тип параметра-получателя
fix.receiver.parameter.type.text=Изменить на тип внешнего класса
fix.return.type.family=Исправить возвращаемый тип
fix.return.type.or.predecessor.text=Сделать так, чтобы ''{0}'' возвращал ''{1}'' или предка
fix.return.type.text=Сделать так, чтобы ''{0}'' возвращал ''{1}''
fix.single.character.string.to.char.literal.family=Исправить тип литерала
fix.single.character.string.to.char.literal.text=Изменить {0} на {1} (в литерал {2})
fix.super.method.return.type.family=Исправить возвращаемый тип метода суперкласса
fix.super.method.return.type.text=Сделать возвращаемым типом ''{0}'' тип ''{1}''
fix.throws.list.add.exception=Добавить ''{0}'' в список throws ''{1}''
fix.throws.list.family=Исправить список throws
fix.throws.list.remove.exception=Удалить ''{0}'' из списка throws ''{1}''
fix.unused.symbol.injection.family=Добавить в аннотации внедрения зависимостей
fix.unused.symbol.injection.text=Подавить предупреждение о неиспользовании, если аннотировано ''{0}''
fix.update.modifier.change.inheritors=Изменить этот метод и наследников
fix.update.modifier.change.this=Изменить только этот метод
fix.variable.type.family=Исправить тип переменной
fix.variable.type.text=Изменить тип {0} ''{1}'' на ''{2}''
generate.overloaded.method.or.constructor.with.default.parameter.values=Сгенерировать перегруженный {0} со значениями параметров по умолчанию
generate.overloaded.method.with.default.parameter.values=Сгенерировать перегруженный метод со значениями параметров по умолчанию
implement.methods.fix=Реализовать методы
implement.or.extend.fix.extend.text=Сделать ''{0}'' расширяющим ''{1}''
implement.or.extend.fix.family=Реализовать/Расширить требуемый базовый класс
implement.or.extend.fix.implement.text=Сделать ''{0}'' реализующим ''{1}''
import.class.fix=Импортовать класс
initialize.final.field.in.constructor.choose.dialog.title=Выберите конструкторы для добавления инициализации
initialize.final.field.in.constructor.name=Инициализовать в конструкторе
insert.empty.parenthesis=Вставить '()'
insert.new.fix=Вставить new
insert.sam.method.call.fix.family.name=Вставить вызов единственного абстрактного метода
insert.sam.method.call.fix.name=Вставить ''.{0}'' для вызова метода функционального интерфейса
insert.super.constructor.call.family=Вставить вызов конструктора базового класса
intention.move.parenthesis.name=Исправить положение закрывающей скобки
iterate.iterable=Итерировать
java.8.collection.removeif.inspection.description=Цикл можно заменить на 'Collection.removeIf'
java.8.collection.removeif.inspection.fix.name=Заменить цикл на 'Collection.removeIf'
java.8.list.replaceall.inspection.description=Цикл можно заменить на 'List.replaceAll'
java.8.list.replaceall.inspection.fix.name=Заменить цикл на 'List.replaceAll'
java.8.list.sort.inspection.description=Collections.sort можно заменить на List.sort
java.8.list.sort.inspection.fix.name=Заменить на List.sort
java.8.map.api.inspection.description=Можно заменить одним вызовом метода ''Map.{0}''
java.8.map.api.inspection.fix.family.name=Заменить одним вызовом метода Map
java.8.map.api.inspection.fix.text=Заменить на вызов метода ''{0}''
java.9.merge.module.statements.fix.family.name=Объединить с другой директивой ''{0}''
java.9.merge.module.statements.fix.name=Объединить с другой директивой ''{0} {1}''
make.annotation.applicable.to.0.fix=Сделать аннотацию применимой к {0}
make.class.an.interface.family=Сделать класс интерфейсом
make.class.an.interface.text=Сделать ''{0}'' интерфейсом
make.final.copy.to.temp=Скопировать ''{0}'' во временную переменную {1}
make.final.family=Сделать final
make.interface.an.class.text=Сделать ''{0}'' классом
make.receiver.parameter.first.family=Сделать параметр-приемник первым
make.receiver.parameter.first.text=Переместить 'this' в начало списка
make.vararg.parameter.last.family=Сделать vararg параметр последним
make.vararg.parameter.last.text=Переместить ''{0}'' в конец списка
merge.duplicate.attributes.family=Объединить дублирующиеся атрибуты
method.to.import.chooser.title=Метод для импорта
module.info.add.directive.family.name=Добавить директиву в module-info.java
module.info.add.exports.name=Добавить директиву ''exports {0}'' в module-info.java
module.info.add.opens.name=Добавить директиву ''opens {0}'' в module-info.java
module.info.add.requires.name=Добавить директиву ''requires {0}'' в module-info.java
module.info.add.uses.name=Добавить директиву ''uses {0}'' в module-info.java
move.0.from.module.1.to.2=Переместить ''{0}'' из модуля ''{1}'' в ''{2}''
move.0.in.1=Переместить ''{0}'' в ''{1}''…
move.bound.class.to.front.fix.text=Переместить границу ''{0}'' в начало списка границ параметра типа ''{1}''
move.catch.up.family=Переместить 'catch' вверх
move.catch.up.text=Переместить catch для ''{0}'' перед ''{1}''
move.class.in.extend.list.family=Переместить класс в списке extends
move.class.to.package.family=Переместить класс в пакет
move.class.to.package.text=Переместить в пакет ''{0}''
move.class.to.separate.file.family=Переместить класс в отдельный файл
move.class.to.separate.file.text=Переместить класс ''{0}'' в ''{0}.java''
move.file.to.source.root.text=Переместить файл в корень исходников
move.switch.branch.up.family=Переместить ветку switch вверх
move.switch.branch.up.text=Переместить ветку switch ''{0}'' перед ''{1}''
navigate.duplicate.element.text=Перейти к дубликату {0}
navigate.variable.declaration.family=Перейти к объявлению переменной
navigate.variable.declaration.text=Перейти к предыдущему объявлению переменной ''{0}''
negation.broader.scope.family=Расширить область отрицания
negation.broader.scope.text=Изменить на ''\!({0})''
new.method.body.template.error.text=Пожалуйста, исправьте шаблон "Тело нового метода"
new.method.body.template.error.title=Ошибка шаблона файла
optimize.imports.fix=Оптимизовать импорты
orderEntry.fix.add.dependency.on.module=Добавить зависимость от модуля ''{0}''
orderEntry.fix.add.dependency.on.module.choose=Добавить зависимость от модуля…
orderEntry.fix.add.library.to.classpath=Добавить библиотеку ''{0}'' в classpath
orderEntry.fix.choose.module.to.add.dependency.on=Выберите модуль для добавления зависимости
orderEntry.fix.circular.dependency.warning=Добавление зависимости от модуля ''{0}'' создаст циклическую зависимость между модулями ''{1}'' и ''{2}''.\nДобавить зависимость?
orderEntry.fix.family.add.library.to.classpath=Добавить библиотеку в classpath
orderEntry.fix.family.add.library.to.classpath.options=Добавить библиотеку в classpath…
orderEntry.fix.family.add.module.dependency=Добавить зависимость от модуля
orderEntry.fix.title.circular.dependency.warning=Предупреждение о циклической зависимости
permute.arguments=Переставить аргументы
popup.title.choose.library.to.add.dependency.on=Выберите библиотеку для добавления зависимости
qualify.method.call.family=Уточнить вызов метода
qualify.method.call.fix=Уточнить вызов с помощью ''{0}''
remove.annotation.fix.family=Удалить аннотацию
remove.annotation.fix.text=Удалить аннотацию ''@{0}''
remove.class.from.extends.list=Сделать ''{0}'' не наследующим ''{1}''
remove.interface.from.implements.list=Сделать ''{0}'' не реализующим ''{1}''
remove.modifier.fix=Сделать ''{0}'' не {1}
remove.modifier.fix.family=Сделать не {0}
remove.one.modifier.fix=Удалить модификатор ''{0}''
remove.override.fix.family=Удалить переопределение
remove.override.fix.text=Удалить аннотацию переопределения из объявления метода
remove.parameter.from.usage.text=Удалить {0,number,ordinal} {1} из {2} ''{3}''
remove.parameter.list=Удалить список параметров
remove.qualifier.action.text=Удалить квалификатор
remove.qualifier.fix=Удалить квалификатор
remove.redundant.arguments.family=Удалить избыточные аргументы
remove.redundant.arguments.text=Удалить избыточные аргументы для вызова ''{0}''
remove.redundant.nested.patterns.fix.text=Удалить избыточный вложенный паттерн{0, choice, 1\#|2\#ы}
remove.redundant.str.processor=Удалить избыточный 'STR' процессор
remove.suppression.action.family=Удалить подавление
remove.suppression.action.name=Удалить подавление ''{0}''
remove.unreachable.branches=Удалить недостижимые ветви
remove.unused.element.family=Удалить неиспользуемый {0}
rename.wrong.reference.family=Переименовать неверную ссылку
rename.wrong.reference.text=Переименовать ссылку
replace.for.each.loop.with.iterator.for.loop=Заменить цикл 'for each' на цикл 'for' с итератором
replace.with.getter=Заменить на getter
replace.with.getter.setter=Заменить на getter/setter
replace.with.list.access.text=Заменить на доступ к списку
replace.with.qualifier.text=Заменить квалификатором
replace.with.qualifier.text.role=Заменить {0} квалификатором
replace.with.setter=Заменить на setter
replace.with.type.pattern.fix=Заменить на паттерн типа
reuse.variable.declaration.family=Повторно использовать предыдущую переменную
reuse.variable.declaration.text=Повторно использовать предыдущую переменную ''{0}''
safe.delete.family=Безопасное удаление
safe.delete.text=Безопасно удалить ''{0}''
seal.class.from.permits.list.fix=Запечатать наследника
searching.for.usages.progress.title=Поиск использований…
setup.jdk.location.family=Настроить расположение JDK
setup.jdk.location.text=Настроить JDK
side.effect.action.cancel=Отмена [&C]
side.effect.action.remove=Удалить [&R]
side.effect.action.transform=Преобразовать [&T]
side.effects.warning.dialog.title=Обнаружены побочные эффекты
simplify.boolean.expression.extracting.side.effects=(с извлечением побочных эффектов)
simplify.boolean.expression.family=Упростить логическое выражение
simplify.boolean.expression.text=Упростить ''{0}'' до {1}
static.import.constant.kind.text=static-константа
static.import.constant.text=Импортовать static-константу
static.import.method.choose.method.to.import=Выберите метод для импорта
static.import.method.kind.text=static-метод
static.import.method.text=Импортовать static-метод
super.class.constructors.chooser.title=Выберите конструкторы суперкласса
surround.annotation.parameter.value.with.quotes=Заключить значение параметра аннотации в кавычки
surround.with.array.initialization=Обернуть в инициализацию массива
surround.with.try.catch.fix=Обернуть в try/catch
target.class.chooser.title=Выберите целевой класс
target.method.chooser.title=Выберите целевой метод
uidesigner.change.bound.field.type=Изменить тип привязанного поля
uidesigner.change.gui.component.type=Изменить тип GUI-компонента
unwrap.array.initializer.fix=Заменить инициализатор массива его элементом
wrap.expression.using.static.accessor.family=Обернуть выражение
wrap.expression.using.static.accessor.text=Обернуть с помощью ''{0}()''
wrap.expression.using.static.accessor.text.role=Обернуть {1} с помощью ''{0}()''
wrap.with.adapter.call.family.name=Адаптировать с помощью вызова или нового объекта
wrap.with.adapter.parameter.multiple.text=Адаптировать {0, choice, 1\#1-й|2\#2-й|3\#3-й|4\#{0,number}-й} аргумент с помощью ''{1}''
wrap.with.adapter.parameter.single.text=Адаптировать аргумент с помощью ''{0}''
wrap.with.adapter.text=Адаптировать с помощью ''{0}''
wrap.with.adapter.text.role=Адаптировать {1} с помощью ''{0}''
wrap.with.block=Обернуть в блок
wrap.with.optional.parameter.text=Обернуть {0, choice, 1\#1-й|2\#2-й|3\#3-й|4\#{0,number}-й} аргумент с помощью ''java.util.Optional''
wrap.with.optional.single.parameter.text=Обернуть с помощью 'java.util.Optional'